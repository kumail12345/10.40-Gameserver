#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ControlRig

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function ControlRig.ControlRig.GetDeltaTime
// 0x0004 (0x0004 - 0x0000)
struct ControlRig_GetDeltaTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControlRig_GetDeltaTime) == 0x000004, "Wrong alignment on ControlRig_GetDeltaTime");
static_assert(sizeof(ControlRig_GetDeltaTime) == 0x000004, "Wrong size on ControlRig_GetDeltaTime");
static_assert(offsetof(ControlRig_GetDeltaTime, ReturnValue) == 0x000000, "Member 'ControlRig_GetDeltaTime::ReturnValue' has a wrong offset!");

// Function ControlRig.ControlRigControl.OnEnabledChanged
// 0x0001 (0x0001 - 0x0000)
struct ControlRigControl_OnEnabledChanged final
{
public:
	bool                                          bIsEnabled;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControlRigControl_OnEnabledChanged) == 0x000001, "Wrong alignment on ControlRigControl_OnEnabledChanged");
static_assert(sizeof(ControlRigControl_OnEnabledChanged) == 0x000001, "Wrong size on ControlRigControl_OnEnabledChanged");
static_assert(offsetof(ControlRigControl_OnEnabledChanged, bIsEnabled) == 0x000000, "Member 'ControlRigControl_OnEnabledChanged::bIsEnabled' has a wrong offset!");

// Function ControlRig.ControlRigControl.OnHoveredChanged
// 0x0001 (0x0001 - 0x0000)
struct ControlRigControl_OnHoveredChanged final
{
public:
	bool                                          bIsSelected;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControlRigControl_OnHoveredChanged) == 0x000001, "Wrong alignment on ControlRigControl_OnHoveredChanged");
static_assert(sizeof(ControlRigControl_OnHoveredChanged) == 0x000001, "Wrong size on ControlRigControl_OnHoveredChanged");
static_assert(offsetof(ControlRigControl_OnHoveredChanged, bIsSelected) == 0x000000, "Member 'ControlRigControl_OnHoveredChanged::bIsSelected' has a wrong offset!");

// Function ControlRig.ControlRigControl.OnManipulatingChanged
// 0x0001 (0x0001 - 0x0000)
struct ControlRigControl_OnManipulatingChanged final
{
public:
	bool                                          bIsManipulating;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControlRigControl_OnManipulatingChanged) == 0x000001, "Wrong alignment on ControlRigControl_OnManipulatingChanged");
static_assert(sizeof(ControlRigControl_OnManipulatingChanged) == 0x000001, "Wrong size on ControlRigControl_OnManipulatingChanged");
static_assert(offsetof(ControlRigControl_OnManipulatingChanged, bIsManipulating) == 0x000000, "Member 'ControlRigControl_OnManipulatingChanged::bIsManipulating' has a wrong offset!");

// Function ControlRig.ControlRigControl.OnSelectionChanged
// 0x0001 (0x0001 - 0x0000)
struct ControlRigControl_OnSelectionChanged final
{
public:
	bool                                          bIsSelected;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControlRigControl_OnSelectionChanged) == 0x000001, "Wrong alignment on ControlRigControl_OnSelectionChanged");
static_assert(sizeof(ControlRigControl_OnSelectionChanged) == 0x000001, "Wrong size on ControlRigControl_OnSelectionChanged");
static_assert(offsetof(ControlRigControl_OnSelectionChanged, bIsSelected) == 0x000000, "Member 'ControlRigControl_OnSelectionChanged::bIsSelected' has a wrong offset!");

// Function ControlRig.ControlRigControl.OnTransformChanged
// 0x0030 (0x0030 - 0x0000)
struct ControlRigControl_OnTransformChanged final
{
public:
	struct FTransform                             NewTransform;                                      // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControlRigControl_OnTransformChanged) == 0x000010, "Wrong alignment on ControlRigControl_OnTransformChanged");
static_assert(sizeof(ControlRigControl_OnTransformChanged) == 0x000030, "Wrong size on ControlRigControl_OnTransformChanged");
static_assert(offsetof(ControlRigControl_OnTransformChanged, NewTransform) == 0x000000, "Member 'ControlRigControl_OnTransformChanged::NewTransform' has a wrong offset!");

// Function ControlRig.ControlRigComponent.BP_GetControlRig
// 0x0008 (0x0008 - 0x0000)
struct ControlRigComponent_BP_GetControlRig final
{
public:
	class UControlRig*                            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControlRigComponent_BP_GetControlRig) == 0x000008, "Wrong alignment on ControlRigComponent_BP_GetControlRig");
static_assert(sizeof(ControlRigComponent_BP_GetControlRig) == 0x000008, "Wrong size on ControlRigComponent_BP_GetControlRig");
static_assert(offsetof(ControlRigComponent_BP_GetControlRig, ReturnValue) == 0x000000, "Member 'ControlRigComponent_BP_GetControlRig::ReturnValue' has a wrong offset!");

}

