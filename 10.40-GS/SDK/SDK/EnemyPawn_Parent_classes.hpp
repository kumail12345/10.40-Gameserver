#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: EnemyPawn_Parent

#include "Basic.hpp"

#include "FortniteGame_structs.hpp"
#include "FortniteGame_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "GameplayTags_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass EnemyPawn_Parent.EnemyPawn_Parent_C
// 0x0600 (0x26B0 - 0x20B0)
class AEnemyPawn_Parent_C final : public AFortAIPawn
{
public:
	uint8                                         Pad_20A8[0x8];                                     // 0x20A8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x20B0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UCapsuleComponent*                      WeaponCapsuleCollision;                            // 0x20B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        Elemental_Layer_Audio_Loop;                        // 0x20C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         FadeMiniBossLightOutTL_Fade_2CE2533F4858E8E5F1A8D39F9CE6D9F4; // 0x20C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            FadeMiniBossLightOutTL__Direction_2CE2533F4858E8E5F1A8D39F9CE6D9F4; // 0x20CC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_20CD[0x3];                                     // 0x20CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     FadeMiniBossLightOutTL;                            // 0x20D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Enemy_Spawn_Out_TL_ColorFadeOutTrack_999FBE184F147A4FE3025AB553DBFA9C; // 0x20D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Enemy_Spawn_Out_TL_FadeInTrack_999FBE184F147A4FE3025AB553DBFA9C; // 0x20DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Enemy_Spawn_Out_TL__Direction_999FBE184F147A4FE3025AB553DBFA9C; // 0x20E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_20E1[0x7];                                     // 0x20E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Enemy_Spawn_Out_TL;                                // 0x20E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EnemySpawnInTL_MiniBossFadeLight_5C7376B04DFAE1465B97F1BB1B873D88; // 0x20F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EnemySpawnInTL_ColorFadeOutTrack_5C7376B04DFAE1465B97F1BB1B873D88; // 0x20F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EnemySpawnInTL_FadeInTrack_5C7376B04DFAE1465B97F1BB1B873D88; // 0x20F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            EnemySpawnInTL__Direction_5C7376B04DFAE1465B97F1BB1B873D88; // 0x20FC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_20FD[0x3];                                     // 0x20FD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     EnemySpawnInTL;                                    // 0x2100(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               Death_Effects;                                     // 0x2108(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        HQ_Death_Particle_System;                          // 0x2110(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DeathFX_SpawnRateScale;                            // 0x2118(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HQ_DeathFX_MaxDistance;                            // 0x211C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        LQ_Death_Particle_System;                          // 0x2120(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LQ_DeathFX_CylinderHeight;                         // 0x2128(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LQ_DeathFX_CylinderRadius;                         // 0x212C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LQ_DeathFX_SpawnRateScale;                         // 0x2130(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   LQ_PS_Socket_Attach;                               // 0x2134(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Death_Socket;                                      // 0x213C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UsePOCScaleAndMaterials;                           // 0x2144(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          POCShouldOverrideMaterial;                         // 0x2145(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          POCShouldOverrideMaterialValues;                   // 0x2146(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2147[0x1];                                     // 0x2147(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     POCOverrideMaterial;                               // 0x2148(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           POCMaterialHairColor;                              // 0x2150(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           POCMaterialSkinColor;                              // 0x2160(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           POCMaterialPantColor;                              // 0x2170(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           POCMaterialShirtColor;                             // 0x2180(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRandomStream                          RandomStream;                                      // 0x2190(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor)
	float                                         PseudoRandomNetworkedFloat;                        // 0x2198(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseRandomColorVariation;                           // 0x219C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_219D[0x3];                                     // 0x219D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FLinearColor>                   MaleHuskHairColors;                                // 0x21A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FLinearColor>                   MaleHuskSkinColors;                                // 0x21B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FLinearColor>                   MaleHuskPantColors;                                // 0x21C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FLinearColor>                   MaleHuskShirtColors;                               // 0x21D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	class UCurveFloat*                            HieghtDistributionCurve;                           // 0x21E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RandomizeMeshScale;                                // 0x21E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21E9[0x7];                                     // 0x21E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             SpawnParticlesTransform;                           // 0x21F0(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UMaterialInstanceDynamic*               Pumpkin_Head_MID;                                  // 0x2220(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        SpawnParticles;                                    // 0x2228(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               CharacterElementalParticles;                       // 0x2230(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AllowHeadshot;                                     // 0x2238(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2239[0x7];                                     // 0x2239(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  TC_RangedWeapon;                                   // 0x2240(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UParticleSystemComponent*               HeadshotParticleSystemComp;                        // 0x2260(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           Additive_Hit_React_Montage;                        // 0x2268(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Death_Normal_Sound;                                // 0x2270(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Elemental_Audio_Layer_Sound;                       // 0x2278(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SpecialEventHalloweenPumpkinHead;                  // 0x2280(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2281[0x7];                                     // 0x2281(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  TC_NPCCharacterTypeHuskBasic;                      // 0x2288(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTagContainer                  TC_SpecialEventHalloweenPumpkinHead;               // 0x22A8(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         PumpkinHeadPercentage;                             // 0x22C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_22CC[0x4];                                     // 0x22CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 GE_SpecialEvent_Halloween_PumpkinHead;             // 0x22D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               PumpkinHeadRotation;                               // 0x22D8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                PumpkinHeadScale;                                  // 0x22E4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                PumpkinHeadOffset;                                 // 0x22F0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Headshot_FX_Socket;                                // 0x22FC(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2304[0x4];                                     // 0x2304(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystemComponent*               SleepParticleSystemComp;                           // 0x2308(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Husk_Sleeping_Sound;                               // 0x2310(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        HuskSleepSound;                                    // 0x2318(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               WakeUpParticleSystemComp;                          // 0x2320(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Sleeping;                                          // 0x2328(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2329[0x7];                                     // 0x2329(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class USkeletalMeshComponent*, class UFXSkeletonMeshComponent_C*> AwakenFXSkeletalMeshes;                            // 0x2330(0x0050)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TMap<class UStaticMeshComponent*, class UFXStaticMeshComponent_C*> AwakenFXStaticMeshes;                              // 0x2380(0x0050)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	float                                         AwokenMaxDistance;                                 // 0x23D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AwakenDuration;                                    // 0x23D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           DestroyAwakenFXTimer;                              // 0x23D8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TMap<class USkeletalMeshComponent*, class UFXSkeletonMeshComponent_C*> BuildingHitFXSkeletalMeshes;                       // 0x23E0(0x0050)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TMap<class UStaticMeshComponent*, class UFXStaticMeshComponent_C*> BuildingHitFXStaticMeshes;                         // 0x2430(0x0050)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	float                                         BuildingHitDuration;                               // 0x2480(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2484[0x4];                                     // 0x2484(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           DestroyBuildingHitFXTimer;                         // 0x2488(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UFXSkeletonMeshComponent_C*             TempFXSkeletalMesh;                                // 0x2490(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class USkeletalMeshComponent*>         RegisteredSkeletalMeshesForEffects;                // 0x2498(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<class UStaticMeshComponent*>           RegisteredStaticMeshesForEffects;                  // 0x24A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	bool                                          HasGlowColorsAssigned;                             // 0x24B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          SpawnInTimelineCompletedSuccessfully;              // 0x24B9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_24BA[0x6];                                     // 0x24BA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CharacterSpawnInSafetyCheckHandle;                 // 0x24C0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<class UMaterialInstanceDynamic*>       Previous_MID;                                      // 0x24C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	struct FVector                                FrozenHuskMeshScale;                               // 0x24D8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SpawnFrozenHuskMesh;                               // 0x24E4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_24E5[0x3];                                     // 0x24E5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystem*                        CharacterAmbientParticlesTemplate;                 // 0x24E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               CharacterAmbientParticles;                         // 0x24F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 DuplicateCharacterMesh;                            // 0x24F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               DuplicateCharacterMID;                             // 0x2500(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                BoneRefPosePosition;                               // 0x2508(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                MiniBossSizeScale;                                 // 0x2514(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   MiniBossLight;                                     // 0x2520(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               MinibossPSComponent;                               // 0x2528(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MiniBossLightIntensity;                            // 0x2530(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CharacterParticlesMaxDrawDistance;                 // 0x2534(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Slow_Shackle_Scale;                                // 0x2538(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_253C[0x4];                                     // 0x253C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UPhysicalMaterial*>              Original_Phys_Material;                            // 0x2540(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<class UParticleSystemComponent*>       Elemental_FXs;                                     // 0x2550(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	bool                                          IsMiniBoss;                                        // 0x2560(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2561[0x3];                                     // 0x2561(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                SizeScale_FireElemental;                           // 0x2564(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                SizeScale_FireElemental_Head;                      // 0x2570(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_257C[0x4];                                     // 0x257C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     DeathFX_MID_Index0;                                // 0x2580(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     Death_FX_MID_Index_1;                              // 0x2588(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DeathFX_Use_Strands;                               // 0x2590(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2591[0x3];                                     // 0x2591(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           DeathFX_EmissiveHot;                               // 0x2594(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Death_FX_Emissive_Soft_Color;                      // 0x25A4(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DeathFX_Change_Emissive;                           // 0x25B4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          DeathFX_Customize_Visuals;                         // 0x25B5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_25B6[0x2];                                     // 0x25B6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Ice_HandL;                                         // 0x25B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Ice_HandR;                                         // 0x25C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Ice_HandL_Name;                                    // 0x25D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Ice_HandR_Name;                                    // 0x25E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Ice_SpawnRateScale;                                // 0x25E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Lightning_ElecFresExp;                             // 0x25EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Lightning_SizeScale;                               // 0x25F0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Lightning_WPOScale;                                // 0x25FC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Lightning_WPOBias;                                 // 0x2608(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Lightning_SpawnScaleRate;                          // 0x2614(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UMaterialInstanceDynamic*>       Previous_MID_AuxObjs;                              // 0x2618(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<class UObject*>                        Auxillary_Objects;                                 // 0x2628(0x0010)(Edit, BlueprintVisible, ZeroConstructor)
	int32                                         Restoring_Array_Index;                             // 0x2638(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_263C[0x4];                                     // 0x263C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UObject*>                        Duplicate_Auxillary_Objects;                       // 0x2640(0x0010)(Edit, BlueprintVisible, ZeroConstructor)
	bool                                          Should_Use_Aux_Elemental_Particles;                // 0x2650(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          UseHeadShotFX;                                     // 0x2651(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2652[0x6];                                     // 0x2652(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             Death_Dematerialize_Sound;                         // 0x2658(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             HeadShot_Sound;                                    // 0x2660(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             SleepingEnemyWakeStinger;                          // 0x2668(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StopDeathFX_Delay;                                 // 0x2670(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2674[0x4];                                     // 0x2674(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystem*                        DeathParticleSystem_Additive;                      // 0x2678(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DeathParticleSystem_Additive_On_;                  // 0x2680(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2681[0x7];                                     // 0x2681(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystemComponent*               Additive_Death_Effects;                            // 0x2688(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Death_Effects_ColorOvrride;                        // 0x2690(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DeathParticleSystem_Additive_Rate;                 // 0x26A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_EnemyPawn_Parent(int32 EntryPoint);
	void OnBuildingHitPlayEffects(float Damage, const struct FGameplayTagContainer& DamageTags, const struct FVector& Momentum, const struct FHitResult& HitInfo, const struct FGameplayEffectContextHandle& EffectContext, bool bPlayerPlaced);
	void DestroyBuildingHitEffect();
	void OnCheatUpdateSpecialEventGE(bool bShouldUseSpecialEventGE);
	void RestorePreviousMaterialDelay(float Delay_Amount);
	void RestorePreviousMaterialDelayCompleted();
	void OnEndSleepEffects();
	void DestroyAwakenEffect();
	void OnBeginSleepEffects();
	void AdditiveHitReactDelay();
	void OnDamagePlayEffects(float Damage, const struct FGameplayTagContainer& DamageTags, const struct FVector& Momentum, const struct FHitResult& HitInfo, class AFortPawn* InstigatedBy, class AActor* DamageCauser, const struct FGameplayEffectContextHandle& EffectContext);
	void PawnUniqueIDSet();
	void OnStartedEncounterSpawn();
	void OnFinishedEncounterSpawn();
	void DebugEnemySpawnIn();
	void DespawnEnemy(const struct FVector& RiftLocationWS);
	void PostSpawnIn();
	void SpawnInSafetyCheck();
	void FadeMiniBossLightOut();
	void ManualEnemySpawnIn(const struct FVector& RiftLocationWS);
	void ManualDespawnEnemy(const struct FVector& RiftLocationWS);
	void BeginDeathFX();
	void OnDeathPlayEffects(float Damage, const struct FGameplayTagContainer& DamageTags, const struct FVector& Momentum, const struct FHitResult& HitInfo, class AFortPawn* InstigatedBy, class AActor* DamageCauser, const struct FGameplayEffectContextHandle& EffectContext);
	void CE_StopDeathFX();
	void ReceiveBeginPlay();
	void OnEndDance();
	void OnBeginDance();
	void EnemySpawnInTL__Spawn__EventFunc();
	void EnemySpawnInTL__UpdateFunc();
	void EnemySpawnInTL__FinishedFunc();
	void Enemy_Spawn_Out_TL__UpdateFunc();
	void Enemy_Spawn_Out_TL__FinishedFunc();
	void FadeMiniBossLightOutTL__UpdateFunc();
	void FadeMiniBossLightOutTL__FinishedFunc();
	void UserConstructionScript();
	void EnemyDeathVisuals(bool* HQ);
	void StopDeathFX();
	void PickColorFromAnArrayOfColors(TArray<struct FLinearColor>& ArrayOfColors, struct FLinearColor* Color);
	void SetVectorParameterOnAllCharacterMIDs(class FName Parameter_Name, const struct FVector& Vector_Value, bool Propagate_to_Auxiliary_Meshes);
	void SetScalarParameterOnAllCharacterMIDs(class FName Parameter_Name, float Scalar_Value, bool AlsoModifyOriginalMIDs);
	void SetActiveElementalParticles(bool Active, bool Reset);
	void PlayAdditiveHitReacts(const struct FVector& Hit_Direction, class UAnimMontage* Anim_Montage);
	void OverrideMaterialAndCopyParametersOnCharacterElements(class UMaterialInterface* New_Material_To_Apply);
	void OverridePhysicalMaterialOnCharacterMesh(class UPhysicalMaterial* Physical_Material_Override);
	void SpawnParticleSystemOnCharacterMesh(class UParticleSystem* ParticleSystemTemplate, class UParticleSystemComponent* ParticleSystemComponentReferenceVar, class FName AttachPointName, const struct FVector& Location, const struct FRotator& Rotation, TArray<struct FParticleSysParam>& InstanceParameters, bool AutoActivate, bool AutoDestroy, bool AbsoluteLocation, bool AbsoluteRotation, bool AbsoluteScale, class UParticleSystemComponent** PSComponentReference);
	void CharacterSpawnInSafetyCheck();
	void RestorePreviousMaterialOnCharacterElements(float Delay_in_Seconds);
	void SpecialEventHalloweenPumpkinHeadHusk(bool ApplyPumpkinHeadMesh, bool DebugApplicationOrRemoval_);
	void CreateDuplicateCharacterElements(class UMaterialInterface* Material_to_Apply);
	void SetDuplicateCharacterMeshHiddenInGame(bool Hidden);
	void SetElementalParticlesHiddenInGame(bool Hidden);
	void TransformHitLocationWorldSpaceToPreskinnedLocalSpace(struct FVector* PreskinnedLS);
	void SetVectorParameterOnAllCharacterMIDsByMap(const TMap<class FName, struct FLinearColor>& Map, bool Propagate_to_Auxiliary_Meshes);
	void SetScalarParameterOnAllCharacterMIDsByMap(const TMap<class FName, float>& Map);
	void SpawnMinibossLight();
	void SetMinibossLightHiddenInGame(bool Hidden);
	void RestorePreviousPhysMaterialOnCharacterMesh(float Delay_in_Seconds);
	void DeleteDuplicateCharacterElements();
	void DynamicMaterialArraySetup(TArray<class UMaterialInterface*>& Array_to_Check, const TArray<class UMaterialInstanceDynamic*>& Array_to_Store, class UMaterialInterface* New_Material, class UPrimitiveComponent* Mesh_to_Assign_New_Material);
	void ApplyBuildingHitEffectToSkeletalMesh(class USkeletalMeshComponent* Mesh_0);
	void ApplyBuildingHitEffectToStaticMesh(class UStaticMeshComponent* Mesh_0);
	void RegisterEffectSkeletalMesh(class USkeletalMeshComponent* Mesh_0);
	void RegisterEffectStaticMesh(class UStaticMeshComponent* Mesh_0);
	void ApplyAwakenEffectToSkeletalMesh(class USkeletalMeshComponent* Mesh_0);
	void ApplyAwakenEffectToStaticMesh(class UStaticMeshComponent* Mesh_0);
	void DeregisterEffectStaticMesh(class UStaticMeshComponent* Mesh_0);
	void DeregisterEffectSkeletalMesh(class USkeletalMeshComponent* Mesh_0);
	void Orphaned(bool* IsOrphaned, class AFortPawn** AttachedPawn);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"EnemyPawn_Parent_C">();
	}
	static class AEnemyPawn_Parent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AEnemyPawn_Parent_C>();
	}
};
static_assert(alignof(AEnemyPawn_Parent_C) == 0x000010, "Wrong alignment on AEnemyPawn_Parent_C");
static_assert(sizeof(AEnemyPawn_Parent_C) == 0x0026B0, "Wrong size on AEnemyPawn_Parent_C");
static_assert(offsetof(AEnemyPawn_Parent_C, UberGraphFrame) == 0x0020B0, "Member 'AEnemyPawn_Parent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, WeaponCapsuleCollision) == 0x0020B8, "Member 'AEnemyPawn_Parent_C::WeaponCapsuleCollision' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, Elemental_Layer_Audio_Loop) == 0x0020C0, "Member 'AEnemyPawn_Parent_C::Elemental_Layer_Audio_Loop' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, FadeMiniBossLightOutTL_Fade_2CE2533F4858E8E5F1A8D39F9CE6D9F4) == 0x0020C8, "Member 'AEnemyPawn_Parent_C::FadeMiniBossLightOutTL_Fade_2CE2533F4858E8E5F1A8D39F9CE6D9F4' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, FadeMiniBossLightOutTL__Direction_2CE2533F4858E8E5F1A8D39F9CE6D9F4) == 0x0020CC, "Member 'AEnemyPawn_Parent_C::FadeMiniBossLightOutTL__Direction_2CE2533F4858E8E5F1A8D39F9CE6D9F4' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, FadeMiniBossLightOutTL) == 0x0020D0, "Member 'AEnemyPawn_Parent_C::FadeMiniBossLightOutTL' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, Enemy_Spawn_Out_TL_ColorFadeOutTrack_999FBE184F147A4FE3025AB553DBFA9C) == 0x0020D8, "Member 'AEnemyPawn_Parent_C::Enemy_Spawn_Out_TL_ColorFadeOutTrack_999FBE184F147A4FE3025AB553DBFA9C' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, Enemy_Spawn_Out_TL_FadeInTrack_999FBE184F147A4FE3025AB553DBFA9C) == 0x0020DC, "Member 'AEnemyPawn_Parent_C::Enemy_Spawn_Out_TL_FadeInTrack_999FBE184F147A4FE3025AB553DBFA9C' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, Enemy_Spawn_Out_TL__Direction_999FBE184F147A4FE3025AB553DBFA9C) == 0x0020E0, "Member 'AEnemyPawn_Parent_C::Enemy_Spawn_Out_TL__Direction_999FBE184F147A4FE3025AB553DBFA9C' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, Enemy_Spawn_Out_TL) == 0x0020E8, "Member 'AEnemyPawn_Parent_C::Enemy_Spawn_Out_TL' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, EnemySpawnInTL_MiniBossFadeLight_5C7376B04DFAE1465B97F1BB1B873D88) == 0x0020F0, "Member 'AEnemyPawn_Parent_C::EnemySpawnInTL_MiniBossFadeLight_5C7376B04DFAE1465B97F1BB1B873D88' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, EnemySpawnInTL_ColorFadeOutTrack_5C7376B04DFAE1465B97F1BB1B873D88) == 0x0020F4, "Member 'AEnemyPawn_Parent_C::EnemySpawnInTL_ColorFadeOutTrack_5C7376B04DFAE1465B97F1BB1B873D88' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, EnemySpawnInTL_FadeInTrack_5C7376B04DFAE1465B97F1BB1B873D88) == 0x0020F8, "Member 'AEnemyPawn_Parent_C::EnemySpawnInTL_FadeInTrack_5C7376B04DFAE1465B97F1BB1B873D88' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, EnemySpawnInTL__Direction_5C7376B04DFAE1465B97F1BB1B873D88) == 0x0020FC, "Member 'AEnemyPawn_Parent_C::EnemySpawnInTL__Direction_5C7376B04DFAE1465B97F1BB1B873D88' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, EnemySpawnInTL) == 0x002100, "Member 'AEnemyPawn_Parent_C::EnemySpawnInTL' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, Death_Effects) == 0x002108, "Member 'AEnemyPawn_Parent_C::Death_Effects' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, HQ_Death_Particle_System) == 0x002110, "Member 'AEnemyPawn_Parent_C::HQ_Death_Particle_System' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, DeathFX_SpawnRateScale) == 0x002118, "Member 'AEnemyPawn_Parent_C::DeathFX_SpawnRateScale' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, HQ_DeathFX_MaxDistance) == 0x00211C, "Member 'AEnemyPawn_Parent_C::HQ_DeathFX_MaxDistance' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, LQ_Death_Particle_System) == 0x002120, "Member 'AEnemyPawn_Parent_C::LQ_Death_Particle_System' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, LQ_DeathFX_CylinderHeight) == 0x002128, "Member 'AEnemyPawn_Parent_C::LQ_DeathFX_CylinderHeight' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, LQ_DeathFX_CylinderRadius) == 0x00212C, "Member 'AEnemyPawn_Parent_C::LQ_DeathFX_CylinderRadius' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, LQ_DeathFX_SpawnRateScale) == 0x002130, "Member 'AEnemyPawn_Parent_C::LQ_DeathFX_SpawnRateScale' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, LQ_PS_Socket_Attach) == 0x002134, "Member 'AEnemyPawn_Parent_C::LQ_PS_Socket_Attach' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, Death_Socket) == 0x00213C, "Member 'AEnemyPawn_Parent_C::Death_Socket' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, UsePOCScaleAndMaterials) == 0x002144, "Member 'AEnemyPawn_Parent_C::UsePOCScaleAndMaterials' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, POCShouldOverrideMaterial) == 0x002145, "Member 'AEnemyPawn_Parent_C::POCShouldOverrideMaterial' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, POCShouldOverrideMaterialValues) == 0x002146, "Member 'AEnemyPawn_Parent_C::POCShouldOverrideMaterialValues' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, POCOverrideMaterial) == 0x002148, "Member 'AEnemyPawn_Parent_C::POCOverrideMaterial' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, POCMaterialHairColor) == 0x002150, "Member 'AEnemyPawn_Parent_C::POCMaterialHairColor' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, POCMaterialSkinColor) == 0x002160, "Member 'AEnemyPawn_Parent_C::POCMaterialSkinColor' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, POCMaterialPantColor) == 0x002170, "Member 'AEnemyPawn_Parent_C::POCMaterialPantColor' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, POCMaterialShirtColor) == 0x002180, "Member 'AEnemyPawn_Parent_C::POCMaterialShirtColor' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, RandomStream) == 0x002190, "Member 'AEnemyPawn_Parent_C::RandomStream' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, PseudoRandomNetworkedFloat) == 0x002198, "Member 'AEnemyPawn_Parent_C::PseudoRandomNetworkedFloat' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, UseRandomColorVariation) == 0x00219C, "Member 'AEnemyPawn_Parent_C::UseRandomColorVariation' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, MaleHuskHairColors) == 0x0021A0, "Member 'AEnemyPawn_Parent_C::MaleHuskHairColors' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, MaleHuskSkinColors) == 0x0021B0, "Member 'AEnemyPawn_Parent_C::MaleHuskSkinColors' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, MaleHuskPantColors) == 0x0021C0, "Member 'AEnemyPawn_Parent_C::MaleHuskPantColors' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, MaleHuskShirtColors) == 0x0021D0, "Member 'AEnemyPawn_Parent_C::MaleHuskShirtColors' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, HieghtDistributionCurve) == 0x0021E0, "Member 'AEnemyPawn_Parent_C::HieghtDistributionCurve' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, RandomizeMeshScale) == 0x0021E8, "Member 'AEnemyPawn_Parent_C::RandomizeMeshScale' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, SpawnParticlesTransform) == 0x0021F0, "Member 'AEnemyPawn_Parent_C::SpawnParticlesTransform' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, Pumpkin_Head_MID) == 0x002220, "Member 'AEnemyPawn_Parent_C::Pumpkin_Head_MID' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, SpawnParticles) == 0x002228, "Member 'AEnemyPawn_Parent_C::SpawnParticles' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, CharacterElementalParticles) == 0x002230, "Member 'AEnemyPawn_Parent_C::CharacterElementalParticles' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, AllowHeadshot) == 0x002238, "Member 'AEnemyPawn_Parent_C::AllowHeadshot' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, TC_RangedWeapon) == 0x002240, "Member 'AEnemyPawn_Parent_C::TC_RangedWeapon' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, HeadshotParticleSystemComp) == 0x002260, "Member 'AEnemyPawn_Parent_C::HeadshotParticleSystemComp' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, Additive_Hit_React_Montage) == 0x002268, "Member 'AEnemyPawn_Parent_C::Additive_Hit_React_Montage' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, Death_Normal_Sound) == 0x002270, "Member 'AEnemyPawn_Parent_C::Death_Normal_Sound' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, Elemental_Audio_Layer_Sound) == 0x002278, "Member 'AEnemyPawn_Parent_C::Elemental_Audio_Layer_Sound' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, SpecialEventHalloweenPumpkinHead) == 0x002280, "Member 'AEnemyPawn_Parent_C::SpecialEventHalloweenPumpkinHead' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, TC_NPCCharacterTypeHuskBasic) == 0x002288, "Member 'AEnemyPawn_Parent_C::TC_NPCCharacterTypeHuskBasic' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, TC_SpecialEventHalloweenPumpkinHead) == 0x0022A8, "Member 'AEnemyPawn_Parent_C::TC_SpecialEventHalloweenPumpkinHead' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, PumpkinHeadPercentage) == 0x0022C8, "Member 'AEnemyPawn_Parent_C::PumpkinHeadPercentage' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, GE_SpecialEvent_Halloween_PumpkinHead) == 0x0022D0, "Member 'AEnemyPawn_Parent_C::GE_SpecialEvent_Halloween_PumpkinHead' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, PumpkinHeadRotation) == 0x0022D8, "Member 'AEnemyPawn_Parent_C::PumpkinHeadRotation' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, PumpkinHeadScale) == 0x0022E4, "Member 'AEnemyPawn_Parent_C::PumpkinHeadScale' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, PumpkinHeadOffset) == 0x0022F0, "Member 'AEnemyPawn_Parent_C::PumpkinHeadOffset' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, Headshot_FX_Socket) == 0x0022FC, "Member 'AEnemyPawn_Parent_C::Headshot_FX_Socket' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, SleepParticleSystemComp) == 0x002308, "Member 'AEnemyPawn_Parent_C::SleepParticleSystemComp' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, Husk_Sleeping_Sound) == 0x002310, "Member 'AEnemyPawn_Parent_C::Husk_Sleeping_Sound' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, HuskSleepSound) == 0x002318, "Member 'AEnemyPawn_Parent_C::HuskSleepSound' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, WakeUpParticleSystemComp) == 0x002320, "Member 'AEnemyPawn_Parent_C::WakeUpParticleSystemComp' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, Sleeping) == 0x002328, "Member 'AEnemyPawn_Parent_C::Sleeping' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, AwakenFXSkeletalMeshes) == 0x002330, "Member 'AEnemyPawn_Parent_C::AwakenFXSkeletalMeshes' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, AwakenFXStaticMeshes) == 0x002380, "Member 'AEnemyPawn_Parent_C::AwakenFXStaticMeshes' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, AwokenMaxDistance) == 0x0023D0, "Member 'AEnemyPawn_Parent_C::AwokenMaxDistance' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, AwakenDuration) == 0x0023D4, "Member 'AEnemyPawn_Parent_C::AwakenDuration' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, DestroyAwakenFXTimer) == 0x0023D8, "Member 'AEnemyPawn_Parent_C::DestroyAwakenFXTimer' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, BuildingHitFXSkeletalMeshes) == 0x0023E0, "Member 'AEnemyPawn_Parent_C::BuildingHitFXSkeletalMeshes' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, BuildingHitFXStaticMeshes) == 0x002430, "Member 'AEnemyPawn_Parent_C::BuildingHitFXStaticMeshes' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, BuildingHitDuration) == 0x002480, "Member 'AEnemyPawn_Parent_C::BuildingHitDuration' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, DestroyBuildingHitFXTimer) == 0x002488, "Member 'AEnemyPawn_Parent_C::DestroyBuildingHitFXTimer' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, TempFXSkeletalMesh) == 0x002490, "Member 'AEnemyPawn_Parent_C::TempFXSkeletalMesh' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, RegisteredSkeletalMeshesForEffects) == 0x002498, "Member 'AEnemyPawn_Parent_C::RegisteredSkeletalMeshesForEffects' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, RegisteredStaticMeshesForEffects) == 0x0024A8, "Member 'AEnemyPawn_Parent_C::RegisteredStaticMeshesForEffects' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, HasGlowColorsAssigned) == 0x0024B8, "Member 'AEnemyPawn_Parent_C::HasGlowColorsAssigned' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, SpawnInTimelineCompletedSuccessfully) == 0x0024B9, "Member 'AEnemyPawn_Parent_C::SpawnInTimelineCompletedSuccessfully' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, CharacterSpawnInSafetyCheckHandle) == 0x0024C0, "Member 'AEnemyPawn_Parent_C::CharacterSpawnInSafetyCheckHandle' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, Previous_MID) == 0x0024C8, "Member 'AEnemyPawn_Parent_C::Previous_MID' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, FrozenHuskMeshScale) == 0x0024D8, "Member 'AEnemyPawn_Parent_C::FrozenHuskMeshScale' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, SpawnFrozenHuskMesh) == 0x0024E4, "Member 'AEnemyPawn_Parent_C::SpawnFrozenHuskMesh' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, CharacterAmbientParticlesTemplate) == 0x0024E8, "Member 'AEnemyPawn_Parent_C::CharacterAmbientParticlesTemplate' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, CharacterAmbientParticles) == 0x0024F0, "Member 'AEnemyPawn_Parent_C::CharacterAmbientParticles' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, DuplicateCharacterMesh) == 0x0024F8, "Member 'AEnemyPawn_Parent_C::DuplicateCharacterMesh' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, DuplicateCharacterMID) == 0x002500, "Member 'AEnemyPawn_Parent_C::DuplicateCharacterMID' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, BoneRefPosePosition) == 0x002508, "Member 'AEnemyPawn_Parent_C::BoneRefPosePosition' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, MiniBossSizeScale) == 0x002514, "Member 'AEnemyPawn_Parent_C::MiniBossSizeScale' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, MiniBossLight) == 0x002520, "Member 'AEnemyPawn_Parent_C::MiniBossLight' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, MinibossPSComponent) == 0x002528, "Member 'AEnemyPawn_Parent_C::MinibossPSComponent' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, MiniBossLightIntensity) == 0x002530, "Member 'AEnemyPawn_Parent_C::MiniBossLightIntensity' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, CharacterParticlesMaxDrawDistance) == 0x002534, "Member 'AEnemyPawn_Parent_C::CharacterParticlesMaxDrawDistance' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, Slow_Shackle_Scale) == 0x002538, "Member 'AEnemyPawn_Parent_C::Slow_Shackle_Scale' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, Original_Phys_Material) == 0x002540, "Member 'AEnemyPawn_Parent_C::Original_Phys_Material' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, Elemental_FXs) == 0x002550, "Member 'AEnemyPawn_Parent_C::Elemental_FXs' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, IsMiniBoss) == 0x002560, "Member 'AEnemyPawn_Parent_C::IsMiniBoss' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, SizeScale_FireElemental) == 0x002564, "Member 'AEnemyPawn_Parent_C::SizeScale_FireElemental' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, SizeScale_FireElemental_Head) == 0x002570, "Member 'AEnemyPawn_Parent_C::SizeScale_FireElemental_Head' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, DeathFX_MID_Index0) == 0x002580, "Member 'AEnemyPawn_Parent_C::DeathFX_MID_Index0' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, Death_FX_MID_Index_1) == 0x002588, "Member 'AEnemyPawn_Parent_C::Death_FX_MID_Index_1' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, DeathFX_Use_Strands) == 0x002590, "Member 'AEnemyPawn_Parent_C::DeathFX_Use_Strands' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, DeathFX_EmissiveHot) == 0x002594, "Member 'AEnemyPawn_Parent_C::DeathFX_EmissiveHot' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, Death_FX_Emissive_Soft_Color) == 0x0025A4, "Member 'AEnemyPawn_Parent_C::Death_FX_Emissive_Soft_Color' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, DeathFX_Change_Emissive) == 0x0025B4, "Member 'AEnemyPawn_Parent_C::DeathFX_Change_Emissive' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, DeathFX_Customize_Visuals) == 0x0025B5, "Member 'AEnemyPawn_Parent_C::DeathFX_Customize_Visuals' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, Ice_HandL) == 0x0025B8, "Member 'AEnemyPawn_Parent_C::Ice_HandL' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, Ice_HandR) == 0x0025C8, "Member 'AEnemyPawn_Parent_C::Ice_HandR' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, Ice_HandL_Name) == 0x0025D8, "Member 'AEnemyPawn_Parent_C::Ice_HandL_Name' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, Ice_HandR_Name) == 0x0025E0, "Member 'AEnemyPawn_Parent_C::Ice_HandR_Name' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, Ice_SpawnRateScale) == 0x0025E8, "Member 'AEnemyPawn_Parent_C::Ice_SpawnRateScale' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, Lightning_ElecFresExp) == 0x0025EC, "Member 'AEnemyPawn_Parent_C::Lightning_ElecFresExp' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, Lightning_SizeScale) == 0x0025F0, "Member 'AEnemyPawn_Parent_C::Lightning_SizeScale' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, Lightning_WPOScale) == 0x0025FC, "Member 'AEnemyPawn_Parent_C::Lightning_WPOScale' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, Lightning_WPOBias) == 0x002608, "Member 'AEnemyPawn_Parent_C::Lightning_WPOBias' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, Lightning_SpawnScaleRate) == 0x002614, "Member 'AEnemyPawn_Parent_C::Lightning_SpawnScaleRate' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, Previous_MID_AuxObjs) == 0x002618, "Member 'AEnemyPawn_Parent_C::Previous_MID_AuxObjs' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, Auxillary_Objects) == 0x002628, "Member 'AEnemyPawn_Parent_C::Auxillary_Objects' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, Restoring_Array_Index) == 0x002638, "Member 'AEnemyPawn_Parent_C::Restoring_Array_Index' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, Duplicate_Auxillary_Objects) == 0x002640, "Member 'AEnemyPawn_Parent_C::Duplicate_Auxillary_Objects' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, Should_Use_Aux_Elemental_Particles) == 0x002650, "Member 'AEnemyPawn_Parent_C::Should_Use_Aux_Elemental_Particles' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, UseHeadShotFX) == 0x002651, "Member 'AEnemyPawn_Parent_C::UseHeadShotFX' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, Death_Dematerialize_Sound) == 0x002658, "Member 'AEnemyPawn_Parent_C::Death_Dematerialize_Sound' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, HeadShot_Sound) == 0x002660, "Member 'AEnemyPawn_Parent_C::HeadShot_Sound' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, SleepingEnemyWakeStinger) == 0x002668, "Member 'AEnemyPawn_Parent_C::SleepingEnemyWakeStinger' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, StopDeathFX_Delay) == 0x002670, "Member 'AEnemyPawn_Parent_C::StopDeathFX_Delay' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, DeathParticleSystem_Additive) == 0x002678, "Member 'AEnemyPawn_Parent_C::DeathParticleSystem_Additive' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, DeathParticleSystem_Additive_On_) == 0x002680, "Member 'AEnemyPawn_Parent_C::DeathParticleSystem_Additive_On_' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, Additive_Death_Effects) == 0x002688, "Member 'AEnemyPawn_Parent_C::Additive_Death_Effects' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, Death_Effects_ColorOvrride) == 0x002690, "Member 'AEnemyPawn_Parent_C::Death_Effects_ColorOvrride' has a wrong offset!");
static_assert(offsetof(AEnemyPawn_Parent_C, DeathParticleSystem_Additive_Rate) == 0x0026A0, "Member 'AEnemyPawn_Parent_C::DeathParticleSystem_Additive_Rate' has a wrong offset!");

}

