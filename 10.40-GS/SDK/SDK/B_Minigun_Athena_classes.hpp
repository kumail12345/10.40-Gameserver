#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_Minigun_Athena

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "B_Ranged_Generic_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass B_Minigun_Athena.B_Minigun_Athena_C
// 0x0080 (0x0F28 - 0x0EA8)
class AB_Minigun_Athena_C final : public AB_Ranged_Generic_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_B_Minigun_Athena_C;                 // 0x0EA8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UAudioComponent*                        OnOverheatSound;                                   // 0x0EB0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        OverheatLoopSound;                                 // 0x0EB8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               OverheatedFX;                                      // 0x0EC0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   BarrelGlowFX;                                      // 0x0EC8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        SpinUpSound;                                       // 0x0ED0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        SpinDownSound;                                     // 0x0ED8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               P_MinigunChargeUp;                                 // 0x0EE0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         SpinAudioVolumeTimeline_Volume_18EF57D9444836E65E22B6A5DFE3BF4A; // 0x0EE8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            SpinAudioVolumeTimeline__Direction_18EF57D9444836E65E22B6A5DFE3BF4A; // 0x0EEC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_EED[0x3];                                      // 0x0EED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     SpinAudioVolumeTimeline;                           // 0x0EF0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               MuzzleGlowMID;                                     // 0x0EF8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        CurrentSpinAudioComponent;                         // 0x0F00(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentAmmo;                                       // 0x0F08(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bPlayedSpinUpAudio;                                // 0x0F0C(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bPlayedSpinDownAudio;                              // 0x0F0D(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_F0E[0x2];                                      // 0x0F0E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SpinVolumeMultiplier;                              // 0x0F10(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F14[0x4];                                      // 0x0F14(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           GlowTimer;                                         // 0x0F18(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         OverheatSmoothed;                                  // 0x0F20(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_B_Minigun_Athena(int32 EntryPoint);
	void K2_OnUnEquip();
	void BarrelOverheatFXandSound();
	void OnStartOverheated();
	void OnWeaponAttached();
	void Start_Spin_Down_Audio();
	void Start_Spin_Up_Audio();
	void OnAmmoCountChanged();
	void OnInitCosmeticAlterations(const struct FFortCosmeticModification& CosmeticMod);
	void OnChargeDown();
	void OnChargeUp();
	void OnPlayWeaponFireFX(bool bPersistentFire, bool bSecondaryFire);
	void SpinAudioVolumeTimeline__UpdateFunc();
	void SpinAudioVolumeTimeline__FinishedFunc();
	void UserConstructionScript();
	float CurrentScalarValue();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"B_Minigun_Athena_C">();
	}
	static class AB_Minigun_Athena_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AB_Minigun_Athena_C>();
	}
};
static_assert(alignof(AB_Minigun_Athena_C) == 0x000008, "Wrong alignment on AB_Minigun_Athena_C");
static_assert(sizeof(AB_Minigun_Athena_C) == 0x000F28, "Wrong size on AB_Minigun_Athena_C");
static_assert(offsetof(AB_Minigun_Athena_C, UberGraphFrame_B_Minigun_Athena_C) == 0x000EA8, "Member 'AB_Minigun_Athena_C::UberGraphFrame_B_Minigun_Athena_C' has a wrong offset!");
static_assert(offsetof(AB_Minigun_Athena_C, OnOverheatSound) == 0x000EB0, "Member 'AB_Minigun_Athena_C::OnOverheatSound' has a wrong offset!");
static_assert(offsetof(AB_Minigun_Athena_C, OverheatLoopSound) == 0x000EB8, "Member 'AB_Minigun_Athena_C::OverheatLoopSound' has a wrong offset!");
static_assert(offsetof(AB_Minigun_Athena_C, OverheatedFX) == 0x000EC0, "Member 'AB_Minigun_Athena_C::OverheatedFX' has a wrong offset!");
static_assert(offsetof(AB_Minigun_Athena_C, BarrelGlowFX) == 0x000EC8, "Member 'AB_Minigun_Athena_C::BarrelGlowFX' has a wrong offset!");
static_assert(offsetof(AB_Minigun_Athena_C, SpinUpSound) == 0x000ED0, "Member 'AB_Minigun_Athena_C::SpinUpSound' has a wrong offset!");
static_assert(offsetof(AB_Minigun_Athena_C, SpinDownSound) == 0x000ED8, "Member 'AB_Minigun_Athena_C::SpinDownSound' has a wrong offset!");
static_assert(offsetof(AB_Minigun_Athena_C, P_MinigunChargeUp) == 0x000EE0, "Member 'AB_Minigun_Athena_C::P_MinigunChargeUp' has a wrong offset!");
static_assert(offsetof(AB_Minigun_Athena_C, SpinAudioVolumeTimeline_Volume_18EF57D9444836E65E22B6A5DFE3BF4A) == 0x000EE8, "Member 'AB_Minigun_Athena_C::SpinAudioVolumeTimeline_Volume_18EF57D9444836E65E22B6A5DFE3BF4A' has a wrong offset!");
static_assert(offsetof(AB_Minigun_Athena_C, SpinAudioVolumeTimeline__Direction_18EF57D9444836E65E22B6A5DFE3BF4A) == 0x000EEC, "Member 'AB_Minigun_Athena_C::SpinAudioVolumeTimeline__Direction_18EF57D9444836E65E22B6A5DFE3BF4A' has a wrong offset!");
static_assert(offsetof(AB_Minigun_Athena_C, SpinAudioVolumeTimeline) == 0x000EF0, "Member 'AB_Minigun_Athena_C::SpinAudioVolumeTimeline' has a wrong offset!");
static_assert(offsetof(AB_Minigun_Athena_C, MuzzleGlowMID) == 0x000EF8, "Member 'AB_Minigun_Athena_C::MuzzleGlowMID' has a wrong offset!");
static_assert(offsetof(AB_Minigun_Athena_C, CurrentSpinAudioComponent) == 0x000F00, "Member 'AB_Minigun_Athena_C::CurrentSpinAudioComponent' has a wrong offset!");
static_assert(offsetof(AB_Minigun_Athena_C, CurrentAmmo) == 0x000F08, "Member 'AB_Minigun_Athena_C::CurrentAmmo' has a wrong offset!");
static_assert(offsetof(AB_Minigun_Athena_C, bPlayedSpinUpAudio) == 0x000F0C, "Member 'AB_Minigun_Athena_C::bPlayedSpinUpAudio' has a wrong offset!");
static_assert(offsetof(AB_Minigun_Athena_C, bPlayedSpinDownAudio) == 0x000F0D, "Member 'AB_Minigun_Athena_C::bPlayedSpinDownAudio' has a wrong offset!");
static_assert(offsetof(AB_Minigun_Athena_C, SpinVolumeMultiplier) == 0x000F10, "Member 'AB_Minigun_Athena_C::SpinVolumeMultiplier' has a wrong offset!");
static_assert(offsetof(AB_Minigun_Athena_C, GlowTimer) == 0x000F18, "Member 'AB_Minigun_Athena_C::GlowTimer' has a wrong offset!");
static_assert(offsetof(AB_Minigun_Athena_C, OverheatSmoothed) == 0x000F20, "Member 'AB_Minigun_Athena_C::OverheatSmoothed' has a wrong offset!");

}

