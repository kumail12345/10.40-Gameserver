#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ChallengeTile_Style

#include "Basic.hpp"

#include "FortniteGame_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK::Params
{

// Function ChallengeTile_Style.ChallengeTile_Style_C.SetDynamicColors
// 0x00B0 (0x00B0 - 0x0000)
struct ChallengeTile_Style_C_SetDynamicColors final
{
public:
	class UImage*                                 StyleDynamicMaterialTarget;                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFortChallengeSetStyle                 FortChallengeSetStyle;                             // 0x0008(0x00A0)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ChallengeTile_Style_C_SetDynamicColors) == 0x000008, "Wrong alignment on ChallengeTile_Style_C_SetDynamicColors");
static_assert(sizeof(ChallengeTile_Style_C_SetDynamicColors) == 0x0000B0, "Wrong size on ChallengeTile_Style_C_SetDynamicColors");
static_assert(offsetof(ChallengeTile_Style_C_SetDynamicColors, StyleDynamicMaterialTarget) == 0x000000, "Member 'ChallengeTile_Style_C_SetDynamicColors::StyleDynamicMaterialTarget' has a wrong offset!");
static_assert(offsetof(ChallengeTile_Style_C_SetDynamicColors, FortChallengeSetStyle) == 0x000008, "Member 'ChallengeTile_Style_C_SetDynamicColors::FortChallengeSetStyle' has a wrong offset!");
static_assert(offsetof(ChallengeTile_Style_C_SetDynamicColors, CallFunc_GetDynamicMaterial_ReturnValue) == 0x0000A8, "Member 'ChallengeTile_Style_C_SetDynamicColors::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");

// Function ChallengeTile_Style.ChallengeTile_Style_C.OnChallengeSetEstablished
// 0x00A8 (0x00A8 - 0x0000)
struct ChallengeTile_Style_C_OnChallengeSetEstablished final
{
public:
	struct FFortChallengeSetStyle                 DisplayStyle;                                      // 0x0000(0x00A0)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          bIsComplete;                                       // 0x00A0(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bIsLocked;                                         // 0x00A1(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ChallengeTile_Style_C_OnChallengeSetEstablished) == 0x000008, "Wrong alignment on ChallengeTile_Style_C_OnChallengeSetEstablished");
static_assert(sizeof(ChallengeTile_Style_C_OnChallengeSetEstablished) == 0x0000A8, "Wrong size on ChallengeTile_Style_C_OnChallengeSetEstablished");
static_assert(offsetof(ChallengeTile_Style_C_OnChallengeSetEstablished, DisplayStyle) == 0x000000, "Member 'ChallengeTile_Style_C_OnChallengeSetEstablished::DisplayStyle' has a wrong offset!");
static_assert(offsetof(ChallengeTile_Style_C_OnChallengeSetEstablished, bIsComplete) == 0x0000A0, "Member 'ChallengeTile_Style_C_OnChallengeSetEstablished::bIsComplete' has a wrong offset!");
static_assert(offsetof(ChallengeTile_Style_C_OnChallengeSetEstablished, bIsLocked) == 0x0000A1, "Member 'ChallengeTile_Style_C_OnChallengeSetEstablished::bIsLocked' has a wrong offset!");

// Function ChallengeTile_Style.ChallengeTile_Style_C.ExecuteUbergraph_ChallengeTile_Style
// 0x00C0 (0x00C0 - 0x0000)
struct ChallengeTile_Style_C_ExecuteUbergraph_ChallengeTile_Style final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7[0x1];                                        // 0x0007(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationReverse_ReturnValue;         // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationForward_ReturnValue;         // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFortChallengeSetStyle                 K2Node_Event_DisplayStyle;                         // 0x0018(0x00A0)(ConstParm)
	bool                                          K2Node_Event_bIsComplete;                          // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bIsLocked;                            // 0x00B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x00BA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ChallengeTile_Style_C_ExecuteUbergraph_ChallengeTile_Style) == 0x000008, "Wrong alignment on ChallengeTile_Style_C_ExecuteUbergraph_ChallengeTile_Style");
static_assert(sizeof(ChallengeTile_Style_C_ExecuteUbergraph_ChallengeTile_Style) == 0x0000C0, "Wrong size on ChallengeTile_Style_C_ExecuteUbergraph_ChallengeTile_Style");
static_assert(offsetof(ChallengeTile_Style_C_ExecuteUbergraph_ChallengeTile_Style, EntryPoint) == 0x000000, "Member 'ChallengeTile_Style_C_ExecuteUbergraph_ChallengeTile_Style::EntryPoint' has a wrong offset!");
static_assert(offsetof(ChallengeTile_Style_C_ExecuteUbergraph_ChallengeTile_Style, Temp_bool_Variable) == 0x000004, "Member 'ChallengeTile_Style_C_ExecuteUbergraph_ChallengeTile_Style::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ChallengeTile_Style_C_ExecuteUbergraph_ChallengeTile_Style, Temp_byte_Variable) == 0x000005, "Member 'ChallengeTile_Style_C_ExecuteUbergraph_ChallengeTile_Style::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(ChallengeTile_Style_C_ExecuteUbergraph_ChallengeTile_Style, Temp_byte_Variable_1) == 0x000006, "Member 'ChallengeTile_Style_C_ExecuteUbergraph_ChallengeTile_Style::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(ChallengeTile_Style_C_ExecuteUbergraph_ChallengeTile_Style, CallFunc_PlayAnimationReverse_ReturnValue) == 0x000008, "Member 'ChallengeTile_Style_C_ExecuteUbergraph_ChallengeTile_Style::CallFunc_PlayAnimationReverse_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChallengeTile_Style_C_ExecuteUbergraph_ChallengeTile_Style, CallFunc_PlayAnimationForward_ReturnValue) == 0x000010, "Member 'ChallengeTile_Style_C_ExecuteUbergraph_ChallengeTile_Style::CallFunc_PlayAnimationForward_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChallengeTile_Style_C_ExecuteUbergraph_ChallengeTile_Style, K2Node_Event_DisplayStyle) == 0x000018, "Member 'ChallengeTile_Style_C_ExecuteUbergraph_ChallengeTile_Style::K2Node_Event_DisplayStyle' has a wrong offset!");
static_assert(offsetof(ChallengeTile_Style_C_ExecuteUbergraph_ChallengeTile_Style, K2Node_Event_bIsComplete) == 0x0000B8, "Member 'ChallengeTile_Style_C_ExecuteUbergraph_ChallengeTile_Style::K2Node_Event_bIsComplete' has a wrong offset!");
static_assert(offsetof(ChallengeTile_Style_C_ExecuteUbergraph_ChallengeTile_Style, K2Node_Event_bIsLocked) == 0x0000B9, "Member 'ChallengeTile_Style_C_ExecuteUbergraph_ChallengeTile_Style::K2Node_Event_bIsLocked' has a wrong offset!");
static_assert(offsetof(ChallengeTile_Style_C_ExecuteUbergraph_ChallengeTile_Style, K2Node_Select_Default) == 0x0000BA, "Member 'ChallengeTile_Style_C_ExecuteUbergraph_ChallengeTile_Style::K2Node_Select_Default' has a wrong offset!");

}

