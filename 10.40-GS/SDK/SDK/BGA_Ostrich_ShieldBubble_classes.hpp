#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BGA_Ostrich_ShieldBubble

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "FortniteGame_classes.hpp"
#include "GameplayAbilities_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BGA_Ostrich_ShieldBubble.BGA_Ostrich_ShieldBubble_C
// 0x02E0 (0x0A48 - 0x0768)
class ABGA_Ostrich_ShieldBubble_C final : public ABuildingGameplayActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0768(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UParticleSystemComponent*               P_Ostrich_ShieldReturning;                         // 0x0770(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               P_Ostrich_OverShield;                              // 0x0778(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_Ostrich_Shield_Overshield_Edge_Electrical;      // 0x0780(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_Ostrich_Shield_Overshield_Top_Electrical;       // 0x0788(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    SpotLight;                                         // 0x0790(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   GunnerShield;                                      // 0x0798(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x07A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         OverchargeShieldPulse_PulseAudioVolumeCurve_F6C87835413127D3B81D1F89C6D6E022; // 0x07A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OverchargeShieldPulse_PulseAudioPitchCurve_F6C87835413127D3B81D1F89C6D6E022; // 0x07AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OverchargeShieldPulse_PulseParam_F6C87835413127D3B81D1F89C6D6E022; // 0x07B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            OverchargeShieldPulse__Direction_F6C87835413127D3B81D1F89C6D6E022; // 0x07B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7B5[0x3];                                      // 0x07B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     OverchargeShieldPulse;                             // 0x07B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ScaleUpShield_NewTrack_0_94D6868842647E5976C1079A35136CF3; // 0x07C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            ScaleUpShield__Direction_94D6868842647E5976C1079A35136CF3; // 0x07C4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7C5[0x3];                                      // 0x07C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     ScaleUpShield;                                     // 0x07C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HitShieldVisuals_NewTrack_0_DBE4EE98469DC84F03C5499F0EE182F2; // 0x07D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            HitShieldVisuals__Direction_DBE4EE98469DC84F03C5499F0EE182F2; // 0x07D4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7D5[0x3];                                      // 0x07D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     HitShieldVisuals;                                  // 0x07D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxShield;                                         // 0x07E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurrentShield;                                     // 0x07E4(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	float                                         RespawnShieldDelay;                                // 0x07E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShieldDestroyed;                                   // 0x07EC(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	bool                                          ShieldActive;                                      // 0x07ED(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	uint8                                         Pad_7EE[0x2];                                      // 0x07EE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         RespawnShieldDelayRow;                             // 0x07F0(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         MaxShieldRow;                                      // 0x0810(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          RegenShield;                                       // 0x0830(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_831[0x3];                                      // 0x0831(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OnDamageRegenDelay;                                // 0x0834(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           RegenTimer;                                        // 0x0838(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         RegenTickFrequency;                                // 0x0840(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RegenHealPerTick;                                  // 0x0844(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FScalableFloat                         RegenHealPerTickRow;                               // 0x0848(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         RegenTickFrequencyRow;                             // 0x0868(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         OnDamageRegenDelayRow;                             // 0x0888(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          IsOvercharged;                                     // 0x08A8(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	uint8                                         Pad_8A9[0x3];                                      // 0x08A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OverchargeDamageImmune;                            // 0x08AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FScalableFloat                         OverchargeDamageImmuneRow;                         // 0x08B0(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         OverchargeHealthIfNotImmune;                       // 0x08D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8D4[0x4];                                      // 0x08D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         OverchargeHealthIfNotImmuneRow;                    // 0x08D8(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         OverchargeDuration;                                // 0x08F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8FC[0x4];                                      // 0x08FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         OverchargeDurationRow;                             // 0x0900(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          OverchargeFailed;                                  // 0x0920(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_921[0x7];                                      // 0x0921(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           ResetShieldTimer;                                  // 0x0928(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         ShouldRespawnFullHealth;                           // 0x0930(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_934[0x4];                                      // 0x0934(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         ShouldRespawnFullHealthRow;                        // 0x0938(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	class ATestMechVehicle_C*                     mech;                                              // 0x0958(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CanOvercharge;                                     // 0x0960(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_961[0x3];                                      // 0x0961(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OverchargeCooldown;                                // 0x0964(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FScalableFloat                         OverchargeCooldownRow;                             // 0x0968(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          ForceCancelOvercharge;                             // 0x0988(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	uint8                                         Pad_989[0x7];                                      // 0x0989(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           OverchargeDurationTimer;                           // 0x0990(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           OverchargeCooldownTimer;                           // 0x0998(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             ShieldBreakSound;                                  // 0x09A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             ShieldPowerupSound;                                // 0x09A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             ShieldImpactSound;                                 // 0x09B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  MechGunner;                                        // 0x09B8(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UForceFeedbackEffect*                   OverchargeActivateForceFeedback;                   // 0x09C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UForceFeedbackEffect*                   ShieldDeactivateForceFeedback;                     // 0x09C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UForceFeedbackEffect*                   ShieldActivateForceFeedback;                       // 0x09D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             OverchargeShieldPulseSound;                        // 0x09D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NormalizedDamage;                                  // 0x09E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9E4[0x4];                                      // 0x09E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAudioComponent*                        OverchargeAudioLoop;                               // 0x09E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             OverchargeSound;                                   // 0x09F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             OverchargeLoopSound;                               // 0x09F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        ShieldBrokenLoopAudio;                             // 0x0A00(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             ShieldPowerupRechargeSound;                        // 0x0A08(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             ShieldBrokenLoopSound;                             // 0x0A10(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        PowerUpShieldAudio;                                // 0x0A18(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        OverchargeAudio;                                   // 0x0A20(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        PowerUpRechargeAudio;                              // 0x0A28(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        OverchargeShieldPulseAudio;                        // 0x0A30(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          EndSounds;                                         // 0x0A38(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	uint8                                         Pad_A39[0x7];                                      // 0x0A39(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           OverchargePulseDelay;                              // 0x0A40(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BGA_Ostrich_ShieldBubble(int32 EntryPoint);
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void OvershieldBeginExpirePulse();
	void ResetOverCharge();
	void BeginRegen();
	void ResetIsOvercharged();
	void EndOverchargeShield();
	void BeginOverchargeShield();
	void Regen();
	void ShieldPowerDown();
	void ShieldBootUp();
	void ResetShieldBool();
	void ShieldDestroy();
	void BubbleFlash(bool Play_Sound);
	void OnDamageServer(float Damage, const struct FGameplayTagContainer& DamageTags, const struct FVector& Momentum, const struct FHitResult& HitInfo, class AController* InstigatedBy, class AActor* DamageCauser, const struct FGameplayEffectContextHandle& EffectContext);
	void ReactivateShield();
	void OverchargeShieldPulse__PulseEvent__EventFunc();
	void OverchargeShieldPulse__UpdateFunc();
	void OverchargeShieldPulse__FinishedFunc();
	void HitShieldVisuals__UpdateFunc();
	void HitShieldVisuals__FinishedFunc();
	void ScaleUpShield__UpdateFunc();
	void ScaleUpShield__FinishedFunc();
	void UserConstructionScript();
	void OnRep_CurrentShield();
	void OnRep_ShieldDestroyed();
	void OnRep_ShieldActive();
	void OnRep_RegenShield();
	void OnRep_IsOvercharged();
	void OnRep_ForceCancelOvercharge();
	void IsShieldActive(bool* Return);
	void SetOverchargeAudioEnabled(bool Enabled);
	void OnRep_EndSounds();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BGA_Ostrich_ShieldBubble_C">();
	}
	static class ABGA_Ostrich_ShieldBubble_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABGA_Ostrich_ShieldBubble_C>();
	}
};
static_assert(alignof(ABGA_Ostrich_ShieldBubble_C) == 0x000008, "Wrong alignment on ABGA_Ostrich_ShieldBubble_C");
static_assert(sizeof(ABGA_Ostrich_ShieldBubble_C) == 0x000A48, "Wrong size on ABGA_Ostrich_ShieldBubble_C");
static_assert(offsetof(ABGA_Ostrich_ShieldBubble_C, UberGraphFrame) == 0x000768, "Member 'ABGA_Ostrich_ShieldBubble_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABGA_Ostrich_ShieldBubble_C, P_Ostrich_ShieldReturning) == 0x000770, "Member 'ABGA_Ostrich_ShieldBubble_C::P_Ostrich_ShieldReturning' has a wrong offset!");
static_assert(offsetof(ABGA_Ostrich_ShieldBubble_C, P_Ostrich_OverShield) == 0x000778, "Member 'ABGA_Ostrich_ShieldBubble_C::P_Ostrich_OverShield' has a wrong offset!");
static_assert(offsetof(ABGA_Ostrich_ShieldBubble_C, SM_Ostrich_Shield_Overshield_Edge_Electrical) == 0x000780, "Member 'ABGA_Ostrich_ShieldBubble_C::SM_Ostrich_Shield_Overshield_Edge_Electrical' has a wrong offset!");
static_assert(offsetof(ABGA_Ostrich_ShieldBubble_C, SM_Ostrich_Shield_Overshield_Top_Electrical) == 0x000788, "Member 'ABGA_Ostrich_ShieldBubble_C::SM_Ostrich_Shield_Overshield_Top_Electrical' has a wrong offset!");
static_assert(offsetof(ABGA_Ostrich_ShieldBubble_C, SpotLight) == 0x000790, "Member 'ABGA_Ostrich_ShieldBubble_C::SpotLight' has a wrong offset!");
static_assert(offsetof(ABGA_Ostrich_ShieldBubble_C, GunnerShield) == 0x000798, "Member 'ABGA_Ostrich_ShieldBubble_C::GunnerShield' has a wrong offset!");
static_assert(offsetof(ABGA_Ostrich_ShieldBubble_C, DefaultSceneRoot) == 0x0007A0, "Member 'ABGA_Ostrich_ShieldBubble_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABGA_Ostrich_ShieldBubble_C, OverchargeShieldPulse_PulseAudioVolumeCurve_F6C87835413127D3B81D1F89C6D6E022) == 0x0007A8, "Member 'ABGA_Ostrich_ShieldBubble_C::OverchargeShieldPulse_PulseAudioVolumeCurve_F6C87835413127D3B81D1F89C6D6E022' has a wrong offset!");
static_assert(offsetof(ABGA_Ostrich_ShieldBubble_C, OverchargeShieldPulse_PulseAudioPitchCurve_F6C87835413127D3B81D1F89C6D6E022) == 0x0007AC, "Member 'ABGA_Ostrich_ShieldBubble_C::OverchargeShieldPulse_PulseAudioPitchCurve_F6C87835413127D3B81D1F89C6D6E022' has a wrong offset!");
static_assert(offsetof(ABGA_Ostrich_ShieldBubble_C, OverchargeShieldPulse_PulseParam_F6C87835413127D3B81D1F89C6D6E022) == 0x0007B0, "Member 'ABGA_Ostrich_ShieldBubble_C::OverchargeShieldPulse_PulseParam_F6C87835413127D3B81D1F89C6D6E022' has a wrong offset!");
static_assert(offsetof(ABGA_Ostrich_ShieldBubble_C, OverchargeShieldPulse__Direction_F6C87835413127D3B81D1F89C6D6E022) == 0x0007B4, "Member 'ABGA_Ostrich_ShieldBubble_C::OverchargeShieldPulse__Direction_F6C87835413127D3B81D1F89C6D6E022' has a wrong offset!");
static_assert(offsetof(ABGA_Ostrich_ShieldBubble_C, OverchargeShieldPulse) == 0x0007B8, "Member 'ABGA_Ostrich_ShieldBubble_C::OverchargeShieldPulse' has a wrong offset!");
static_assert(offsetof(ABGA_Ostrich_ShieldBubble_C, ScaleUpShield_NewTrack_0_94D6868842647E5976C1079A35136CF3) == 0x0007C0, "Member 'ABGA_Ostrich_ShieldBubble_C::ScaleUpShield_NewTrack_0_94D6868842647E5976C1079A35136CF3' has a wrong offset!");
static_assert(offsetof(ABGA_Ostrich_ShieldBubble_C, ScaleUpShield__Direction_94D6868842647E5976C1079A35136CF3) == 0x0007C4, "Member 'ABGA_Ostrich_ShieldBubble_C::ScaleUpShield__Direction_94D6868842647E5976C1079A35136CF3' has a wrong offset!");
static_assert(offsetof(ABGA_Ostrich_ShieldBubble_C, ScaleUpShield) == 0x0007C8, "Member 'ABGA_Ostrich_ShieldBubble_C::ScaleUpShield' has a wrong offset!");
static_assert(offsetof(ABGA_Ostrich_ShieldBubble_C, HitShieldVisuals_NewTrack_0_DBE4EE98469DC84F03C5499F0EE182F2) == 0x0007D0, "Member 'ABGA_Ostrich_ShieldBubble_C::HitShieldVisuals_NewTrack_0_DBE4EE98469DC84F03C5499F0EE182F2' has a wrong offset!");
static_assert(offsetof(ABGA_Ostrich_ShieldBubble_C, HitShieldVisuals__Direction_DBE4EE98469DC84F03C5499F0EE182F2) == 0x0007D4, "Member 'ABGA_Ostrich_ShieldBubble_C::HitShieldVisuals__Direction_DBE4EE98469DC84F03C5499F0EE182F2' has a wrong offset!");
static_assert(offsetof(ABGA_Ostrich_ShieldBubble_C, HitShieldVisuals) == 0x0007D8, "Member 'ABGA_Ostrich_ShieldBubble_C::HitShieldVisuals' has a wrong offset!");
static_assert(offsetof(ABGA_Ostrich_ShieldBubble_C, MaxShield) == 0x0007E0, "Member 'ABGA_Ostrich_ShieldBubble_C::MaxShield' has a wrong offset!");
static_assert(offsetof(ABGA_Ostrich_ShieldBubble_C, CurrentShield) == 0x0007E4, "Member 'ABGA_Ostrich_ShieldBubble_C::CurrentShield' has a wrong offset!");
static_assert(offsetof(ABGA_Ostrich_ShieldBubble_C, RespawnShieldDelay) == 0x0007E8, "Member 'ABGA_Ostrich_ShieldBubble_C::RespawnShieldDelay' has a wrong offset!");
static_assert(offsetof(ABGA_Ostrich_ShieldBubble_C, ShieldDestroyed) == 0x0007EC, "Member 'ABGA_Ostrich_ShieldBubble_C::ShieldDestroyed' has a wrong offset!");
static_assert(offsetof(ABGA_Ostrich_ShieldBubble_C, ShieldActive) == 0x0007ED, "Member 'ABGA_Ostrich_ShieldBubble_C::ShieldActive' has a wrong offset!");
static_assert(offsetof(ABGA_Ostrich_ShieldBubble_C, RespawnShieldDelayRow) == 0x0007F0, "Member 'ABGA_Ostrich_ShieldBubble_C::RespawnShieldDelayRow' has a wrong offset!");
static_assert(offsetof(ABGA_Ostrich_ShieldBubble_C, MaxShieldRow) == 0x000810, "Member 'ABGA_Ostrich_ShieldBubble_C::MaxShieldRow' has a wrong offset!");
static_assert(offsetof(ABGA_Ostrich_ShieldBubble_C, RegenShield) == 0x000830, "Member 'ABGA_Ostrich_ShieldBubble_C::RegenShield' has a wrong offset!");
static_assert(offsetof(ABGA_Ostrich_ShieldBubble_C, OnDamageRegenDelay) == 0x000834, "Member 'ABGA_Ostrich_ShieldBubble_C::OnDamageRegenDelay' has a wrong offset!");
static_assert(offsetof(ABGA_Ostrich_ShieldBubble_C, RegenTimer) == 0x000838, "Member 'ABGA_Ostrich_ShieldBubble_C::RegenTimer' has a wrong offset!");
static_assert(offsetof(ABGA_Ostrich_ShieldBubble_C, RegenTickFrequency) == 0x000840, "Member 'ABGA_Ostrich_ShieldBubble_C::RegenTickFrequency' has a wrong offset!");
static_assert(offsetof(ABGA_Ostrich_ShieldBubble_C, RegenHealPerTick) == 0x000844, "Member 'ABGA_Ostrich_ShieldBubble_C::RegenHealPerTick' has a wrong offset!");
static_assert(offsetof(ABGA_Ostrich_ShieldBubble_C, RegenHealPerTickRow) == 0x000848, "Member 'ABGA_Ostrich_ShieldBubble_C::RegenHealPerTickRow' has a wrong offset!");
static_assert(offsetof(ABGA_Ostrich_ShieldBubble_C, RegenTickFrequencyRow) == 0x000868, "Member 'ABGA_Ostrich_ShieldBubble_C::RegenTickFrequencyRow' has a wrong offset!");
static_assert(offsetof(ABGA_Ostrich_ShieldBubble_C, OnDamageRegenDelayRow) == 0x000888, "Member 'ABGA_Ostrich_ShieldBubble_C::OnDamageRegenDelayRow' has a wrong offset!");
static_assert(offsetof(ABGA_Ostrich_ShieldBubble_C, IsOvercharged) == 0x0008A8, "Member 'ABGA_Ostrich_ShieldBubble_C::IsOvercharged' has a wrong offset!");
static_assert(offsetof(ABGA_Ostrich_ShieldBubble_C, OverchargeDamageImmune) == 0x0008AC, "Member 'ABGA_Ostrich_ShieldBubble_C::OverchargeDamageImmune' has a wrong offset!");
static_assert(offsetof(ABGA_Ostrich_ShieldBubble_C, OverchargeDamageImmuneRow) == 0x0008B0, "Member 'ABGA_Ostrich_ShieldBubble_C::OverchargeDamageImmuneRow' has a wrong offset!");
static_assert(offsetof(ABGA_Ostrich_ShieldBubble_C, OverchargeHealthIfNotImmune) == 0x0008D0, "Member 'ABGA_Ostrich_ShieldBubble_C::OverchargeHealthIfNotImmune' has a wrong offset!");
static_assert(offsetof(ABGA_Ostrich_ShieldBubble_C, OverchargeHealthIfNotImmuneRow) == 0x0008D8, "Member 'ABGA_Ostrich_ShieldBubble_C::OverchargeHealthIfNotImmuneRow' has a wrong offset!");
static_assert(offsetof(ABGA_Ostrich_ShieldBubble_C, OverchargeDuration) == 0x0008F8, "Member 'ABGA_Ostrich_ShieldBubble_C::OverchargeDuration' has a wrong offset!");
static_assert(offsetof(ABGA_Ostrich_ShieldBubble_C, OverchargeDurationRow) == 0x000900, "Member 'ABGA_Ostrich_ShieldBubble_C::OverchargeDurationRow' has a wrong offset!");
static_assert(offsetof(ABGA_Ostrich_ShieldBubble_C, OverchargeFailed) == 0x000920, "Member 'ABGA_Ostrich_ShieldBubble_C::OverchargeFailed' has a wrong offset!");
static_assert(offsetof(ABGA_Ostrich_ShieldBubble_C, ResetShieldTimer) == 0x000928, "Member 'ABGA_Ostrich_ShieldBubble_C::ResetShieldTimer' has a wrong offset!");
static_assert(offsetof(ABGA_Ostrich_ShieldBubble_C, ShouldRespawnFullHealth) == 0x000930, "Member 'ABGA_Ostrich_ShieldBubble_C::ShouldRespawnFullHealth' has a wrong offset!");
static_assert(offsetof(ABGA_Ostrich_ShieldBubble_C, ShouldRespawnFullHealthRow) == 0x000938, "Member 'ABGA_Ostrich_ShieldBubble_C::ShouldRespawnFullHealthRow' has a wrong offset!");
static_assert(offsetof(ABGA_Ostrich_ShieldBubble_C, mech) == 0x000958, "Member 'ABGA_Ostrich_ShieldBubble_C::mech' has a wrong offset!");
static_assert(offsetof(ABGA_Ostrich_ShieldBubble_C, CanOvercharge) == 0x000960, "Member 'ABGA_Ostrich_ShieldBubble_C::CanOvercharge' has a wrong offset!");
static_assert(offsetof(ABGA_Ostrich_ShieldBubble_C, OverchargeCooldown) == 0x000964, "Member 'ABGA_Ostrich_ShieldBubble_C::OverchargeCooldown' has a wrong offset!");
static_assert(offsetof(ABGA_Ostrich_ShieldBubble_C, OverchargeCooldownRow) == 0x000968, "Member 'ABGA_Ostrich_ShieldBubble_C::OverchargeCooldownRow' has a wrong offset!");
static_assert(offsetof(ABGA_Ostrich_ShieldBubble_C, ForceCancelOvercharge) == 0x000988, "Member 'ABGA_Ostrich_ShieldBubble_C::ForceCancelOvercharge' has a wrong offset!");
static_assert(offsetof(ABGA_Ostrich_ShieldBubble_C, OverchargeDurationTimer) == 0x000990, "Member 'ABGA_Ostrich_ShieldBubble_C::OverchargeDurationTimer' has a wrong offset!");
static_assert(offsetof(ABGA_Ostrich_ShieldBubble_C, OverchargeCooldownTimer) == 0x000998, "Member 'ABGA_Ostrich_ShieldBubble_C::OverchargeCooldownTimer' has a wrong offset!");
static_assert(offsetof(ABGA_Ostrich_ShieldBubble_C, ShieldBreakSound) == 0x0009A0, "Member 'ABGA_Ostrich_ShieldBubble_C::ShieldBreakSound' has a wrong offset!");
static_assert(offsetof(ABGA_Ostrich_ShieldBubble_C, ShieldPowerupSound) == 0x0009A8, "Member 'ABGA_Ostrich_ShieldBubble_C::ShieldPowerupSound' has a wrong offset!");
static_assert(offsetof(ABGA_Ostrich_ShieldBubble_C, ShieldImpactSound) == 0x0009B0, "Member 'ABGA_Ostrich_ShieldBubble_C::ShieldImpactSound' has a wrong offset!");
static_assert(offsetof(ABGA_Ostrich_ShieldBubble_C, MechGunner) == 0x0009B8, "Member 'ABGA_Ostrich_ShieldBubble_C::MechGunner' has a wrong offset!");
static_assert(offsetof(ABGA_Ostrich_ShieldBubble_C, OverchargeActivateForceFeedback) == 0x0009C0, "Member 'ABGA_Ostrich_ShieldBubble_C::OverchargeActivateForceFeedback' has a wrong offset!");
static_assert(offsetof(ABGA_Ostrich_ShieldBubble_C, ShieldDeactivateForceFeedback) == 0x0009C8, "Member 'ABGA_Ostrich_ShieldBubble_C::ShieldDeactivateForceFeedback' has a wrong offset!");
static_assert(offsetof(ABGA_Ostrich_ShieldBubble_C, ShieldActivateForceFeedback) == 0x0009D0, "Member 'ABGA_Ostrich_ShieldBubble_C::ShieldActivateForceFeedback' has a wrong offset!");
static_assert(offsetof(ABGA_Ostrich_ShieldBubble_C, OverchargeShieldPulseSound) == 0x0009D8, "Member 'ABGA_Ostrich_ShieldBubble_C::OverchargeShieldPulseSound' has a wrong offset!");
static_assert(offsetof(ABGA_Ostrich_ShieldBubble_C, NormalizedDamage) == 0x0009E0, "Member 'ABGA_Ostrich_ShieldBubble_C::NormalizedDamage' has a wrong offset!");
static_assert(offsetof(ABGA_Ostrich_ShieldBubble_C, OverchargeAudioLoop) == 0x0009E8, "Member 'ABGA_Ostrich_ShieldBubble_C::OverchargeAudioLoop' has a wrong offset!");
static_assert(offsetof(ABGA_Ostrich_ShieldBubble_C, OverchargeSound) == 0x0009F0, "Member 'ABGA_Ostrich_ShieldBubble_C::OverchargeSound' has a wrong offset!");
static_assert(offsetof(ABGA_Ostrich_ShieldBubble_C, OverchargeLoopSound) == 0x0009F8, "Member 'ABGA_Ostrich_ShieldBubble_C::OverchargeLoopSound' has a wrong offset!");
static_assert(offsetof(ABGA_Ostrich_ShieldBubble_C, ShieldBrokenLoopAudio) == 0x000A00, "Member 'ABGA_Ostrich_ShieldBubble_C::ShieldBrokenLoopAudio' has a wrong offset!");
static_assert(offsetof(ABGA_Ostrich_ShieldBubble_C, ShieldPowerupRechargeSound) == 0x000A08, "Member 'ABGA_Ostrich_ShieldBubble_C::ShieldPowerupRechargeSound' has a wrong offset!");
static_assert(offsetof(ABGA_Ostrich_ShieldBubble_C, ShieldBrokenLoopSound) == 0x000A10, "Member 'ABGA_Ostrich_ShieldBubble_C::ShieldBrokenLoopSound' has a wrong offset!");
static_assert(offsetof(ABGA_Ostrich_ShieldBubble_C, PowerUpShieldAudio) == 0x000A18, "Member 'ABGA_Ostrich_ShieldBubble_C::PowerUpShieldAudio' has a wrong offset!");
static_assert(offsetof(ABGA_Ostrich_ShieldBubble_C, OverchargeAudio) == 0x000A20, "Member 'ABGA_Ostrich_ShieldBubble_C::OverchargeAudio' has a wrong offset!");
static_assert(offsetof(ABGA_Ostrich_ShieldBubble_C, PowerUpRechargeAudio) == 0x000A28, "Member 'ABGA_Ostrich_ShieldBubble_C::PowerUpRechargeAudio' has a wrong offset!");
static_assert(offsetof(ABGA_Ostrich_ShieldBubble_C, OverchargeShieldPulseAudio) == 0x000A30, "Member 'ABGA_Ostrich_ShieldBubble_C::OverchargeShieldPulseAudio' has a wrong offset!");
static_assert(offsetof(ABGA_Ostrich_ShieldBubble_C, EndSounds) == 0x000A38, "Member 'ABGA_Ostrich_ShieldBubble_C::EndSounds' has a wrong offset!");
static_assert(offsetof(ABGA_Ostrich_ShieldBubble_C, OverchargePulseDelay) == 0x000A40, "Member 'ABGA_Ostrich_ShieldBubble_C::OverchargePulseDelay' has a wrong offset!");

}

