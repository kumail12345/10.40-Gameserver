#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PartyDisplayManagerBP

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "FortniteGame_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass PartyDisplayManagerBP.PartyDisplayManagerBP_C
// 0x01B0 (0x04F0 - 0x0340)
class APartyDisplayManagerBP_C final : public APartyDisplayManager
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0340(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UChildActorComponent*                   PrefabActorComp;                                   // 0x0348(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 SkeletalMesh;                                      // 0x0350(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   StaticMesh;                                        // 0x0358(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   ScalePivot;                                        // 0x0360(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   PivotHolder;                                       // 0x0368(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               CelebratoryFX;                                     // 0x0370(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0378(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         HoloMatColorPulse_Alpha_E6C257BB472EFEF7971B66A1E8FAE3D8; // 0x0380(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            HoloMatColorPulse__Direction_E6C257BB472EFEF7971B66A1E8FAE3D8; // 0x0384(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_385[0x3];                                      // 0x0385(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     HoloMatColorPulse;                                 // 0x0388(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ScaleAnimEvolve_Scaling_6D0D09564D54A0DEA88CCC96FA6653CC; // 0x0390(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            ScaleAnimEvolve__Direction_6D0D09564D54A0DEA88CCC96FA6653CC; // 0x0394(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_395[0x3];                                      // 0x0395(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     ScaleAnimEvolve;                                   // 0x0398(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ScaleAnimLevel_Scaling_CC68128E49202D0C982B7A945E41AF43; // 0x03A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            ScaleAnimLevel__Direction_CC68128E49202D0C982B7A945E41AF43; // 0x03A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3A5[0x3];                                      // 0x03A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     ScaleAnimLevel;                                    // 0x03A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           TimerHandle;                                       // 0x03B0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         Rotation;                                          // 0x03B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3BC[0x4];                                      // 0x03BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortItem*                              ItemToRepresent;                                   // 0x03C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PreviewRotation;                                   // 0x03C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3C9[0x7];                                      // 0x03C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            RotationAnimation;                                 // 0x03D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        LevelUpFX;                                         // 0x03D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        EvolveUpFX;                                        // 0x03E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                FXTargetLocation;                                  // 0x03E8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsCharacter;                                       // 0x03F4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsEvolve;                                          // 0x03F5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F6[0x2];                                      // 0x03F6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystem*                        CharLevelUpFX;                                     // 0x03F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        CharEvolveUpFX;                                    // 0x0400(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               UIoverrideMID;                                     // 0x0408(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HasResetVisuals;                                   // 0x0410(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_411[0x7];                                      // 0x0411(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystemComponent*               ParticleSystem1;                                   // 0x0418(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               ParticleSystem2;                                   // 0x0420(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        CharSwapTransitionFX;                              // 0x0428(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsCharacterVisible;                                // 0x0430(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_431[0x7];                                      // 0x0431(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPlayerPawn*                        HeroPawn;                                          // 0x0438(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SanityChecker;                                     // 0x0440(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_441[0x7];                                      // 0x0441(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               MID_HoloMaterial;                                  // 0x0448(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   HideElement_1;                                     // 0x0450(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   VertexRange;                                       // 0x0458(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   HideElement_2;                                     // 0x0460(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   HideElement_3;                                     // 0x0468(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   HideElement_4;                                     // 0x0470(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   HideElement_5;                                     // 0x0478(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   HideElement_6;                                     // 0x0480(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   HideElement_7;                                     // 0x0488(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   HideElement_8;                                     // 0x0490(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   HideElement_9;                                     // 0x0498(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   HideElement_10;                                    // 0x04A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ScalePivotPreScaleLocation;                        // 0x04A8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                StaticMeshPreScaleLocation;                        // 0x04B4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                SkelMeshPreScaleLocation;                          // 0x04C0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                PrefabPreScaleLocation;                            // 0x04CC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               GhostPistolVFX;                                    // 0x04D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               Ghost_Sword_VFX;                                   // 0x04E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Ghost_Sword_Mesh;                                  // 0x04E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ResetPreScaleLocations();
	void RestoreTeleportMIDsInProgress(const class AFortPlayerPawn* Pawn);
	void HandlePartyMemberInProgressDisplayChanges(class AFortPlayerPawn* Pawn);
	void PartyMemberInProgressCheck(class AFortPlayerPawn* Pawn);
	void PostSetupPrefabVisuals();
	void GetMeshForCurrentDisplayedItem(class UMeshComponent** OutDisplayedMesh);
	void GetItemDefinitionToShow(class UFortItemDefinition** ItemDefinition);
	void SetUIOverrideVisuals(class UTexture2D* Large_Texture, class UFortItemDefinition* Item, EFortRarity Rarity);
	struct FTransform GetWeaponPlacementTransform();
	void UpdatePreviewMeshTransforms();
	struct FTransform GetItemPreviewOffset(class UFortItemDefinition* ItemDefinition);
	struct FTransform GetPreviewMeshWorldTransform();
	void SetupStaticMeshVisuals(class UStaticMesh* NewMesh);
	void SetupSkeletalMeshVisuals(class USkeletalMesh* NewMesh);
	void ResetVisuals();
	void ScaleAnimLevel__FinishedFunc();
	void ScaleAnimLevel__UpdateFunc();
	void ScaleAnimEvolve__FinishedFunc();
	void ScaleAnimEvolve__UpdateFunc();
	void HoloMatColorPulse__FinishedFunc();
	void HoloMatColorPulse__UpdateFunc();
	void Completed_01D864884864692DBB7035B0996A5437(class UFortItem* Item, const struct FGuid& RequestId);
	void ShowItem(class UFortItem* ItemToView, const struct FGuid& RequestId);
	void PlayLevelUpEffect();
	void PlayEvolutionEffect();
	void CelebrateWithFX();
	void PerformScaleMeshFX();
	void HandleLoadingAssetsForItemCompleted(class UFortItem* ItemWhoseAssetsWereLoaded, const TArray<class UObject*>& LoadedAssets, const struct FGuid& RequestId);
	void ReceiveTick(float DeltaSeconds);
	void Set_Character_Parts_Visibility(bool NewVisible);
	void CharacterCustomizationFinished(class AFortPlayerPawn* Pawn);
	void ReceiveBeginPlay();
	void OnPlayerPawnAddedToLobby(class AFortPlayerPawn* Pawn);
	void ResOutPawnFromLobby(class AFortPlayerPawn* Pawn, int32 PartyIndex);
	void SetupPrefabVisuals();
	void ExecuteUbergraph_PartyDisplayManagerBP(int32 EntryPoint);

	class AActor* GetPrefabActorForCurrentDisplayedItem() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"PartyDisplayManagerBP_C">();
	}
	static class APartyDisplayManagerBP_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<APartyDisplayManagerBP_C>();
	}
};
static_assert(alignof(APartyDisplayManagerBP_C) == 0x000008, "Wrong alignment on APartyDisplayManagerBP_C");
static_assert(sizeof(APartyDisplayManagerBP_C) == 0x0004F0, "Wrong size on APartyDisplayManagerBP_C");
static_assert(offsetof(APartyDisplayManagerBP_C, UberGraphFrame) == 0x000340, "Member 'APartyDisplayManagerBP_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(APartyDisplayManagerBP_C, PrefabActorComp) == 0x000348, "Member 'APartyDisplayManagerBP_C::PrefabActorComp' has a wrong offset!");
static_assert(offsetof(APartyDisplayManagerBP_C, SkeletalMesh) == 0x000350, "Member 'APartyDisplayManagerBP_C::SkeletalMesh' has a wrong offset!");
static_assert(offsetof(APartyDisplayManagerBP_C, StaticMesh) == 0x000358, "Member 'APartyDisplayManagerBP_C::StaticMesh' has a wrong offset!");
static_assert(offsetof(APartyDisplayManagerBP_C, ScalePivot) == 0x000360, "Member 'APartyDisplayManagerBP_C::ScalePivot' has a wrong offset!");
static_assert(offsetof(APartyDisplayManagerBP_C, PivotHolder) == 0x000368, "Member 'APartyDisplayManagerBP_C::PivotHolder' has a wrong offset!");
static_assert(offsetof(APartyDisplayManagerBP_C, CelebratoryFX) == 0x000370, "Member 'APartyDisplayManagerBP_C::CelebratoryFX' has a wrong offset!");
static_assert(offsetof(APartyDisplayManagerBP_C, DefaultSceneRoot) == 0x000378, "Member 'APartyDisplayManagerBP_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(APartyDisplayManagerBP_C, HoloMatColorPulse_Alpha_E6C257BB472EFEF7971B66A1E8FAE3D8) == 0x000380, "Member 'APartyDisplayManagerBP_C::HoloMatColorPulse_Alpha_E6C257BB472EFEF7971B66A1E8FAE3D8' has a wrong offset!");
static_assert(offsetof(APartyDisplayManagerBP_C, HoloMatColorPulse__Direction_E6C257BB472EFEF7971B66A1E8FAE3D8) == 0x000384, "Member 'APartyDisplayManagerBP_C::HoloMatColorPulse__Direction_E6C257BB472EFEF7971B66A1E8FAE3D8' has a wrong offset!");
static_assert(offsetof(APartyDisplayManagerBP_C, HoloMatColorPulse) == 0x000388, "Member 'APartyDisplayManagerBP_C::HoloMatColorPulse' has a wrong offset!");
static_assert(offsetof(APartyDisplayManagerBP_C, ScaleAnimEvolve_Scaling_6D0D09564D54A0DEA88CCC96FA6653CC) == 0x000390, "Member 'APartyDisplayManagerBP_C::ScaleAnimEvolve_Scaling_6D0D09564D54A0DEA88CCC96FA6653CC' has a wrong offset!");
static_assert(offsetof(APartyDisplayManagerBP_C, ScaleAnimEvolve__Direction_6D0D09564D54A0DEA88CCC96FA6653CC) == 0x000394, "Member 'APartyDisplayManagerBP_C::ScaleAnimEvolve__Direction_6D0D09564D54A0DEA88CCC96FA6653CC' has a wrong offset!");
static_assert(offsetof(APartyDisplayManagerBP_C, ScaleAnimEvolve) == 0x000398, "Member 'APartyDisplayManagerBP_C::ScaleAnimEvolve' has a wrong offset!");
static_assert(offsetof(APartyDisplayManagerBP_C, ScaleAnimLevel_Scaling_CC68128E49202D0C982B7A945E41AF43) == 0x0003A0, "Member 'APartyDisplayManagerBP_C::ScaleAnimLevel_Scaling_CC68128E49202D0C982B7A945E41AF43' has a wrong offset!");
static_assert(offsetof(APartyDisplayManagerBP_C, ScaleAnimLevel__Direction_CC68128E49202D0C982B7A945E41AF43) == 0x0003A4, "Member 'APartyDisplayManagerBP_C::ScaleAnimLevel__Direction_CC68128E49202D0C982B7A945E41AF43' has a wrong offset!");
static_assert(offsetof(APartyDisplayManagerBP_C, ScaleAnimLevel) == 0x0003A8, "Member 'APartyDisplayManagerBP_C::ScaleAnimLevel' has a wrong offset!");
static_assert(offsetof(APartyDisplayManagerBP_C, TimerHandle) == 0x0003B0, "Member 'APartyDisplayManagerBP_C::TimerHandle' has a wrong offset!");
static_assert(offsetof(APartyDisplayManagerBP_C, Rotation) == 0x0003B8, "Member 'APartyDisplayManagerBP_C::Rotation' has a wrong offset!");
static_assert(offsetof(APartyDisplayManagerBP_C, ItemToRepresent) == 0x0003C0, "Member 'APartyDisplayManagerBP_C::ItemToRepresent' has a wrong offset!");
static_assert(offsetof(APartyDisplayManagerBP_C, PreviewRotation) == 0x0003C8, "Member 'APartyDisplayManagerBP_C::PreviewRotation' has a wrong offset!");
static_assert(offsetof(APartyDisplayManagerBP_C, RotationAnimation) == 0x0003D0, "Member 'APartyDisplayManagerBP_C::RotationAnimation' has a wrong offset!");
static_assert(offsetof(APartyDisplayManagerBP_C, LevelUpFX) == 0x0003D8, "Member 'APartyDisplayManagerBP_C::LevelUpFX' has a wrong offset!");
static_assert(offsetof(APartyDisplayManagerBP_C, EvolveUpFX) == 0x0003E0, "Member 'APartyDisplayManagerBP_C::EvolveUpFX' has a wrong offset!");
static_assert(offsetof(APartyDisplayManagerBP_C, FXTargetLocation) == 0x0003E8, "Member 'APartyDisplayManagerBP_C::FXTargetLocation' has a wrong offset!");
static_assert(offsetof(APartyDisplayManagerBP_C, IsCharacter) == 0x0003F4, "Member 'APartyDisplayManagerBP_C::IsCharacter' has a wrong offset!");
static_assert(offsetof(APartyDisplayManagerBP_C, IsEvolve) == 0x0003F5, "Member 'APartyDisplayManagerBP_C::IsEvolve' has a wrong offset!");
static_assert(offsetof(APartyDisplayManagerBP_C, CharLevelUpFX) == 0x0003F8, "Member 'APartyDisplayManagerBP_C::CharLevelUpFX' has a wrong offset!");
static_assert(offsetof(APartyDisplayManagerBP_C, CharEvolveUpFX) == 0x000400, "Member 'APartyDisplayManagerBP_C::CharEvolveUpFX' has a wrong offset!");
static_assert(offsetof(APartyDisplayManagerBP_C, UIoverrideMID) == 0x000408, "Member 'APartyDisplayManagerBP_C::UIoverrideMID' has a wrong offset!");
static_assert(offsetof(APartyDisplayManagerBP_C, HasResetVisuals) == 0x000410, "Member 'APartyDisplayManagerBP_C::HasResetVisuals' has a wrong offset!");
static_assert(offsetof(APartyDisplayManagerBP_C, ParticleSystem1) == 0x000418, "Member 'APartyDisplayManagerBP_C::ParticleSystem1' has a wrong offset!");
static_assert(offsetof(APartyDisplayManagerBP_C, ParticleSystem2) == 0x000420, "Member 'APartyDisplayManagerBP_C::ParticleSystem2' has a wrong offset!");
static_assert(offsetof(APartyDisplayManagerBP_C, CharSwapTransitionFX) == 0x000428, "Member 'APartyDisplayManagerBP_C::CharSwapTransitionFX' has a wrong offset!");
static_assert(offsetof(APartyDisplayManagerBP_C, IsCharacterVisible) == 0x000430, "Member 'APartyDisplayManagerBP_C::IsCharacterVisible' has a wrong offset!");
static_assert(offsetof(APartyDisplayManagerBP_C, HeroPawn) == 0x000438, "Member 'APartyDisplayManagerBP_C::HeroPawn' has a wrong offset!");
static_assert(offsetof(APartyDisplayManagerBP_C, SanityChecker) == 0x000440, "Member 'APartyDisplayManagerBP_C::SanityChecker' has a wrong offset!");
static_assert(offsetof(APartyDisplayManagerBP_C, MID_HoloMaterial) == 0x000448, "Member 'APartyDisplayManagerBP_C::MID_HoloMaterial' has a wrong offset!");
static_assert(offsetof(APartyDisplayManagerBP_C, HideElement_1) == 0x000450, "Member 'APartyDisplayManagerBP_C::HideElement_1' has a wrong offset!");
static_assert(offsetof(APartyDisplayManagerBP_C, VertexRange) == 0x000458, "Member 'APartyDisplayManagerBP_C::VertexRange' has a wrong offset!");
static_assert(offsetof(APartyDisplayManagerBP_C, HideElement_2) == 0x000460, "Member 'APartyDisplayManagerBP_C::HideElement_2' has a wrong offset!");
static_assert(offsetof(APartyDisplayManagerBP_C, HideElement_3) == 0x000468, "Member 'APartyDisplayManagerBP_C::HideElement_3' has a wrong offset!");
static_assert(offsetof(APartyDisplayManagerBP_C, HideElement_4) == 0x000470, "Member 'APartyDisplayManagerBP_C::HideElement_4' has a wrong offset!");
static_assert(offsetof(APartyDisplayManagerBP_C, HideElement_5) == 0x000478, "Member 'APartyDisplayManagerBP_C::HideElement_5' has a wrong offset!");
static_assert(offsetof(APartyDisplayManagerBP_C, HideElement_6) == 0x000480, "Member 'APartyDisplayManagerBP_C::HideElement_6' has a wrong offset!");
static_assert(offsetof(APartyDisplayManagerBP_C, HideElement_7) == 0x000488, "Member 'APartyDisplayManagerBP_C::HideElement_7' has a wrong offset!");
static_assert(offsetof(APartyDisplayManagerBP_C, HideElement_8) == 0x000490, "Member 'APartyDisplayManagerBP_C::HideElement_8' has a wrong offset!");
static_assert(offsetof(APartyDisplayManagerBP_C, HideElement_9) == 0x000498, "Member 'APartyDisplayManagerBP_C::HideElement_9' has a wrong offset!");
static_assert(offsetof(APartyDisplayManagerBP_C, HideElement_10) == 0x0004A0, "Member 'APartyDisplayManagerBP_C::HideElement_10' has a wrong offset!");
static_assert(offsetof(APartyDisplayManagerBP_C, ScalePivotPreScaleLocation) == 0x0004A8, "Member 'APartyDisplayManagerBP_C::ScalePivotPreScaleLocation' has a wrong offset!");
static_assert(offsetof(APartyDisplayManagerBP_C, StaticMeshPreScaleLocation) == 0x0004B4, "Member 'APartyDisplayManagerBP_C::StaticMeshPreScaleLocation' has a wrong offset!");
static_assert(offsetof(APartyDisplayManagerBP_C, SkelMeshPreScaleLocation) == 0x0004C0, "Member 'APartyDisplayManagerBP_C::SkelMeshPreScaleLocation' has a wrong offset!");
static_assert(offsetof(APartyDisplayManagerBP_C, PrefabPreScaleLocation) == 0x0004CC, "Member 'APartyDisplayManagerBP_C::PrefabPreScaleLocation' has a wrong offset!");
static_assert(offsetof(APartyDisplayManagerBP_C, GhostPistolVFX) == 0x0004D8, "Member 'APartyDisplayManagerBP_C::GhostPistolVFX' has a wrong offset!");
static_assert(offsetof(APartyDisplayManagerBP_C, Ghost_Sword_VFX) == 0x0004E0, "Member 'APartyDisplayManagerBP_C::Ghost_Sword_VFX' has a wrong offset!");
static_assert(offsetof(APartyDisplayManagerBP_C, Ghost_Sword_Mesh) == 0x0004E8, "Member 'APartyDisplayManagerBP_C::Ghost_Sword_Mesh' has a wrong offset!");

}

