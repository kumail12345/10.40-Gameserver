#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: JackalVehicle_Athena

#include "Basic.hpp"

#include "CommonInput_structs.hpp"
#include "Engine_structs.hpp"
#include "FortniteGame_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass JackalVehicle_Athena.JackalVehicle_Athena_C
// 0x0160 (0x1050 - 0x0EF0)
class AJackalVehicle_Athena_C final : public AFortAthenaJackalVehicle
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0EF0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UFortVehicleAudioVoice*                 AudioWind;                                         // 0x0EF8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        AudioLand;                                         // 0x0F00(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFortVehicleAudioVoice*                 AudioBoost;                                        // 0x0F08(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFortVehicleAudioVoice*                 AudioMovement;                                     // 0x0F10(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        AudioJump;                                         // 0x0F18(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_Hoverboard_Lightbeams;                          // 0x0F20(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               LoopingFX;                                         // 0x0F28(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               BoostFX;                                           // 0x0F30(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    BackLight;                                         // 0x0F38(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    FrontLight;                                        // 0x0F40(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFortCollisionAudioComponent*           FortCollisionAudioImpacts;                         // 0x0F48(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          OverlapVolume;                                     // 0x0F50(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class AFortPlayerPawn*                        DriverPawn;                                        // 0x0F58(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      DrivingPlayerController;                           // 0x0F60(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortPlayerPawn*                        LocalPlayerPawn;                                   // 0x0F68(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         Delta;                                             // 0x0F70(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bJumpCharging;                                     // 0x0F74(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_F75[0x3];                                      // 0x0F75(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             MountSound;                                        // 0x0F78(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               InWaterFX;                                         // 0x0F80(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        InWaterLoop;                                       // 0x0F88(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           CheckWaterTimer;                                   // 0x0F90(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         RumbleIntensity;                                   // 0x0F98(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Debug_NoCameraShake;                               // 0x0F9C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_F9D[0x3];                                      // 0x0F9D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UCameraShake*                           DriverCameraShake;                                 // 0x0FA0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EngineSoundMaxDistance;                            // 0x0FA8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Jumped;                                            // 0x0FAC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_FAD[0x3];                                      // 0x0FAD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               BoostMeterMID;                                     // 0x0FB0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BoostTImelineAlpha;                                // 0x0FB8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                FXBoostEnd_0;                                      // 0x0FBC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             DismountSound;                                     // 0x0FC8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                FXFrontSpringOffset;                               // 0x0FD0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                FXRearSpringOffset;                                // 0x0FDC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         FXSurfaceType;                                     // 0x0FE8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SavedDamageValueForMID;                            // 0x0FEC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxSpeedToDestroy;                                 // 0x0FF0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxHealthToDestroy;                                // 0x0FF4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SavedHeadlightValueForMID;                         // 0x0FF8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BoostTimeValueForMID;                              // 0x0FFC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 VehicleHitActor;                                   // 0x1000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DestructionAngle;                                  // 0x1008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LandingFXImpactThreshold;                          // 0x100C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        LandingFX;                                         // 0x1010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             OnDeathSound;                                      // 0x1018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BumpForceAngle;                                    // 0x1020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1024[0x4];                                     // 0x1024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 JumpCameraShake;                                   // 0x1028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MovementVisualUpdate;                              // 0x1030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1034[0x4];                                     // 0x1034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           MovementVisualTimer;                               // 0x1038(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         SlipStreamImpulseForce;                            // 0x1040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1044[0x4];                                     // 0x1044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     WrapBaseMaterial;                                  // 0x1048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_JackalVehicle_Athena(int32 EntryPoint);
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void HideQuickBarForSecondaryAbility(bool Hide);
	void OnHoldExitStopped(class AFortPawn* ExitingPawn);
	void OnHoldExitStarted(class AFortPawn* ExitingPawn, const float ExitDuration);
	void OnDeathPlayEffects(float Damage, const struct FGameplayTagContainer& DamageTags, const struct FVector& Momentum, const struct FHitResult& HitInfo, class AFortPawn* InstigatedBy, class AActor* DamageCauser, const struct FGameplayEffectContextHandle& EffectContext);
	void BndEvt__SkeletalMesh_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void OnStopTick();
	void ChangeOutMaterials();
	void K2_ApplyCosmeticWrap(const class UAthenaItemWrapDefinition* LoadedWrap);
	void OnIsSprintingChanged();
	void StartDriverCameraShake();
	void StopDriverCameraShake();
	void CheckWaterEvent();
	void OnExitedWaterVolume(const struct FVector& WaterSurfacePoint);
	void OnEnteredWaterVolume(const struct FVector& WaterSurfacePoint);
	void OnCollisionHitEffects(const struct FVector& HitLocation, const struct FVector& HitNormalImpulse, const struct FVector& HitFrictionImpulse, const struct FVector& HitNormal, class AActor* HitActor, EPhysicalSurface HitSurfaceType);
	void OnJumped(float Charge);
	void OnJumpChargeEnd(float Charge);
	void OnJumpChargeBegin();
	void OnBoostEnd();
	void OnBoostBegin();
	void ReceiveBeginPlay();
	void SetupCosmetics();
	void OnPawnExitVehicle(class AFortPlayerPawn* PlayerPawn, class FName ExitSocketName);
	void OnPawnEnterVehicle(class AFortPlayerPawn* PlayerPawn, const int32 SeatIdx);
	void UserConstructionScript();
	TArray<class FName> GetVehicleSeatActionNames(class AFortPlayerPawn* PlayerPawn, const ECommonInputType OverrideInputType);
	TArray<class FText> GetVehicleSeatLabels(class AFortPlayerPawn* PlayerPawn, const ECommonInputType OverrideInputType);
	TArray<class FText> GetVehicleSeatActionLabels(class AFortPlayerPawn* PlayerPawn, const ECommonInputType OverrideInputType);
	void DeactivateComponents();
	void CurrentBoostCharge(float* Charge_Value);
	void IsBoostCharging(bool* Is_Charging);
	void HapticsOnHit(float HitMagnitude);
	void SendDamageValueToMaterials(float ParameterValue);
	void SendHeadlightValueToMaterials(float ParameterValue);
	void SendBoostTimeToMaterials(float ParameterValue);
	void UpdateSurfaceType(EPhysicalSurface Surface, int32* Output);
	void DestroyBuildingPiece(class ABuildingActor* BuildingActor, float DestroyThreshold);
	bool ShouldDestroyProp_(const struct FVector& HitNormal);
	void ShouldBump(const struct FVector& Hit_Normal, class AFortPlayerPawn* PlayerPawn, bool* Bump);
	void GetMaxAudibleDistance(float* Max_Distance);
	void SlipStreamCheck();

	void GetIconPlacement(const class AActor* SelfActor, const class AActor* ViewingActor, struct FVector* OutLocation, struct FVector* OutExtents) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"JackalVehicle_Athena_C">();
	}
	static class AJackalVehicle_Athena_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AJackalVehicle_Athena_C>();
	}
};
static_assert(alignof(AJackalVehicle_Athena_C) == 0x000008, "Wrong alignment on AJackalVehicle_Athena_C");
static_assert(sizeof(AJackalVehicle_Athena_C) == 0x001050, "Wrong size on AJackalVehicle_Athena_C");
static_assert(offsetof(AJackalVehicle_Athena_C, UberGraphFrame) == 0x000EF0, "Member 'AJackalVehicle_Athena_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AJackalVehicle_Athena_C, AudioWind) == 0x000EF8, "Member 'AJackalVehicle_Athena_C::AudioWind' has a wrong offset!");
static_assert(offsetof(AJackalVehicle_Athena_C, AudioLand) == 0x000F00, "Member 'AJackalVehicle_Athena_C::AudioLand' has a wrong offset!");
static_assert(offsetof(AJackalVehicle_Athena_C, AudioBoost) == 0x000F08, "Member 'AJackalVehicle_Athena_C::AudioBoost' has a wrong offset!");
static_assert(offsetof(AJackalVehicle_Athena_C, AudioMovement) == 0x000F10, "Member 'AJackalVehicle_Athena_C::AudioMovement' has a wrong offset!");
static_assert(offsetof(AJackalVehicle_Athena_C, AudioJump) == 0x000F18, "Member 'AJackalVehicle_Athena_C::AudioJump' has a wrong offset!");
static_assert(offsetof(AJackalVehicle_Athena_C, SM_Hoverboard_Lightbeams) == 0x000F20, "Member 'AJackalVehicle_Athena_C::SM_Hoverboard_Lightbeams' has a wrong offset!");
static_assert(offsetof(AJackalVehicle_Athena_C, LoopingFX) == 0x000F28, "Member 'AJackalVehicle_Athena_C::LoopingFX' has a wrong offset!");
static_assert(offsetof(AJackalVehicle_Athena_C, BoostFX) == 0x000F30, "Member 'AJackalVehicle_Athena_C::BoostFX' has a wrong offset!");
static_assert(offsetof(AJackalVehicle_Athena_C, BackLight) == 0x000F38, "Member 'AJackalVehicle_Athena_C::BackLight' has a wrong offset!");
static_assert(offsetof(AJackalVehicle_Athena_C, FrontLight) == 0x000F40, "Member 'AJackalVehicle_Athena_C::FrontLight' has a wrong offset!");
static_assert(offsetof(AJackalVehicle_Athena_C, FortCollisionAudioImpacts) == 0x000F48, "Member 'AJackalVehicle_Athena_C::FortCollisionAudioImpacts' has a wrong offset!");
static_assert(offsetof(AJackalVehicle_Athena_C, OverlapVolume) == 0x000F50, "Member 'AJackalVehicle_Athena_C::OverlapVolume' has a wrong offset!");
static_assert(offsetof(AJackalVehicle_Athena_C, DriverPawn) == 0x000F58, "Member 'AJackalVehicle_Athena_C::DriverPawn' has a wrong offset!");
static_assert(offsetof(AJackalVehicle_Athena_C, DrivingPlayerController) == 0x000F60, "Member 'AJackalVehicle_Athena_C::DrivingPlayerController' has a wrong offset!");
static_assert(offsetof(AJackalVehicle_Athena_C, LocalPlayerPawn) == 0x000F68, "Member 'AJackalVehicle_Athena_C::LocalPlayerPawn' has a wrong offset!");
static_assert(offsetof(AJackalVehicle_Athena_C, Delta) == 0x000F70, "Member 'AJackalVehicle_Athena_C::Delta' has a wrong offset!");
static_assert(offsetof(AJackalVehicle_Athena_C, bJumpCharging) == 0x000F74, "Member 'AJackalVehicle_Athena_C::bJumpCharging' has a wrong offset!");
static_assert(offsetof(AJackalVehicle_Athena_C, MountSound) == 0x000F78, "Member 'AJackalVehicle_Athena_C::MountSound' has a wrong offset!");
static_assert(offsetof(AJackalVehicle_Athena_C, InWaterFX) == 0x000F80, "Member 'AJackalVehicle_Athena_C::InWaterFX' has a wrong offset!");
static_assert(offsetof(AJackalVehicle_Athena_C, InWaterLoop) == 0x000F88, "Member 'AJackalVehicle_Athena_C::InWaterLoop' has a wrong offset!");
static_assert(offsetof(AJackalVehicle_Athena_C, CheckWaterTimer) == 0x000F90, "Member 'AJackalVehicle_Athena_C::CheckWaterTimer' has a wrong offset!");
static_assert(offsetof(AJackalVehicle_Athena_C, RumbleIntensity) == 0x000F98, "Member 'AJackalVehicle_Athena_C::RumbleIntensity' has a wrong offset!");
static_assert(offsetof(AJackalVehicle_Athena_C, Debug_NoCameraShake) == 0x000F9C, "Member 'AJackalVehicle_Athena_C::Debug_NoCameraShake' has a wrong offset!");
static_assert(offsetof(AJackalVehicle_Athena_C, DriverCameraShake) == 0x000FA0, "Member 'AJackalVehicle_Athena_C::DriverCameraShake' has a wrong offset!");
static_assert(offsetof(AJackalVehicle_Athena_C, EngineSoundMaxDistance) == 0x000FA8, "Member 'AJackalVehicle_Athena_C::EngineSoundMaxDistance' has a wrong offset!");
static_assert(offsetof(AJackalVehicle_Athena_C, Jumped) == 0x000FAC, "Member 'AJackalVehicle_Athena_C::Jumped' has a wrong offset!");
static_assert(offsetof(AJackalVehicle_Athena_C, BoostMeterMID) == 0x000FB0, "Member 'AJackalVehicle_Athena_C::BoostMeterMID' has a wrong offset!");
static_assert(offsetof(AJackalVehicle_Athena_C, BoostTImelineAlpha) == 0x000FB8, "Member 'AJackalVehicle_Athena_C::BoostTImelineAlpha' has a wrong offset!");
static_assert(offsetof(AJackalVehicle_Athena_C, FXBoostEnd_0) == 0x000FBC, "Member 'AJackalVehicle_Athena_C::FXBoostEnd_0' has a wrong offset!");
static_assert(offsetof(AJackalVehicle_Athena_C, DismountSound) == 0x000FC8, "Member 'AJackalVehicle_Athena_C::DismountSound' has a wrong offset!");
static_assert(offsetof(AJackalVehicle_Athena_C, FXFrontSpringOffset) == 0x000FD0, "Member 'AJackalVehicle_Athena_C::FXFrontSpringOffset' has a wrong offset!");
static_assert(offsetof(AJackalVehicle_Athena_C, FXRearSpringOffset) == 0x000FDC, "Member 'AJackalVehicle_Athena_C::FXRearSpringOffset' has a wrong offset!");
static_assert(offsetof(AJackalVehicle_Athena_C, FXSurfaceType) == 0x000FE8, "Member 'AJackalVehicle_Athena_C::FXSurfaceType' has a wrong offset!");
static_assert(offsetof(AJackalVehicle_Athena_C, SavedDamageValueForMID) == 0x000FEC, "Member 'AJackalVehicle_Athena_C::SavedDamageValueForMID' has a wrong offset!");
static_assert(offsetof(AJackalVehicle_Athena_C, MaxSpeedToDestroy) == 0x000FF0, "Member 'AJackalVehicle_Athena_C::MaxSpeedToDestroy' has a wrong offset!");
static_assert(offsetof(AJackalVehicle_Athena_C, MaxHealthToDestroy) == 0x000FF4, "Member 'AJackalVehicle_Athena_C::MaxHealthToDestroy' has a wrong offset!");
static_assert(offsetof(AJackalVehicle_Athena_C, SavedHeadlightValueForMID) == 0x000FF8, "Member 'AJackalVehicle_Athena_C::SavedHeadlightValueForMID' has a wrong offset!");
static_assert(offsetof(AJackalVehicle_Athena_C, BoostTimeValueForMID) == 0x000FFC, "Member 'AJackalVehicle_Athena_C::BoostTimeValueForMID' has a wrong offset!");
static_assert(offsetof(AJackalVehicle_Athena_C, VehicleHitActor) == 0x001000, "Member 'AJackalVehicle_Athena_C::VehicleHitActor' has a wrong offset!");
static_assert(offsetof(AJackalVehicle_Athena_C, DestructionAngle) == 0x001008, "Member 'AJackalVehicle_Athena_C::DestructionAngle' has a wrong offset!");
static_assert(offsetof(AJackalVehicle_Athena_C, LandingFXImpactThreshold) == 0x00100C, "Member 'AJackalVehicle_Athena_C::LandingFXImpactThreshold' has a wrong offset!");
static_assert(offsetof(AJackalVehicle_Athena_C, LandingFX) == 0x001010, "Member 'AJackalVehicle_Athena_C::LandingFX' has a wrong offset!");
static_assert(offsetof(AJackalVehicle_Athena_C, OnDeathSound) == 0x001018, "Member 'AJackalVehicle_Athena_C::OnDeathSound' has a wrong offset!");
static_assert(offsetof(AJackalVehicle_Athena_C, BumpForceAngle) == 0x001020, "Member 'AJackalVehicle_Athena_C::BumpForceAngle' has a wrong offset!");
static_assert(offsetof(AJackalVehicle_Athena_C, JumpCameraShake) == 0x001028, "Member 'AJackalVehicle_Athena_C::JumpCameraShake' has a wrong offset!");
static_assert(offsetof(AJackalVehicle_Athena_C, MovementVisualUpdate) == 0x001030, "Member 'AJackalVehicle_Athena_C::MovementVisualUpdate' has a wrong offset!");
static_assert(offsetof(AJackalVehicle_Athena_C, MovementVisualTimer) == 0x001038, "Member 'AJackalVehicle_Athena_C::MovementVisualTimer' has a wrong offset!");
static_assert(offsetof(AJackalVehicle_Athena_C, SlipStreamImpulseForce) == 0x001040, "Member 'AJackalVehicle_Athena_C::SlipStreamImpulseForce' has a wrong offset!");
static_assert(offsetof(AJackalVehicle_Athena_C, WrapBaseMaterial) == 0x001048, "Member 'AJackalVehicle_Athena_C::WrapBaseMaterial' has a wrong offset!");

}

