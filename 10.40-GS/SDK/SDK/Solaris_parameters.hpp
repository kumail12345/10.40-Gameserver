#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Solaris

#include "Basic.hpp"


namespace SDK::Params
{

// Function Solaris.SolarisArrayLibrary.Add
// 0x0018 (0x0018 - 0x0000)
struct SolarisArrayLibrary_Add final
{
public:
	TArray<int32>                                 Array;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         new_item;                                          // 0x0010(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarisArrayLibrary_Add) == 0x000008, "Wrong alignment on SolarisArrayLibrary_Add");
static_assert(sizeof(SolarisArrayLibrary_Add) == 0x000018, "Wrong size on SolarisArrayLibrary_Add");
static_assert(offsetof(SolarisArrayLibrary_Add, Array) == 0x000000, "Member 'SolarisArrayLibrary_Add::Array' has a wrong offset!");
static_assert(offsetof(SolarisArrayLibrary_Add, new_item) == 0x000010, "Member 'SolarisArrayLibrary_Add::new_item' has a wrong offset!");
static_assert(offsetof(SolarisArrayLibrary_Add, ReturnValue) == 0x000014, "Member 'SolarisArrayLibrary_Add::ReturnValue' has a wrong offset!");

// Function Solaris.SolarisArrayLibrary.Num
// 0x0018 (0x0018 - 0x0000)
struct SolarisArrayLibrary_Num final
{
public:
	TArray<int32>                                 Array;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SolarisArrayLibrary_Num) == 0x000008, "Wrong alignment on SolarisArrayLibrary_Num");
static_assert(sizeof(SolarisArrayLibrary_Num) == 0x000018, "Wrong size on SolarisArrayLibrary_Num");
static_assert(offsetof(SolarisArrayLibrary_Num, Array) == 0x000000, "Member 'SolarisArrayLibrary_Num::Array' has a wrong offset!");
static_assert(offsetof(SolarisArrayLibrary_Num, ReturnValue) == 0x000010, "Member 'SolarisArrayLibrary_Num::ReturnValue' has a wrong offset!");

// Function Solaris.SolarisMathLibrary_Bool.assign
// 0x0003 (0x0003 - 0x0000)
struct SolarisMathLibrary_Bool_assign final
{
public:
	bool                                          LHS;                                               // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RHS;                                               // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarisMathLibrary_Bool_assign) == 0x000001, "Wrong alignment on SolarisMathLibrary_Bool_assign");
static_assert(sizeof(SolarisMathLibrary_Bool_assign) == 0x000003, "Wrong size on SolarisMathLibrary_Bool_assign");
static_assert(offsetof(SolarisMathLibrary_Bool_assign, LHS) == 0x000000, "Member 'SolarisMathLibrary_Bool_assign::LHS' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Bool_assign, RHS) == 0x000001, "Member 'SolarisMathLibrary_Bool_assign::RHS' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Bool_assign, ReturnValue) == 0x000002, "Member 'SolarisMathLibrary_Bool_assign::ReturnValue' has a wrong offset!");

// Function Solaris.SolarisMathLibrary_Bool.logical_not
// 0x0002 (0x0002 - 0x0000)
struct SolarisMathLibrary_Bool_logical_not final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarisMathLibrary_Bool_logical_not) == 0x000001, "Wrong alignment on SolarisMathLibrary_Bool_logical_not");
static_assert(sizeof(SolarisMathLibrary_Bool_logical_not) == 0x000002, "Wrong size on SolarisMathLibrary_Bool_logical_not");
static_assert(offsetof(SolarisMathLibrary_Bool_logical_not, Value) == 0x000000, "Member 'SolarisMathLibrary_Bool_logical_not::Value' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Bool_logical_not, ReturnValue) == 0x000001, "Member 'SolarisMathLibrary_Bool_logical_not::ReturnValue' has a wrong offset!");

// Function Solaris.SolarisMathLibrary_Bool.logical_xor
// 0x0003 (0x0003 - 0x0000)
struct SolarisMathLibrary_Bool_logical_xor final
{
public:
	bool                                          LHS;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RHS;                                               // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarisMathLibrary_Bool_logical_xor) == 0x000001, "Wrong alignment on SolarisMathLibrary_Bool_logical_xor");
static_assert(sizeof(SolarisMathLibrary_Bool_logical_xor) == 0x000003, "Wrong size on SolarisMathLibrary_Bool_logical_xor");
static_assert(offsetof(SolarisMathLibrary_Bool_logical_xor, LHS) == 0x000000, "Member 'SolarisMathLibrary_Bool_logical_xor::LHS' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Bool_logical_xor, RHS) == 0x000001, "Member 'SolarisMathLibrary_Bool_logical_xor::RHS' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Bool_logical_xor, ReturnValue) == 0x000002, "Member 'SolarisMathLibrary_Bool_logical_xor::ReturnValue' has a wrong offset!");

// Function Solaris.SolarisMathLibrary_Int.abs
// 0x0008 (0x0008 - 0x0000)
struct SolarisMathLibrary_Int_abs final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarisMathLibrary_Int_abs) == 0x000004, "Wrong alignment on SolarisMathLibrary_Int_abs");
static_assert(sizeof(SolarisMathLibrary_Int_abs) == 0x000008, "Wrong size on SolarisMathLibrary_Int_abs");
static_assert(offsetof(SolarisMathLibrary_Int_abs, Value) == 0x000000, "Member 'SolarisMathLibrary_Int_abs::Value' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Int_abs, ReturnValue) == 0x000004, "Member 'SolarisMathLibrary_Int_abs::ReturnValue' has a wrong offset!");

// Function Solaris.SolarisMathLibrary_Int.Add
// 0x000C (0x000C - 0x0000)
struct SolarisMathLibrary_Int_Add final
{
public:
	int32                                         LHS;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RHS;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarisMathLibrary_Int_Add) == 0x000004, "Wrong alignment on SolarisMathLibrary_Int_Add");
static_assert(sizeof(SolarisMathLibrary_Int_Add) == 0x00000C, "Wrong size on SolarisMathLibrary_Int_Add");
static_assert(offsetof(SolarisMathLibrary_Int_Add, LHS) == 0x000000, "Member 'SolarisMathLibrary_Int_Add::LHS' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Int_Add, RHS) == 0x000004, "Member 'SolarisMathLibrary_Int_Add::RHS' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Int_Add, ReturnValue) == 0x000008, "Member 'SolarisMathLibrary_Int_Add::ReturnValue' has a wrong offset!");

// Function Solaris.SolarisMathLibrary_Int.assign
// 0x000C (0x000C - 0x0000)
struct SolarisMathLibrary_Int_assign final
{
public:
	int32                                         LHS;                                               // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RHS;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarisMathLibrary_Int_assign) == 0x000004, "Wrong alignment on SolarisMathLibrary_Int_assign");
static_assert(sizeof(SolarisMathLibrary_Int_assign) == 0x00000C, "Wrong size on SolarisMathLibrary_Int_assign");
static_assert(offsetof(SolarisMathLibrary_Int_assign, LHS) == 0x000000, "Member 'SolarisMathLibrary_Int_assign::LHS' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Int_assign, RHS) == 0x000004, "Member 'SolarisMathLibrary_Int_assign::RHS' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Int_assign, ReturnValue) == 0x000008, "Member 'SolarisMathLibrary_Int_assign::ReturnValue' has a wrong offset!");

// Function Solaris.SolarisMathLibrary_Int.Divide
// 0x000C (0x000C - 0x0000)
struct SolarisMathLibrary_Int_Divide final
{
public:
	int32                                         LHS;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RHS;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarisMathLibrary_Int_Divide) == 0x000004, "Wrong alignment on SolarisMathLibrary_Int_Divide");
static_assert(sizeof(SolarisMathLibrary_Int_Divide) == 0x00000C, "Wrong size on SolarisMathLibrary_Int_Divide");
static_assert(offsetof(SolarisMathLibrary_Int_Divide, LHS) == 0x000000, "Member 'SolarisMathLibrary_Int_Divide::LHS' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Int_Divide, RHS) == 0x000004, "Member 'SolarisMathLibrary_Int_Divide::RHS' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Int_Divide, ReturnValue) == 0x000008, "Member 'SolarisMathLibrary_Int_Divide::ReturnValue' has a wrong offset!");

// Function Solaris.SolarisMathLibrary_Int.equal
// 0x000C (0x000C - 0x0000)
struct SolarisMathLibrary_Int_equal final
{
public:
	int32                                         LHS;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RHS;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SolarisMathLibrary_Int_equal) == 0x000004, "Wrong alignment on SolarisMathLibrary_Int_equal");
static_assert(sizeof(SolarisMathLibrary_Int_equal) == 0x00000C, "Wrong size on SolarisMathLibrary_Int_equal");
static_assert(offsetof(SolarisMathLibrary_Int_equal, LHS) == 0x000000, "Member 'SolarisMathLibrary_Int_equal::LHS' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Int_equal, RHS) == 0x000004, "Member 'SolarisMathLibrary_Int_equal::RHS' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Int_equal, ReturnValue) == 0x000008, "Member 'SolarisMathLibrary_Int_equal::ReturnValue' has a wrong offset!");

// Function Solaris.SolarisMathLibrary_Int.greater
// 0x000C (0x000C - 0x0000)
struct SolarisMathLibrary_Int_greater final
{
public:
	int32                                         LHS;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RHS;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SolarisMathLibrary_Int_greater) == 0x000004, "Wrong alignment on SolarisMathLibrary_Int_greater");
static_assert(sizeof(SolarisMathLibrary_Int_greater) == 0x00000C, "Wrong size on SolarisMathLibrary_Int_greater");
static_assert(offsetof(SolarisMathLibrary_Int_greater, LHS) == 0x000000, "Member 'SolarisMathLibrary_Int_greater::LHS' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Int_greater, RHS) == 0x000004, "Member 'SolarisMathLibrary_Int_greater::RHS' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Int_greater, ReturnValue) == 0x000008, "Member 'SolarisMathLibrary_Int_greater::ReturnValue' has a wrong offset!");

// Function Solaris.SolarisMathLibrary_Int.greater_equal
// 0x000C (0x000C - 0x0000)
struct SolarisMathLibrary_Int_greater_equal final
{
public:
	int32                                         LHS;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RHS;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SolarisMathLibrary_Int_greater_equal) == 0x000004, "Wrong alignment on SolarisMathLibrary_Int_greater_equal");
static_assert(sizeof(SolarisMathLibrary_Int_greater_equal) == 0x00000C, "Wrong size on SolarisMathLibrary_Int_greater_equal");
static_assert(offsetof(SolarisMathLibrary_Int_greater_equal, LHS) == 0x000000, "Member 'SolarisMathLibrary_Int_greater_equal::LHS' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Int_greater_equal, RHS) == 0x000004, "Member 'SolarisMathLibrary_Int_greater_equal::RHS' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Int_greater_equal, ReturnValue) == 0x000008, "Member 'SolarisMathLibrary_Int_greater_equal::ReturnValue' has a wrong offset!");

// Function Solaris.SolarisMathLibrary_Int.less
// 0x000C (0x000C - 0x0000)
struct SolarisMathLibrary_Int_less final
{
public:
	int32                                         LHS;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RHS;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SolarisMathLibrary_Int_less) == 0x000004, "Wrong alignment on SolarisMathLibrary_Int_less");
static_assert(sizeof(SolarisMathLibrary_Int_less) == 0x00000C, "Wrong size on SolarisMathLibrary_Int_less");
static_assert(offsetof(SolarisMathLibrary_Int_less, LHS) == 0x000000, "Member 'SolarisMathLibrary_Int_less::LHS' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Int_less, RHS) == 0x000004, "Member 'SolarisMathLibrary_Int_less::RHS' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Int_less, ReturnValue) == 0x000008, "Member 'SolarisMathLibrary_Int_less::ReturnValue' has a wrong offset!");

// Function Solaris.SolarisMathLibrary_Int.less_equal
// 0x000C (0x000C - 0x0000)
struct SolarisMathLibrary_Int_less_equal final
{
public:
	int32                                         LHS;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RHS;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SolarisMathLibrary_Int_less_equal) == 0x000004, "Wrong alignment on SolarisMathLibrary_Int_less_equal");
static_assert(sizeof(SolarisMathLibrary_Int_less_equal) == 0x00000C, "Wrong size on SolarisMathLibrary_Int_less_equal");
static_assert(offsetof(SolarisMathLibrary_Int_less_equal, LHS) == 0x000000, "Member 'SolarisMathLibrary_Int_less_equal::LHS' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Int_less_equal, RHS) == 0x000004, "Member 'SolarisMathLibrary_Int_less_equal::RHS' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Int_less_equal, ReturnValue) == 0x000008, "Member 'SolarisMathLibrary_Int_less_equal::ReturnValue' has a wrong offset!");

// Function Solaris.SolarisMathLibrary_Int.max
// 0x000C (0x000C - 0x0000)
struct SolarisMathLibrary_Int_max_0 final
{
public:
	int32                                         LHS;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RHS;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarisMathLibrary_Int_max_0) == 0x000004, "Wrong alignment on SolarisMathLibrary_Int_max_0");
static_assert(sizeof(SolarisMathLibrary_Int_max_0) == 0x00000C, "Wrong size on SolarisMathLibrary_Int_max_0");
static_assert(offsetof(SolarisMathLibrary_Int_max_0, LHS) == 0x000000, "Member 'SolarisMathLibrary_Int_max_0::LHS' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Int_max_0, RHS) == 0x000004, "Member 'SolarisMathLibrary_Int_max_0::RHS' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Int_max_0, ReturnValue) == 0x000008, "Member 'SolarisMathLibrary_Int_max_0::ReturnValue' has a wrong offset!");

// Function Solaris.SolarisMathLibrary_Int.min
// 0x000C (0x000C - 0x0000)
struct SolarisMathLibrary_Int_min_0 final
{
public:
	int32                                         LHS;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RHS;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarisMathLibrary_Int_min_0) == 0x000004, "Wrong alignment on SolarisMathLibrary_Int_min_0");
static_assert(sizeof(SolarisMathLibrary_Int_min_0) == 0x00000C, "Wrong size on SolarisMathLibrary_Int_min_0");
static_assert(offsetof(SolarisMathLibrary_Int_min_0, LHS) == 0x000000, "Member 'SolarisMathLibrary_Int_min_0::LHS' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Int_min_0, RHS) == 0x000004, "Member 'SolarisMathLibrary_Int_min_0::RHS' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Int_min_0, ReturnValue) == 0x000008, "Member 'SolarisMathLibrary_Int_min_0::ReturnValue' has a wrong offset!");

// Function Solaris.SolarisMathLibrary_Int.Multiply
// 0x000C (0x000C - 0x0000)
struct SolarisMathLibrary_Int_Multiply final
{
public:
	int32                                         LHS;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RHS;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarisMathLibrary_Int_Multiply) == 0x000004, "Wrong alignment on SolarisMathLibrary_Int_Multiply");
static_assert(sizeof(SolarisMathLibrary_Int_Multiply) == 0x00000C, "Wrong size on SolarisMathLibrary_Int_Multiply");
static_assert(offsetof(SolarisMathLibrary_Int_Multiply, LHS) == 0x000000, "Member 'SolarisMathLibrary_Int_Multiply::LHS' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Int_Multiply, RHS) == 0x000004, "Member 'SolarisMathLibrary_Int_Multiply::RHS' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Int_Multiply, ReturnValue) == 0x000008, "Member 'SolarisMathLibrary_Int_Multiply::ReturnValue' has a wrong offset!");

// Function Solaris.SolarisMathLibrary_Int.negate
// 0x0008 (0x0008 - 0x0000)
struct SolarisMathLibrary_Int_negate final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarisMathLibrary_Int_negate) == 0x000004, "Wrong alignment on SolarisMathLibrary_Int_negate");
static_assert(sizeof(SolarisMathLibrary_Int_negate) == 0x000008, "Wrong size on SolarisMathLibrary_Int_negate");
static_assert(offsetof(SolarisMathLibrary_Int_negate, Value) == 0x000000, "Member 'SolarisMathLibrary_Int_negate::Value' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Int_negate, ReturnValue) == 0x000004, "Member 'SolarisMathLibrary_Int_negate::ReturnValue' has a wrong offset!");

// Function Solaris.SolarisMathLibrary_Int.not_equal
// 0x000C (0x000C - 0x0000)
struct SolarisMathLibrary_Int_not_equal final
{
public:
	int32                                         LHS;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RHS;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SolarisMathLibrary_Int_not_equal) == 0x000004, "Wrong alignment on SolarisMathLibrary_Int_not_equal");
static_assert(sizeof(SolarisMathLibrary_Int_not_equal) == 0x00000C, "Wrong size on SolarisMathLibrary_Int_not_equal");
static_assert(offsetof(SolarisMathLibrary_Int_not_equal, LHS) == 0x000000, "Member 'SolarisMathLibrary_Int_not_equal::LHS' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Int_not_equal, RHS) == 0x000004, "Member 'SolarisMathLibrary_Int_not_equal::RHS' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Int_not_equal, ReturnValue) == 0x000008, "Member 'SolarisMathLibrary_Int_not_equal::ReturnValue' has a wrong offset!");

// Function Solaris.SolarisMathLibrary_Int.Subtract
// 0x000C (0x000C - 0x0000)
struct SolarisMathLibrary_Int_Subtract final
{
public:
	int32                                         LHS;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RHS;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarisMathLibrary_Int_Subtract) == 0x000004, "Wrong alignment on SolarisMathLibrary_Int_Subtract");
static_assert(sizeof(SolarisMathLibrary_Int_Subtract) == 0x00000C, "Wrong size on SolarisMathLibrary_Int_Subtract");
static_assert(offsetof(SolarisMathLibrary_Int_Subtract, LHS) == 0x000000, "Member 'SolarisMathLibrary_Int_Subtract::LHS' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Int_Subtract, RHS) == 0x000004, "Member 'SolarisMathLibrary_Int_Subtract::RHS' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Int_Subtract, ReturnValue) == 0x000008, "Member 'SolarisMathLibrary_Int_Subtract::ReturnValue' has a wrong offset!");

// Function Solaris.SolarisMathLibrary_Real.abs
// 0x0008 (0x0008 - 0x0000)
struct SolarisMathLibrary_Real_abs final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarisMathLibrary_Real_abs) == 0x000004, "Wrong alignment on SolarisMathLibrary_Real_abs");
static_assert(sizeof(SolarisMathLibrary_Real_abs) == 0x000008, "Wrong size on SolarisMathLibrary_Real_abs");
static_assert(offsetof(SolarisMathLibrary_Real_abs, Value) == 0x000000, "Member 'SolarisMathLibrary_Real_abs::Value' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Real_abs, ReturnValue) == 0x000004, "Member 'SolarisMathLibrary_Real_abs::ReturnValue' has a wrong offset!");

// Function Solaris.SolarisMathLibrary_Real.Add
// 0x000C (0x000C - 0x0000)
struct SolarisMathLibrary_Real_Add final
{
public:
	float                                         LHS;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RHS;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarisMathLibrary_Real_Add) == 0x000004, "Wrong alignment on SolarisMathLibrary_Real_Add");
static_assert(sizeof(SolarisMathLibrary_Real_Add) == 0x00000C, "Wrong size on SolarisMathLibrary_Real_Add");
static_assert(offsetof(SolarisMathLibrary_Real_Add, LHS) == 0x000000, "Member 'SolarisMathLibrary_Real_Add::LHS' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Real_Add, RHS) == 0x000004, "Member 'SolarisMathLibrary_Real_Add::RHS' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Real_Add, ReturnValue) == 0x000008, "Member 'SolarisMathLibrary_Real_Add::ReturnValue' has a wrong offset!");

// Function Solaris.SolarisMathLibrary_Real.assign
// 0x000C (0x000C - 0x0000)
struct SolarisMathLibrary_Real_assign final
{
public:
	float                                         LHS;                                               // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RHS;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarisMathLibrary_Real_assign) == 0x000004, "Wrong alignment on SolarisMathLibrary_Real_assign");
static_assert(sizeof(SolarisMathLibrary_Real_assign) == 0x00000C, "Wrong size on SolarisMathLibrary_Real_assign");
static_assert(offsetof(SolarisMathLibrary_Real_assign, LHS) == 0x000000, "Member 'SolarisMathLibrary_Real_assign::LHS' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Real_assign, RHS) == 0x000004, "Member 'SolarisMathLibrary_Real_assign::RHS' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Real_assign, ReturnValue) == 0x000008, "Member 'SolarisMathLibrary_Real_assign::ReturnValue' has a wrong offset!");

// Function Solaris.SolarisMathLibrary_Real.Divide
// 0x000C (0x000C - 0x0000)
struct SolarisMathLibrary_Real_Divide final
{
public:
	float                                         LHS;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RHS;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarisMathLibrary_Real_Divide) == 0x000004, "Wrong alignment on SolarisMathLibrary_Real_Divide");
static_assert(sizeof(SolarisMathLibrary_Real_Divide) == 0x00000C, "Wrong size on SolarisMathLibrary_Real_Divide");
static_assert(offsetof(SolarisMathLibrary_Real_Divide, LHS) == 0x000000, "Member 'SolarisMathLibrary_Real_Divide::LHS' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Real_Divide, RHS) == 0x000004, "Member 'SolarisMathLibrary_Real_Divide::RHS' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Real_Divide, ReturnValue) == 0x000008, "Member 'SolarisMathLibrary_Real_Divide::ReturnValue' has a wrong offset!");

// Function Solaris.SolarisMathLibrary_Real.equal
// 0x000C (0x000C - 0x0000)
struct SolarisMathLibrary_Real_equal final
{
public:
	float                                         LHS;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RHS;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SolarisMathLibrary_Real_equal) == 0x000004, "Wrong alignment on SolarisMathLibrary_Real_equal");
static_assert(sizeof(SolarisMathLibrary_Real_equal) == 0x00000C, "Wrong size on SolarisMathLibrary_Real_equal");
static_assert(offsetof(SolarisMathLibrary_Real_equal, LHS) == 0x000000, "Member 'SolarisMathLibrary_Real_equal::LHS' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Real_equal, RHS) == 0x000004, "Member 'SolarisMathLibrary_Real_equal::RHS' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Real_equal, ReturnValue) == 0x000008, "Member 'SolarisMathLibrary_Real_equal::ReturnValue' has a wrong offset!");

// Function Solaris.SolarisMathLibrary_Real.greater
// 0x000C (0x000C - 0x0000)
struct SolarisMathLibrary_Real_greater final
{
public:
	float                                         LHS;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RHS;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SolarisMathLibrary_Real_greater) == 0x000004, "Wrong alignment on SolarisMathLibrary_Real_greater");
static_assert(sizeof(SolarisMathLibrary_Real_greater) == 0x00000C, "Wrong size on SolarisMathLibrary_Real_greater");
static_assert(offsetof(SolarisMathLibrary_Real_greater, LHS) == 0x000000, "Member 'SolarisMathLibrary_Real_greater::LHS' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Real_greater, RHS) == 0x000004, "Member 'SolarisMathLibrary_Real_greater::RHS' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Real_greater, ReturnValue) == 0x000008, "Member 'SolarisMathLibrary_Real_greater::ReturnValue' has a wrong offset!");

// Function Solaris.SolarisMathLibrary_Real.greater_equal
// 0x000C (0x000C - 0x0000)
struct SolarisMathLibrary_Real_greater_equal final
{
public:
	float                                         LHS;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RHS;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SolarisMathLibrary_Real_greater_equal) == 0x000004, "Wrong alignment on SolarisMathLibrary_Real_greater_equal");
static_assert(sizeof(SolarisMathLibrary_Real_greater_equal) == 0x00000C, "Wrong size on SolarisMathLibrary_Real_greater_equal");
static_assert(offsetof(SolarisMathLibrary_Real_greater_equal, LHS) == 0x000000, "Member 'SolarisMathLibrary_Real_greater_equal::LHS' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Real_greater_equal, RHS) == 0x000004, "Member 'SolarisMathLibrary_Real_greater_equal::RHS' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Real_greater_equal, ReturnValue) == 0x000008, "Member 'SolarisMathLibrary_Real_greater_equal::ReturnValue' has a wrong offset!");

// Function Solaris.SolarisMathLibrary_Real.less
// 0x000C (0x000C - 0x0000)
struct SolarisMathLibrary_Real_less final
{
public:
	float                                         LHS;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RHS;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SolarisMathLibrary_Real_less) == 0x000004, "Wrong alignment on SolarisMathLibrary_Real_less");
static_assert(sizeof(SolarisMathLibrary_Real_less) == 0x00000C, "Wrong size on SolarisMathLibrary_Real_less");
static_assert(offsetof(SolarisMathLibrary_Real_less, LHS) == 0x000000, "Member 'SolarisMathLibrary_Real_less::LHS' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Real_less, RHS) == 0x000004, "Member 'SolarisMathLibrary_Real_less::RHS' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Real_less, ReturnValue) == 0x000008, "Member 'SolarisMathLibrary_Real_less::ReturnValue' has a wrong offset!");

// Function Solaris.SolarisMathLibrary_Real.less_equal
// 0x000C (0x000C - 0x0000)
struct SolarisMathLibrary_Real_less_equal final
{
public:
	float                                         LHS;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RHS;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SolarisMathLibrary_Real_less_equal) == 0x000004, "Wrong alignment on SolarisMathLibrary_Real_less_equal");
static_assert(sizeof(SolarisMathLibrary_Real_less_equal) == 0x00000C, "Wrong size on SolarisMathLibrary_Real_less_equal");
static_assert(offsetof(SolarisMathLibrary_Real_less_equal, LHS) == 0x000000, "Member 'SolarisMathLibrary_Real_less_equal::LHS' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Real_less_equal, RHS) == 0x000004, "Member 'SolarisMathLibrary_Real_less_equal::RHS' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Real_less_equal, ReturnValue) == 0x000008, "Member 'SolarisMathLibrary_Real_less_equal::ReturnValue' has a wrong offset!");

// Function Solaris.SolarisMathLibrary_Real.max
// 0x000C (0x000C - 0x0000)
struct SolarisMathLibrary_Real_max_0 final
{
public:
	float                                         LHS;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RHS;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarisMathLibrary_Real_max_0) == 0x000004, "Wrong alignment on SolarisMathLibrary_Real_max_0");
static_assert(sizeof(SolarisMathLibrary_Real_max_0) == 0x00000C, "Wrong size on SolarisMathLibrary_Real_max_0");
static_assert(offsetof(SolarisMathLibrary_Real_max_0, LHS) == 0x000000, "Member 'SolarisMathLibrary_Real_max_0::LHS' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Real_max_0, RHS) == 0x000004, "Member 'SolarisMathLibrary_Real_max_0::RHS' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Real_max_0, ReturnValue) == 0x000008, "Member 'SolarisMathLibrary_Real_max_0::ReturnValue' has a wrong offset!");

// Function Solaris.SolarisMathLibrary_Real.min
// 0x000C (0x000C - 0x0000)
struct SolarisMathLibrary_Real_min_0 final
{
public:
	float                                         LHS;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RHS;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarisMathLibrary_Real_min_0) == 0x000004, "Wrong alignment on SolarisMathLibrary_Real_min_0");
static_assert(sizeof(SolarisMathLibrary_Real_min_0) == 0x00000C, "Wrong size on SolarisMathLibrary_Real_min_0");
static_assert(offsetof(SolarisMathLibrary_Real_min_0, LHS) == 0x000000, "Member 'SolarisMathLibrary_Real_min_0::LHS' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Real_min_0, RHS) == 0x000004, "Member 'SolarisMathLibrary_Real_min_0::RHS' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Real_min_0, ReturnValue) == 0x000008, "Member 'SolarisMathLibrary_Real_min_0::ReturnValue' has a wrong offset!");

// Function Solaris.SolarisMathLibrary_Real.Multiply
// 0x000C (0x000C - 0x0000)
struct SolarisMathLibrary_Real_Multiply final
{
public:
	float                                         LHS;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RHS;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarisMathLibrary_Real_Multiply) == 0x000004, "Wrong alignment on SolarisMathLibrary_Real_Multiply");
static_assert(sizeof(SolarisMathLibrary_Real_Multiply) == 0x00000C, "Wrong size on SolarisMathLibrary_Real_Multiply");
static_assert(offsetof(SolarisMathLibrary_Real_Multiply, LHS) == 0x000000, "Member 'SolarisMathLibrary_Real_Multiply::LHS' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Real_Multiply, RHS) == 0x000004, "Member 'SolarisMathLibrary_Real_Multiply::RHS' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Real_Multiply, ReturnValue) == 0x000008, "Member 'SolarisMathLibrary_Real_Multiply::ReturnValue' has a wrong offset!");

// Function Solaris.SolarisMathLibrary_Real.negate
// 0x0008 (0x0008 - 0x0000)
struct SolarisMathLibrary_Real_negate final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarisMathLibrary_Real_negate) == 0x000004, "Wrong alignment on SolarisMathLibrary_Real_negate");
static_assert(sizeof(SolarisMathLibrary_Real_negate) == 0x000008, "Wrong size on SolarisMathLibrary_Real_negate");
static_assert(offsetof(SolarisMathLibrary_Real_negate, Value) == 0x000000, "Member 'SolarisMathLibrary_Real_negate::Value' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Real_negate, ReturnValue) == 0x000004, "Member 'SolarisMathLibrary_Real_negate::ReturnValue' has a wrong offset!");

// Function Solaris.SolarisMathLibrary_Real.not_equal
// 0x000C (0x000C - 0x0000)
struct SolarisMathLibrary_Real_not_equal final
{
public:
	float                                         LHS;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RHS;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SolarisMathLibrary_Real_not_equal) == 0x000004, "Wrong alignment on SolarisMathLibrary_Real_not_equal");
static_assert(sizeof(SolarisMathLibrary_Real_not_equal) == 0x00000C, "Wrong size on SolarisMathLibrary_Real_not_equal");
static_assert(offsetof(SolarisMathLibrary_Real_not_equal, LHS) == 0x000000, "Member 'SolarisMathLibrary_Real_not_equal::LHS' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Real_not_equal, RHS) == 0x000004, "Member 'SolarisMathLibrary_Real_not_equal::RHS' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Real_not_equal, ReturnValue) == 0x000008, "Member 'SolarisMathLibrary_Real_not_equal::ReturnValue' has a wrong offset!");

// Function Solaris.SolarisMathLibrary_Real.Subtract
// 0x000C (0x000C - 0x0000)
struct SolarisMathLibrary_Real_Subtract final
{
public:
	float                                         LHS;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RHS;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarisMathLibrary_Real_Subtract) == 0x000004, "Wrong alignment on SolarisMathLibrary_Real_Subtract");
static_assert(sizeof(SolarisMathLibrary_Real_Subtract) == 0x00000C, "Wrong size on SolarisMathLibrary_Real_Subtract");
static_assert(offsetof(SolarisMathLibrary_Real_Subtract, LHS) == 0x000000, "Member 'SolarisMathLibrary_Real_Subtract::LHS' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Real_Subtract, RHS) == 0x000004, "Member 'SolarisMathLibrary_Real_Subtract::RHS' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Real_Subtract, ReturnValue) == 0x000008, "Member 'SolarisMathLibrary_Real_Subtract::ReturnValue' has a wrong offset!");

}

