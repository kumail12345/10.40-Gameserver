#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AthenaSeasonPaginationPips

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass AthenaSeasonPaginationPips.AthenaSeasonPaginationPips_C
// 0x0068 (0x0290 - 0x0228)
class UAthenaSeasonPaginationPips_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0228(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       Deselected;                                        // 0x0230(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Selected;                                          // 0x0238(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UImage*                                 PIP;                                               // 0x0240(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	float                                         Spring_ShapeChange_NewVal;                         // 0x0248(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Spring_ShapeChange_Target;                         // 0x024C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFloatSpringState                      SpringState_ShapeChange;                           // 0x0250(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	float                                         SS_0_Stiffness;                                    // 0x0258(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StiffnessMultiply;                                 // 0x025C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SS_0_Damping;                                      // 0x0260(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DampenMultiply;                                    // 0x0264(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SS_0_Mass;                                         // 0x0268(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MassMultiply;                                      // 0x026C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RandomFloat_Top;                                   // 0x0270(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RandomFloat_Left;                                  // 0x0274(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RandomFloat_Right;                                 // 0x0278(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RandomFloat_Bottom;                                // 0x027C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFloatSpringState                      SpringState_Scale;                                 // 0x0280(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	float                                         Spring_Scale_Target;                               // 0x0288(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void Construct();
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);
	void Select();
	void Deselect();
	void ExecuteUbergraph_AthenaSeasonPaginationPips(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"AthenaSeasonPaginationPips_C">();
	}
	static class UAthenaSeasonPaginationPips_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAthenaSeasonPaginationPips_C>();
	}
};
static_assert(alignof(UAthenaSeasonPaginationPips_C) == 0x000008, "Wrong alignment on UAthenaSeasonPaginationPips_C");
static_assert(sizeof(UAthenaSeasonPaginationPips_C) == 0x000290, "Wrong size on UAthenaSeasonPaginationPips_C");
static_assert(offsetof(UAthenaSeasonPaginationPips_C, UberGraphFrame) == 0x000228, "Member 'UAthenaSeasonPaginationPips_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UAthenaSeasonPaginationPips_C, Deselected) == 0x000230, "Member 'UAthenaSeasonPaginationPips_C::Deselected' has a wrong offset!");
static_assert(offsetof(UAthenaSeasonPaginationPips_C, Selected) == 0x000238, "Member 'UAthenaSeasonPaginationPips_C::Selected' has a wrong offset!");
static_assert(offsetof(UAthenaSeasonPaginationPips_C, PIP) == 0x000240, "Member 'UAthenaSeasonPaginationPips_C::PIP' has a wrong offset!");
static_assert(offsetof(UAthenaSeasonPaginationPips_C, Spring_ShapeChange_NewVal) == 0x000248, "Member 'UAthenaSeasonPaginationPips_C::Spring_ShapeChange_NewVal' has a wrong offset!");
static_assert(offsetof(UAthenaSeasonPaginationPips_C, Spring_ShapeChange_Target) == 0x00024C, "Member 'UAthenaSeasonPaginationPips_C::Spring_ShapeChange_Target' has a wrong offset!");
static_assert(offsetof(UAthenaSeasonPaginationPips_C, SpringState_ShapeChange) == 0x000250, "Member 'UAthenaSeasonPaginationPips_C::SpringState_ShapeChange' has a wrong offset!");
static_assert(offsetof(UAthenaSeasonPaginationPips_C, SS_0_Stiffness) == 0x000258, "Member 'UAthenaSeasonPaginationPips_C::SS_0_Stiffness' has a wrong offset!");
static_assert(offsetof(UAthenaSeasonPaginationPips_C, StiffnessMultiply) == 0x00025C, "Member 'UAthenaSeasonPaginationPips_C::StiffnessMultiply' has a wrong offset!");
static_assert(offsetof(UAthenaSeasonPaginationPips_C, SS_0_Damping) == 0x000260, "Member 'UAthenaSeasonPaginationPips_C::SS_0_Damping' has a wrong offset!");
static_assert(offsetof(UAthenaSeasonPaginationPips_C, DampenMultiply) == 0x000264, "Member 'UAthenaSeasonPaginationPips_C::DampenMultiply' has a wrong offset!");
static_assert(offsetof(UAthenaSeasonPaginationPips_C, SS_0_Mass) == 0x000268, "Member 'UAthenaSeasonPaginationPips_C::SS_0_Mass' has a wrong offset!");
static_assert(offsetof(UAthenaSeasonPaginationPips_C, MassMultiply) == 0x00026C, "Member 'UAthenaSeasonPaginationPips_C::MassMultiply' has a wrong offset!");
static_assert(offsetof(UAthenaSeasonPaginationPips_C, RandomFloat_Top) == 0x000270, "Member 'UAthenaSeasonPaginationPips_C::RandomFloat_Top' has a wrong offset!");
static_assert(offsetof(UAthenaSeasonPaginationPips_C, RandomFloat_Left) == 0x000274, "Member 'UAthenaSeasonPaginationPips_C::RandomFloat_Left' has a wrong offset!");
static_assert(offsetof(UAthenaSeasonPaginationPips_C, RandomFloat_Right) == 0x000278, "Member 'UAthenaSeasonPaginationPips_C::RandomFloat_Right' has a wrong offset!");
static_assert(offsetof(UAthenaSeasonPaginationPips_C, RandomFloat_Bottom) == 0x00027C, "Member 'UAthenaSeasonPaginationPips_C::RandomFloat_Bottom' has a wrong offset!");
static_assert(offsetof(UAthenaSeasonPaginationPips_C, SpringState_Scale) == 0x000280, "Member 'UAthenaSeasonPaginationPips_C::SpringState_Scale' has a wrong offset!");
static_assert(offsetof(UAthenaSeasonPaginationPips_C, Spring_Scale_Target) == 0x000288, "Member 'UAthenaSeasonPaginationPips_C::Spring_Scale_Target' has a wrong offset!");

}

