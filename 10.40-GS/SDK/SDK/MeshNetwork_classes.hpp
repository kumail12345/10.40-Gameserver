#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MeshNetwork

#include "Basic.hpp"

#include "OnlineSubsystemUtils_classes.hpp"
#include "ReplicationGraph_structs.hpp"
#include "ReplicationGraph_classes.hpp"
#include "MeshNetwork_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// Class MeshNetwork.MeshBeaconClient
// 0x0038 (0x02D0 - 0x0298)
class AMeshBeaconClient : public AOnlineBeaconClient
{
public:
	uint8                                         Pad_298[0x20];                                     // 0x0298(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bConnectedToRoot;                                  // 0x02B8(0x0001)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2B9[0x17];                                     // 0x02B9(0x0017)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnRep_ConnectedToRoot();
	void ServerUpdateLevelVisibility(const struct FUpdateLevelVisibilityLevelInfo& LevelVisibility);
	void ServerUpdateMultipleLevelsVisibility(const TArray<struct FUpdateLevelVisibilityLevelInfo>& LevelVisibilities);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MeshBeaconClient">();
	}
	static class AMeshBeaconClient* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMeshBeaconClient>();
	}
};
static_assert(alignof(AMeshBeaconClient) == 0x000008, "Wrong alignment on AMeshBeaconClient");
static_assert(sizeof(AMeshBeaconClient) == 0x0002D0, "Wrong size on AMeshBeaconClient");
static_assert(offsetof(AMeshBeaconClient, bConnectedToRoot) == 0x0002B8, "Member 'AMeshBeaconClient::bConnectedToRoot' has a wrong offset!");

// Class MeshNetwork.MeshBeaconHost
// 0x0008 (0x0308 - 0x0300)
class AMeshBeaconHost : public AOnlineBeaconHost
{
public:
	int32                                         MaxConnections;                                    // 0x0300(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_304[0x4];                                      // 0x0304(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MeshBeaconHost">();
	}
	static class AMeshBeaconHost* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMeshBeaconHost>();
	}
};
static_assert(alignof(AMeshBeaconHost) == 0x000008, "Wrong alignment on AMeshBeaconHost");
static_assert(sizeof(AMeshBeaconHost) == 0x000308, "Wrong size on AMeshBeaconHost");
static_assert(offsetof(AMeshBeaconHost, MaxConnections) == 0x000300, "Member 'AMeshBeaconHost::MaxConnections' has a wrong offset!");

// Class MeshNetwork.MeshReplicationGraphNode_AlwaysRelevant_ForConnection
// 0x0028 (0x0120 - 0x00F8)
class UMeshReplicationGraphNode_AlwaysRelevant_ForConnection final : public UReplicationGraphNode_ActorList
{
public:
	uint8                                         Pad_F8[0x18];                                      // 0x00F8(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAlwaysRelevantActorInfo>       PastRelevantActors;                                // 0x0110(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MeshReplicationGraphNode_AlwaysRelevant_ForConnection">();
	}
	static class UMeshReplicationGraphNode_AlwaysRelevant_ForConnection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMeshReplicationGraphNode_AlwaysRelevant_ForConnection>();
	}
};
static_assert(alignof(UMeshReplicationGraphNode_AlwaysRelevant_ForConnection) == 0x000008, "Wrong alignment on UMeshReplicationGraphNode_AlwaysRelevant_ForConnection");
static_assert(sizeof(UMeshReplicationGraphNode_AlwaysRelevant_ForConnection) == 0x000120, "Wrong size on UMeshReplicationGraphNode_AlwaysRelevant_ForConnection");
static_assert(offsetof(UMeshReplicationGraphNode_AlwaysRelevant_ForConnection, PastRelevantActors) == 0x000110, "Member 'UMeshReplicationGraphNode_AlwaysRelevant_ForConnection::PastRelevantActors' has a wrong offset!");

// Class MeshNetwork.MeshBeaconHostObject
// 0x0008 (0x0248 - 0x0240)
class AMeshBeaconHostObject : public AOnlineBeaconHostObject
{
public:
	uint8                                         Pad_240[0x8];                                      // 0x0240(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MeshBeaconHostObject">();
	}
	static class AMeshBeaconHostObject* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMeshBeaconHostObject>();
	}
};
static_assert(alignof(AMeshBeaconHostObject) == 0x000008, "Wrong alignment on AMeshBeaconHostObject");
static_assert(sizeof(AMeshBeaconHostObject) == 0x000248, "Wrong size on AMeshBeaconHostObject");

// Class MeshNetwork.MeshConnection
// 0x0000 (0x1A28 - 0x1A28)
class UMeshConnection final : public UIpConnection
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MeshConnection">();
	}
	static class UMeshConnection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMeshConnection>();
	}
};
static_assert(alignof(UMeshConnection) == 0x000008, "Wrong alignment on UMeshConnection");
static_assert(sizeof(UMeshConnection) == 0x001A28, "Wrong size on UMeshConnection");

// Class MeshNetwork.MeshNetDriver
// 0x0000 (0x0788 - 0x0788)
class UMeshNetDriver final : public UIpNetDriver
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MeshNetDriver">();
	}
	static class UMeshNetDriver* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMeshNetDriver>();
	}
};
static_assert(alignof(UMeshNetDriver) == 0x000008, "Wrong alignment on UMeshNetDriver");
static_assert(sizeof(UMeshNetDriver) == 0x000788, "Wrong size on UMeshNetDriver");

// Class MeshNetwork.MeshNetworkComponent
// 0x00A8 (0x0158 - 0x00B0)
class UMeshNetworkComponent final : public UActorComponent
{
public:
	EMeshNetworkRelevancy                         MeshRelevancy;                                     // 0x00B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, double>                     AggregationTimeouts;                               // 0x00B8(0x0050)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<class FName, struct FAggregatedFunction> AggregatedFunctions;                               // 0x0108(0x0050)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)

public:
	EMeshNetworkNodeType GetMeshNetworkNodeType() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MeshNetworkComponent">();
	}
	static class UMeshNetworkComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMeshNetworkComponent>();
	}
};
static_assert(alignof(UMeshNetworkComponent) == 0x000008, "Wrong alignment on UMeshNetworkComponent");
static_assert(sizeof(UMeshNetworkComponent) == 0x000158, "Wrong size on UMeshNetworkComponent");
static_assert(offsetof(UMeshNetworkComponent, MeshRelevancy) == 0x0000B0, "Member 'UMeshNetworkComponent::MeshRelevancy' has a wrong offset!");
static_assert(offsetof(UMeshNetworkComponent, AggregationTimeouts) == 0x0000B8, "Member 'UMeshNetworkComponent::AggregationTimeouts' has a wrong offset!");
static_assert(offsetof(UMeshNetworkComponent, AggregatedFunctions) == 0x000108, "Member 'UMeshNetworkComponent::AggregatedFunctions' has a wrong offset!");

// Class MeshNetwork.MeshNetworkSubsystem
// 0x00C8 (0x00F8 - 0x0030)
class UMeshNetworkSubsystem final : public UGameInstanceSubsystem
{
public:
	TMulticastInlineDelegate<void(EMeshNetworkNodeType NodeType)> OnMeshNodeTypeChanged;                             // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(bool bConnected)> OnConnectedToRootChanged;                          // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(EMeshNetworkNodeType NodeType)> OnGameServerNodeTypeChanged;                       // 0x0050(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnMeshMetaDataUpdated;                             // 0x0060(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_70[0x30];                                      // 0x0070(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	EMeshNetworkNodeType                          NodeType;                                          // 0x00A0(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EMeshNetworkNodeType                          GameServerNodeType;                                // 0x00A1(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bConnectedToRoot;                                  // 0x00A2(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bMetadataReceived;                                 // 0x00A3(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_A4[0x54];                                      // 0x00A4(0x0054)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void GetMetadata(struct FMeshMetaDataStruct& MetaData);
	bool GetMetaDataWithKey(class FName Key, struct FMeshMetaDataStruct& MetaData);
	void SetMetaData(const struct FMeshMetaDataStruct& MetaData);
	void SetMetaDataWithKey(class FName Key, const struct FMeshMetaDataStruct& MetaData);

	bool GetConnectedToRoot() const;
	EMeshNetworkNodeType GetGameServerNodeType() const;
	EMeshNetworkNodeType GetMeshNetworkNodeType() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MeshNetworkSubsystem">();
	}
	static class UMeshNetworkSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMeshNetworkSubsystem>();
	}
};
static_assert(alignof(UMeshNetworkSubsystem) == 0x000008, "Wrong alignment on UMeshNetworkSubsystem");
static_assert(sizeof(UMeshNetworkSubsystem) == 0x0000F8, "Wrong size on UMeshNetworkSubsystem");
static_assert(offsetof(UMeshNetworkSubsystem, OnMeshNodeTypeChanged) == 0x000030, "Member 'UMeshNetworkSubsystem::OnMeshNodeTypeChanged' has a wrong offset!");
static_assert(offsetof(UMeshNetworkSubsystem, OnConnectedToRootChanged) == 0x000040, "Member 'UMeshNetworkSubsystem::OnConnectedToRootChanged' has a wrong offset!");
static_assert(offsetof(UMeshNetworkSubsystem, OnGameServerNodeTypeChanged) == 0x000050, "Member 'UMeshNetworkSubsystem::OnGameServerNodeTypeChanged' has a wrong offset!");
static_assert(offsetof(UMeshNetworkSubsystem, OnMeshMetaDataUpdated) == 0x000060, "Member 'UMeshNetworkSubsystem::OnMeshMetaDataUpdated' has a wrong offset!");
static_assert(offsetof(UMeshNetworkSubsystem, NodeType) == 0x0000A0, "Member 'UMeshNetworkSubsystem::NodeType' has a wrong offset!");
static_assert(offsetof(UMeshNetworkSubsystem, GameServerNodeType) == 0x0000A1, "Member 'UMeshNetworkSubsystem::GameServerNodeType' has a wrong offset!");
static_assert(offsetof(UMeshNetworkSubsystem, bConnectedToRoot) == 0x0000A2, "Member 'UMeshNetworkSubsystem::bConnectedToRoot' has a wrong offset!");
static_assert(offsetof(UMeshNetworkSubsystem, bMetadataReceived) == 0x0000A3, "Member 'UMeshNetworkSubsystem::bMetadataReceived' has a wrong offset!");

// Class MeshNetwork.MeshReplicationGraph
// 0x0008 (0x04A0 - 0x0498)
class UMeshReplicationGraph : public UReplicationGraph
{
public:
	class UReplicationGraphNode_ActorList*        AlwaysRelevantNode;                                // 0x0498(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MeshReplicationGraph">();
	}
	static class UMeshReplicationGraph* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMeshReplicationGraph>();
	}
};
static_assert(alignof(UMeshReplicationGraph) == 0x000008, "Wrong alignment on UMeshReplicationGraph");
static_assert(sizeof(UMeshReplicationGraph) == 0x0004A0, "Wrong size on UMeshReplicationGraph");
static_assert(offsetof(UMeshReplicationGraph, AlwaysRelevantNode) == 0x000498, "Member 'UMeshReplicationGraph::AlwaysRelevantNode' has a wrong offset!");

}

