#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Trap_Wall_BouncePad

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "Engine_structs.hpp"
#include "FortniteGame_classes.hpp"
#include "GameplayAbilities_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass Trap_Wall_BouncePad.Trap_Wall_BouncePad_C
// 0x01F0 (0x0E70 - 0x0C80)
class ATrap_Wall_BouncePad_C final : public ABuildingTrapWall
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0C80(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UParticleSystemComponent*               BouncePadFX;                                       // 0x0C88(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Trigger;                                           // 0x0C90(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_BouncePad_Wall_Glow;                            // 0x0C98(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USoundCue*                              Trap_Active_Sound;                                 // 0x0CA0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundCue*                              Trap_Fire_Sound;                                   // 0x0CA8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundCue*                              Trap_Explode_Sound;                                // 0x0CB0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundCue*                              Place_Trap_Sound;                                  // 0x0CB8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundCue*                              Trap_Destroyed_Sound;                              // 0x0CC0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OverlappedActor;                                   // 0x0CC8(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	float                                         Player_DestructionRange;                           // 0x0CD0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           BouncePadTagMaxCount;                              // 0x0CD4(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_CDC[0x4];                                      // 0x0CDC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPlayerPawn*                        LaunchedPlayer;                                    // 0x0CE0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortAthenaVehicle*                     LaunchedVehicle;                                   // 0x0CE8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 GE_LowGravity;                                     // 0x0CF0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 GE_BounceTracker1;                                 // 0x0CF8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 GE_BounceTracker2;                                 // 0x0D00(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FScalableFloat                         PlayerMinLateralVelocity;                          // 0x0D08(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         PlayerVelocityMultiplier;                          // 0x0D28(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         PlayerMaxLateralVelocity;                          // 0x0D48(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         PlayerMinZVelocity;                                // 0x0D68(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         PlayerMaxZVelocity;                                // 0x0D88(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         VehicleVelocityMultiplier;                         // 0x0DA8(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         VehicleZVelocity;                                  // 0x0DC8(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         VehicleMinLateralVelocity;                         // 0x0DE8(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         VehicleMaxVelocity;                                // 0x0E08(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          IgnoreFallDamage;                                  // 0x0E28(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E29[0x7];                                      // 0x0E29(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 GE_NoFXLowGravity;                                 // 0x0E30(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FScalableFloat                         SetIgnoreFallDamage;                               // 0x0E38(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UClass*                                 GE_LowGravityWithHopRocks;                         // 0x0E58(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AEnemyPawn_Parent_C*                    DeimosPawn;                                        // 0x0E60(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bPlayFewerSounds;                                  // 0x0E68(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_Trap_Wall_BouncePad(int32 EntryPoint);
	void ReceiveBeginPlay();
	void ReceiveDestroyed();
	void GameplayCue_Abilities_Activation_Traps_ActivateTrap(EGameplayCueEvent EventType, const struct FGameplayCueParameters& Parameters);
	void OnFinishedBuilding();
	void OnPlaced();
	void UserConstructionScript();
	void PlayerLaunch(class AFortPlayerPawn* FortPlayerPawn, const struct FVector& InVec);
	void VehicleLaunch(TScriptInterface<class IFortVehicleInterface> VehicleInterface);
	void OnRep_Overlappedactor();
	void PlayerApplyGameplayEffects();
	void DeimosLaunch(class AEnemyPawn_Parent_C* DeimosPawn_0);
	void DeimosApplyGameplayEffects();
	void BP_OnTrigger(const TArray<class AActor*>& TouchingActors, bool* bOutConsumeEvent);
	void PhysicsObjectLaunch(class APhysicsObject* PhysicsObject);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Trap_Wall_BouncePad_C">();
	}
	static class ATrap_Wall_BouncePad_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ATrap_Wall_BouncePad_C>();
	}
};
static_assert(alignof(ATrap_Wall_BouncePad_C) == 0x000008, "Wrong alignment on ATrap_Wall_BouncePad_C");
static_assert(sizeof(ATrap_Wall_BouncePad_C) == 0x000E70, "Wrong size on ATrap_Wall_BouncePad_C");
static_assert(offsetof(ATrap_Wall_BouncePad_C, UberGraphFrame) == 0x000C80, "Member 'ATrap_Wall_BouncePad_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ATrap_Wall_BouncePad_C, BouncePadFX) == 0x000C88, "Member 'ATrap_Wall_BouncePad_C::BouncePadFX' has a wrong offset!");
static_assert(offsetof(ATrap_Wall_BouncePad_C, Trigger) == 0x000C90, "Member 'ATrap_Wall_BouncePad_C::Trigger' has a wrong offset!");
static_assert(offsetof(ATrap_Wall_BouncePad_C, SM_BouncePad_Wall_Glow) == 0x000C98, "Member 'ATrap_Wall_BouncePad_C::SM_BouncePad_Wall_Glow' has a wrong offset!");
static_assert(offsetof(ATrap_Wall_BouncePad_C, Trap_Active_Sound) == 0x000CA0, "Member 'ATrap_Wall_BouncePad_C::Trap_Active_Sound' has a wrong offset!");
static_assert(offsetof(ATrap_Wall_BouncePad_C, Trap_Fire_Sound) == 0x000CA8, "Member 'ATrap_Wall_BouncePad_C::Trap_Fire_Sound' has a wrong offset!");
static_assert(offsetof(ATrap_Wall_BouncePad_C, Trap_Explode_Sound) == 0x000CB0, "Member 'ATrap_Wall_BouncePad_C::Trap_Explode_Sound' has a wrong offset!");
static_assert(offsetof(ATrap_Wall_BouncePad_C, Place_Trap_Sound) == 0x000CB8, "Member 'ATrap_Wall_BouncePad_C::Place_Trap_Sound' has a wrong offset!");
static_assert(offsetof(ATrap_Wall_BouncePad_C, Trap_Destroyed_Sound) == 0x000CC0, "Member 'ATrap_Wall_BouncePad_C::Trap_Destroyed_Sound' has a wrong offset!");
static_assert(offsetof(ATrap_Wall_BouncePad_C, OverlappedActor) == 0x000CC8, "Member 'ATrap_Wall_BouncePad_C::OverlappedActor' has a wrong offset!");
static_assert(offsetof(ATrap_Wall_BouncePad_C, Player_DestructionRange) == 0x000CD0, "Member 'ATrap_Wall_BouncePad_C::Player_DestructionRange' has a wrong offset!");
static_assert(offsetof(ATrap_Wall_BouncePad_C, BouncePadTagMaxCount) == 0x000CD4, "Member 'ATrap_Wall_BouncePad_C::BouncePadTagMaxCount' has a wrong offset!");
static_assert(offsetof(ATrap_Wall_BouncePad_C, LaunchedPlayer) == 0x000CE0, "Member 'ATrap_Wall_BouncePad_C::LaunchedPlayer' has a wrong offset!");
static_assert(offsetof(ATrap_Wall_BouncePad_C, LaunchedVehicle) == 0x000CE8, "Member 'ATrap_Wall_BouncePad_C::LaunchedVehicle' has a wrong offset!");
static_assert(offsetof(ATrap_Wall_BouncePad_C, GE_LowGravity) == 0x000CF0, "Member 'ATrap_Wall_BouncePad_C::GE_LowGravity' has a wrong offset!");
static_assert(offsetof(ATrap_Wall_BouncePad_C, GE_BounceTracker1) == 0x000CF8, "Member 'ATrap_Wall_BouncePad_C::GE_BounceTracker1' has a wrong offset!");
static_assert(offsetof(ATrap_Wall_BouncePad_C, GE_BounceTracker2) == 0x000D00, "Member 'ATrap_Wall_BouncePad_C::GE_BounceTracker2' has a wrong offset!");
static_assert(offsetof(ATrap_Wall_BouncePad_C, PlayerMinLateralVelocity) == 0x000D08, "Member 'ATrap_Wall_BouncePad_C::PlayerMinLateralVelocity' has a wrong offset!");
static_assert(offsetof(ATrap_Wall_BouncePad_C, PlayerVelocityMultiplier) == 0x000D28, "Member 'ATrap_Wall_BouncePad_C::PlayerVelocityMultiplier' has a wrong offset!");
static_assert(offsetof(ATrap_Wall_BouncePad_C, PlayerMaxLateralVelocity) == 0x000D48, "Member 'ATrap_Wall_BouncePad_C::PlayerMaxLateralVelocity' has a wrong offset!");
static_assert(offsetof(ATrap_Wall_BouncePad_C, PlayerMinZVelocity) == 0x000D68, "Member 'ATrap_Wall_BouncePad_C::PlayerMinZVelocity' has a wrong offset!");
static_assert(offsetof(ATrap_Wall_BouncePad_C, PlayerMaxZVelocity) == 0x000D88, "Member 'ATrap_Wall_BouncePad_C::PlayerMaxZVelocity' has a wrong offset!");
static_assert(offsetof(ATrap_Wall_BouncePad_C, VehicleVelocityMultiplier) == 0x000DA8, "Member 'ATrap_Wall_BouncePad_C::VehicleVelocityMultiplier' has a wrong offset!");
static_assert(offsetof(ATrap_Wall_BouncePad_C, VehicleZVelocity) == 0x000DC8, "Member 'ATrap_Wall_BouncePad_C::VehicleZVelocity' has a wrong offset!");
static_assert(offsetof(ATrap_Wall_BouncePad_C, VehicleMinLateralVelocity) == 0x000DE8, "Member 'ATrap_Wall_BouncePad_C::VehicleMinLateralVelocity' has a wrong offset!");
static_assert(offsetof(ATrap_Wall_BouncePad_C, VehicleMaxVelocity) == 0x000E08, "Member 'ATrap_Wall_BouncePad_C::VehicleMaxVelocity' has a wrong offset!");
static_assert(offsetof(ATrap_Wall_BouncePad_C, IgnoreFallDamage) == 0x000E28, "Member 'ATrap_Wall_BouncePad_C::IgnoreFallDamage' has a wrong offset!");
static_assert(offsetof(ATrap_Wall_BouncePad_C, GE_NoFXLowGravity) == 0x000E30, "Member 'ATrap_Wall_BouncePad_C::GE_NoFXLowGravity' has a wrong offset!");
static_assert(offsetof(ATrap_Wall_BouncePad_C, SetIgnoreFallDamage) == 0x000E38, "Member 'ATrap_Wall_BouncePad_C::SetIgnoreFallDamage' has a wrong offset!");
static_assert(offsetof(ATrap_Wall_BouncePad_C, GE_LowGravityWithHopRocks) == 0x000E58, "Member 'ATrap_Wall_BouncePad_C::GE_LowGravityWithHopRocks' has a wrong offset!");
static_assert(offsetof(ATrap_Wall_BouncePad_C, DeimosPawn) == 0x000E60, "Member 'ATrap_Wall_BouncePad_C::DeimosPawn' has a wrong offset!");
static_assert(offsetof(ATrap_Wall_BouncePad_C, bPlayFewerSounds) == 0x000E68, "Member 'ATrap_Wall_BouncePad_C::bPlayFewerSounds' has a wrong offset!");

}

