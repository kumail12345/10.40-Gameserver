#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Creative_Billboard

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BP_Creative_Billboard.BP_Creative_Billboard_C.ExecuteUbergraph_BP_Creative_Billboard
// 0x0018 (0x0018 - 0x0000)
struct BP_Creative_Billboard_C_ExecuteUbergraph_BP_Creative_Billboard final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EFortMinigameState                            K2Node_ComponentBoundEvent_NewMinigameState;       // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            K2Node_ComponentBoundEvent_TriggerInstigator_1;    // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AController*                            K2Node_ComponentBoundEvent_TriggerInstigator;      // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Creative_Billboard_C_ExecuteUbergraph_BP_Creative_Billboard) == 0x000008, "Wrong alignment on BP_Creative_Billboard_C_ExecuteUbergraph_BP_Creative_Billboard");
static_assert(sizeof(BP_Creative_Billboard_C_ExecuteUbergraph_BP_Creative_Billboard) == 0x000018, "Wrong size on BP_Creative_Billboard_C_ExecuteUbergraph_BP_Creative_Billboard");
static_assert(offsetof(BP_Creative_Billboard_C_ExecuteUbergraph_BP_Creative_Billboard, EntryPoint) == 0x000000, "Member 'BP_Creative_Billboard_C_ExecuteUbergraph_BP_Creative_Billboard::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_Creative_Billboard_C_ExecuteUbergraph_BP_Creative_Billboard, K2Node_ComponentBoundEvent_NewMinigameState) == 0x000004, "Member 'BP_Creative_Billboard_C_ExecuteUbergraph_BP_Creative_Billboard::K2Node_ComponentBoundEvent_NewMinigameState' has a wrong offset!");
static_assert(offsetof(BP_Creative_Billboard_C_ExecuteUbergraph_BP_Creative_Billboard, K2Node_ComponentBoundEvent_TriggerInstigator_1) == 0x000008, "Member 'BP_Creative_Billboard_C_ExecuteUbergraph_BP_Creative_Billboard::K2Node_ComponentBoundEvent_TriggerInstigator_1' has a wrong offset!");
static_assert(offsetof(BP_Creative_Billboard_C_ExecuteUbergraph_BP_Creative_Billboard, K2Node_ComponentBoundEvent_TriggerInstigator) == 0x000010, "Member 'BP_Creative_Billboard_C_ExecuteUbergraph_BP_Creative_Billboard::K2Node_ComponentBoundEvent_TriggerInstigator' has a wrong offset!");

// Function BP_Creative_Billboard.BP_Creative_Billboard_C.BndEvt__FortMinigameLogic_K2Node_ComponentBoundEvent_4_OnMinigameStateChanged__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct BP_Creative_Billboard_C_BndEvt__FortMinigameLogic_K2Node_ComponentBoundEvent_4_OnMinigameStateChanged__DelegateSignature final
{
public:
	EFortMinigameState                            NewMinigameState;                                  // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Creative_Billboard_C_BndEvt__FortMinigameLogic_K2Node_ComponentBoundEvent_4_OnMinigameStateChanged__DelegateSignature) == 0x000001, "Wrong alignment on BP_Creative_Billboard_C_BndEvt__FortMinigameLogic_K2Node_ComponentBoundEvent_4_OnMinigameStateChanged__DelegateSignature");
static_assert(sizeof(BP_Creative_Billboard_C_BndEvt__FortMinigameLogic_K2Node_ComponentBoundEvent_4_OnMinigameStateChanged__DelegateSignature) == 0x000001, "Wrong size on BP_Creative_Billboard_C_BndEvt__FortMinigameLogic_K2Node_ComponentBoundEvent_4_OnMinigameStateChanged__DelegateSignature");
static_assert(offsetof(BP_Creative_Billboard_C_BndEvt__FortMinigameLogic_K2Node_ComponentBoundEvent_4_OnMinigameStateChanged__DelegateSignature, NewMinigameState) == 0x000000, "Member 'BP_Creative_Billboard_C_BndEvt__FortMinigameLogic_K2Node_ComponentBoundEvent_4_OnMinigameStateChanged__DelegateSignature::NewMinigameState' has a wrong offset!");

// Function BP_Creative_Billboard.BP_Creative_Billboard_C.BndEvt__HideTextReceiverComponent_K2Node_ComponentBoundEvent_3_OnGameplayMessageReceived__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct BP_Creative_Billboard_C_BndEvt__HideTextReceiverComponent_K2Node_ComponentBoundEvent_3_OnGameplayMessageReceived__DelegateSignature final
{
public:
	class AController*                            TriggerInstigator;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Creative_Billboard_C_BndEvt__HideTextReceiverComponent_K2Node_ComponentBoundEvent_3_OnGameplayMessageReceived__DelegateSignature) == 0x000008, "Wrong alignment on BP_Creative_Billboard_C_BndEvt__HideTextReceiverComponent_K2Node_ComponentBoundEvent_3_OnGameplayMessageReceived__DelegateSignature");
static_assert(sizeof(BP_Creative_Billboard_C_BndEvt__HideTextReceiverComponent_K2Node_ComponentBoundEvent_3_OnGameplayMessageReceived__DelegateSignature) == 0x000008, "Wrong size on BP_Creative_Billboard_C_BndEvt__HideTextReceiverComponent_K2Node_ComponentBoundEvent_3_OnGameplayMessageReceived__DelegateSignature");
static_assert(offsetof(BP_Creative_Billboard_C_BndEvt__HideTextReceiverComponent_K2Node_ComponentBoundEvent_3_OnGameplayMessageReceived__DelegateSignature, TriggerInstigator) == 0x000000, "Member 'BP_Creative_Billboard_C_BndEvt__HideTextReceiverComponent_K2Node_ComponentBoundEvent_3_OnGameplayMessageReceived__DelegateSignature::TriggerInstigator' has a wrong offset!");

// Function BP_Creative_Billboard.BP_Creative_Billboard_C.BndEvt__ShowTextReceiverComponent_K2Node_ComponentBoundEvent_2_OnGameplayMessageReceived__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct BP_Creative_Billboard_C_BndEvt__ShowTextReceiverComponent_K2Node_ComponentBoundEvent_2_OnGameplayMessageReceived__DelegateSignature final
{
public:
	class AController*                            TriggerInstigator;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Creative_Billboard_C_BndEvt__ShowTextReceiverComponent_K2Node_ComponentBoundEvent_2_OnGameplayMessageReceived__DelegateSignature) == 0x000008, "Wrong alignment on BP_Creative_Billboard_C_BndEvt__ShowTextReceiverComponent_K2Node_ComponentBoundEvent_2_OnGameplayMessageReceived__DelegateSignature");
static_assert(sizeof(BP_Creative_Billboard_C_BndEvt__ShowTextReceiverComponent_K2Node_ComponentBoundEvent_2_OnGameplayMessageReceived__DelegateSignature) == 0x000008, "Wrong size on BP_Creative_Billboard_C_BndEvt__ShowTextReceiverComponent_K2Node_ComponentBoundEvent_2_OnGameplayMessageReceived__DelegateSignature");
static_assert(offsetof(BP_Creative_Billboard_C_BndEvt__ShowTextReceiverComponent_K2Node_ComponentBoundEvent_2_OnGameplayMessageReceived__DelegateSignature, TriggerInstigator) == 0x000000, "Member 'BP_Creative_Billboard_C_BndEvt__ShowTextReceiverComponent_K2Node_ComponentBoundEvent_2_OnGameplayMessageReceived__DelegateSignature::TriggerInstigator' has a wrong offset!");

// Function BP_Creative_Billboard.BP_Creative_Billboard_C.SetBackgroundColor
// 0x0030 (0x0030 - 0x0000)
struct BP_Creative_Billboard_C_SetBackgroundColor final
{
public:
	class UUserWidget*                            CallFunc_GetUserWidgetObject_ReturnValue;          // 0x0000(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCreative_Background_Widget_C*          K2Node_DynamicCast_AsCreative_Background_Widget;   // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUserWidget*                            CallFunc_GetUserWidgetObject_ReturnValue_1;        // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCreative_Background_Widget_C*          K2Node_DynamicCast_AsCreative_Background_Widget_1; // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Creative_Billboard_C_SetBackgroundColor) == 0x000008, "Wrong alignment on BP_Creative_Billboard_C_SetBackgroundColor");
static_assert(sizeof(BP_Creative_Billboard_C_SetBackgroundColor) == 0x000030, "Wrong size on BP_Creative_Billboard_C_SetBackgroundColor");
static_assert(offsetof(BP_Creative_Billboard_C_SetBackgroundColor, CallFunc_GetUserWidgetObject_ReturnValue) == 0x000000, "Member 'BP_Creative_Billboard_C_SetBackgroundColor::CallFunc_GetUserWidgetObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Creative_Billboard_C_SetBackgroundColor, K2Node_DynamicCast_AsCreative_Background_Widget) == 0x000008, "Member 'BP_Creative_Billboard_C_SetBackgroundColor::K2Node_DynamicCast_AsCreative_Background_Widget' has a wrong offset!");
static_assert(offsetof(BP_Creative_Billboard_C_SetBackgroundColor, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'BP_Creative_Billboard_C_SetBackgroundColor::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_Creative_Billboard_C_SetBackgroundColor, CallFunc_GetUserWidgetObject_ReturnValue_1) == 0x000018, "Member 'BP_Creative_Billboard_C_SetBackgroundColor::CallFunc_GetUserWidgetObject_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Creative_Billboard_C_SetBackgroundColor, K2Node_DynamicCast_AsCreative_Background_Widget_1) == 0x000020, "Member 'BP_Creative_Billboard_C_SetBackgroundColor::K2Node_DynamicCast_AsCreative_Background_Widget_1' has a wrong offset!");
static_assert(offsetof(BP_Creative_Billboard_C_SetBackgroundColor, K2Node_DynamicCast_bSuccess_1) == 0x000028, "Member 'BP_Creative_Billboard_C_SetBackgroundColor::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");

// Function BP_Creative_Billboard.BP_Creative_Billboard_C.SetDisplayText
// 0x0018 (0x0018 - 0x0000)
struct BP_Creative_Billboard_C_SetDisplayText final
{
public:
	class UUserWidget*                            CallFunc_GetUserWidgetObject_ReturnValue;          // 0x0000(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCreative_Background_Widget_C*          K2Node_DynamicCast_AsCreative_Background_Widget;   // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Creative_Billboard_C_SetDisplayText) == 0x000008, "Wrong alignment on BP_Creative_Billboard_C_SetDisplayText");
static_assert(sizeof(BP_Creative_Billboard_C_SetDisplayText) == 0x000018, "Wrong size on BP_Creative_Billboard_C_SetDisplayText");
static_assert(offsetof(BP_Creative_Billboard_C_SetDisplayText, CallFunc_GetUserWidgetObject_ReturnValue) == 0x000000, "Member 'BP_Creative_Billboard_C_SetDisplayText::CallFunc_GetUserWidgetObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Creative_Billboard_C_SetDisplayText, K2Node_DynamicCast_AsCreative_Background_Widget) == 0x000008, "Member 'BP_Creative_Billboard_C_SetDisplayText::K2Node_DynamicCast_AsCreative_Background_Widget' has a wrong offset!");
static_assert(offsetof(BP_Creative_Billboard_C_SetDisplayText, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'BP_Creative_Billboard_C_SetDisplayText::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BP_Creative_Billboard.BP_Creative_Billboard_C.SetTextSize
// 0x0018 (0x0018 - 0x0000)
struct BP_Creative_Billboard_C_SetTextSize final
{
public:
	class UUserWidget*                            CallFunc_GetUserWidgetObject_ReturnValue;          // 0x0000(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCreative_Background_Widget_C*          K2Node_DynamicCast_AsCreative_Background_Widget;   // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Creative_Billboard_C_SetTextSize) == 0x000008, "Wrong alignment on BP_Creative_Billboard_C_SetTextSize");
static_assert(sizeof(BP_Creative_Billboard_C_SetTextSize) == 0x000018, "Wrong size on BP_Creative_Billboard_C_SetTextSize");
static_assert(offsetof(BP_Creative_Billboard_C_SetTextSize, CallFunc_GetUserWidgetObject_ReturnValue) == 0x000000, "Member 'BP_Creative_Billboard_C_SetTextSize::CallFunc_GetUserWidgetObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Creative_Billboard_C_SetTextSize, K2Node_DynamicCast_AsCreative_Background_Widget) == 0x000008, "Member 'BP_Creative_Billboard_C_SetTextSize::K2Node_DynamicCast_AsCreative_Background_Widget' has a wrong offset!");
static_assert(offsetof(BP_Creative_Billboard_C_SetTextSize, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'BP_Creative_Billboard_C_SetTextSize::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BP_Creative_Billboard.BP_Creative_Billboard_C.ShowBorder
// 0x0120 (0x0120 - 0x0000)
struct BP_Creative_Billboard_C_ShowBorder final
{
public:
	ECollisionEnabled                             CollisionSetting;                                  // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               K2Node_Select_Default;                             // 0x0004(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_SetRelativeRotation_SweepHitResult;    // 0x0010(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x00A0(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x00E0(0x0010)(ZeroConstructor, ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x00F0(0x0018)()
	class FString                                 CallFunc_Conv_TextToString_ReturnValue;            // 0x0108(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0118(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Creative_Billboard_C_ShowBorder) == 0x000008, "Wrong alignment on BP_Creative_Billboard_C_ShowBorder");
static_assert(sizeof(BP_Creative_Billboard_C_ShowBorder) == 0x000120, "Wrong size on BP_Creative_Billboard_C_ShowBorder");
static_assert(offsetof(BP_Creative_Billboard_C_ShowBorder, CollisionSetting) == 0x000000, "Member 'BP_Creative_Billboard_C_ShowBorder::CollisionSetting' has a wrong offset!");
static_assert(offsetof(BP_Creative_Billboard_C_ShowBorder, Temp_bool_Variable) == 0x000001, "Member 'BP_Creative_Billboard_C_ShowBorder::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_Creative_Billboard_C_ShowBorder, K2Node_Select_Default) == 0x000004, "Member 'BP_Creative_Billboard_C_ShowBorder::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_Creative_Billboard_C_ShowBorder, CallFunc_K2_SetRelativeRotation_SweepHitResult) == 0x000010, "Member 'BP_Creative_Billboard_C_ShowBorder::CallFunc_K2_SetRelativeRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_Creative_Billboard_C_ShowBorder, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000098, "Member 'BP_Creative_Billboard_C_ShowBorder::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Creative_Billboard_C_ShowBorder, K2Node_MakeStruct_FormatArgumentData) == 0x0000A0, "Member 'BP_Creative_Billboard_C_ShowBorder::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(BP_Creative_Billboard_C_ShowBorder, K2Node_MakeArray_Array) == 0x0000E0, "Member 'BP_Creative_Billboard_C_ShowBorder::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_Creative_Billboard_C_ShowBorder, CallFunc_Format_ReturnValue) == 0x0000F0, "Member 'BP_Creative_Billboard_C_ShowBorder::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Creative_Billboard_C_ShowBorder, CallFunc_Conv_TextToString_ReturnValue) == 0x000108, "Member 'BP_Creative_Billboard_C_ShowBorder::CallFunc_Conv_TextToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Creative_Billboard_C_ShowBorder, CallFunc_Not_PreBool_ReturnValue) == 0x000118, "Member 'BP_Creative_Billboard_C_ShowBorder::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function BP_Creative_Billboard.BP_Creative_Billboard_C.SetTextAlignment
// 0x0018 (0x0018 - 0x0000)
struct BP_Creative_Billboard_C_SetTextAlignment final
{
public:
	class UUserWidget*                            CallFunc_GetUserWidgetObject_ReturnValue;          // 0x0000(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCreative_Background_Widget_C*          K2Node_DynamicCast_AsCreative_Background_Widget;   // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Creative_Billboard_C_SetTextAlignment) == 0x000008, "Wrong alignment on BP_Creative_Billboard_C_SetTextAlignment");
static_assert(sizeof(BP_Creative_Billboard_C_SetTextAlignment) == 0x000018, "Wrong size on BP_Creative_Billboard_C_SetTextAlignment");
static_assert(offsetof(BP_Creative_Billboard_C_SetTextAlignment, CallFunc_GetUserWidgetObject_ReturnValue) == 0x000000, "Member 'BP_Creative_Billboard_C_SetTextAlignment::CallFunc_GetUserWidgetObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Creative_Billboard_C_SetTextAlignment, K2Node_DynamicCast_AsCreative_Background_Widget) == 0x000008, "Member 'BP_Creative_Billboard_C_SetTextAlignment::K2Node_DynamicCast_AsCreative_Background_Widget' has a wrong offset!");
static_assert(offsetof(BP_Creative_Billboard_C_SetTextAlignment, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'BP_Creative_Billboard_C_SetTextAlignment::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BP_Creative_Billboard.BP_Creative_Billboard_C.UpdateProperties
// 0x0288 (0x0288 - 0x0000)
struct BP_Creative_Billboard_C_UpdateProperties final
{
public:
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0008(0x0040)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_1;            // 0x0048(0x0040)(HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_ColorToText_ReturnValue;             // 0x0088(0x0018)()
	class FString                                 CallFunc_Conv_ByteToString_ReturnValue;            // 0x00A0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_2;            // 0x00B0(0x0040)(HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_StringToText_ReturnValue;            // 0x00F0(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_3;            // 0x0108(0x0040)(HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_ColorToText_ReturnValue_1;           // 0x0148(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_4;            // 0x0160(0x0040)(HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_BoolToText_ReturnValue;              // 0x01A0(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_5;            // 0x01B8(0x0040)(HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_StringToText_ReturnValue_1;          // 0x01F8(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_6;            // 0x0210(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0250(0x0010)(ZeroConstructor, ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0260(0x0018)()
	class FString                                 CallFunc_Conv_TextToString_ReturnValue;            // 0x0278(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Creative_Billboard_C_UpdateProperties) == 0x000008, "Wrong alignment on BP_Creative_Billboard_C_UpdateProperties");
static_assert(sizeof(BP_Creative_Billboard_C_UpdateProperties) == 0x000288, "Wrong size on BP_Creative_Billboard_C_UpdateProperties");
static_assert(offsetof(BP_Creative_Billboard_C_UpdateProperties, CallFunc_IsDedicatedServer_ReturnValue) == 0x000000, "Member 'BP_Creative_Billboard_C_UpdateProperties::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Creative_Billboard_C_UpdateProperties, CallFunc_IsValid_ReturnValue) == 0x000001, "Member 'BP_Creative_Billboard_C_UpdateProperties::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Creative_Billboard_C_UpdateProperties, K2Node_MakeStruct_FormatArgumentData) == 0x000008, "Member 'BP_Creative_Billboard_C_UpdateProperties::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(BP_Creative_Billboard_C_UpdateProperties, K2Node_MakeStruct_FormatArgumentData_1) == 0x000048, "Member 'BP_Creative_Billboard_C_UpdateProperties::K2Node_MakeStruct_FormatArgumentData_1' has a wrong offset!");
static_assert(offsetof(BP_Creative_Billboard_C_UpdateProperties, CallFunc_Conv_ColorToText_ReturnValue) == 0x000088, "Member 'BP_Creative_Billboard_C_UpdateProperties::CallFunc_Conv_ColorToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Creative_Billboard_C_UpdateProperties, CallFunc_Conv_ByteToString_ReturnValue) == 0x0000A0, "Member 'BP_Creative_Billboard_C_UpdateProperties::CallFunc_Conv_ByteToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Creative_Billboard_C_UpdateProperties, K2Node_MakeStruct_FormatArgumentData_2) == 0x0000B0, "Member 'BP_Creative_Billboard_C_UpdateProperties::K2Node_MakeStruct_FormatArgumentData_2' has a wrong offset!");
static_assert(offsetof(BP_Creative_Billboard_C_UpdateProperties, CallFunc_Conv_StringToText_ReturnValue) == 0x0000F0, "Member 'BP_Creative_Billboard_C_UpdateProperties::CallFunc_Conv_StringToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Creative_Billboard_C_UpdateProperties, K2Node_MakeStruct_FormatArgumentData_3) == 0x000108, "Member 'BP_Creative_Billboard_C_UpdateProperties::K2Node_MakeStruct_FormatArgumentData_3' has a wrong offset!");
static_assert(offsetof(BP_Creative_Billboard_C_UpdateProperties, CallFunc_Conv_ColorToText_ReturnValue_1) == 0x000148, "Member 'BP_Creative_Billboard_C_UpdateProperties::CallFunc_Conv_ColorToText_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Creative_Billboard_C_UpdateProperties, K2Node_MakeStruct_FormatArgumentData_4) == 0x000160, "Member 'BP_Creative_Billboard_C_UpdateProperties::K2Node_MakeStruct_FormatArgumentData_4' has a wrong offset!");
static_assert(offsetof(BP_Creative_Billboard_C_UpdateProperties, CallFunc_Conv_BoolToText_ReturnValue) == 0x0001A0, "Member 'BP_Creative_Billboard_C_UpdateProperties::CallFunc_Conv_BoolToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Creative_Billboard_C_UpdateProperties, K2Node_MakeStruct_FormatArgumentData_5) == 0x0001B8, "Member 'BP_Creative_Billboard_C_UpdateProperties::K2Node_MakeStruct_FormatArgumentData_5' has a wrong offset!");
static_assert(offsetof(BP_Creative_Billboard_C_UpdateProperties, CallFunc_Conv_StringToText_ReturnValue_1) == 0x0001F8, "Member 'BP_Creative_Billboard_C_UpdateProperties::CallFunc_Conv_StringToText_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Creative_Billboard_C_UpdateProperties, K2Node_MakeStruct_FormatArgumentData_6) == 0x000210, "Member 'BP_Creative_Billboard_C_UpdateProperties::K2Node_MakeStruct_FormatArgumentData_6' has a wrong offset!");
static_assert(offsetof(BP_Creative_Billboard_C_UpdateProperties, K2Node_MakeArray_Array) == 0x000250, "Member 'BP_Creative_Billboard_C_UpdateProperties::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_Creative_Billboard_C_UpdateProperties, CallFunc_Format_ReturnValue) == 0x000260, "Member 'BP_Creative_Billboard_C_UpdateProperties::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Creative_Billboard_C_UpdateProperties, CallFunc_Conv_TextToString_ReturnValue) == 0x000278, "Member 'BP_Creative_Billboard_C_UpdateProperties::CallFunc_Conv_TextToString_ReturnValue' has a wrong offset!");

// Function BP_Creative_Billboard.BP_Creative_Billboard_C.SetTextColor
// 0x0018 (0x0018 - 0x0000)
struct BP_Creative_Billboard_C_SetTextColor final
{
public:
	class UUserWidget*                            CallFunc_GetUserWidgetObject_ReturnValue;          // 0x0000(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCreative_Background_Widget_C*          K2Node_DynamicCast_AsCreative_Background_Widget;   // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Creative_Billboard_C_SetTextColor) == 0x000008, "Wrong alignment on BP_Creative_Billboard_C_SetTextColor");
static_assert(sizeof(BP_Creative_Billboard_C_SetTextColor) == 0x000018, "Wrong size on BP_Creative_Billboard_C_SetTextColor");
static_assert(offsetof(BP_Creative_Billboard_C_SetTextColor, CallFunc_GetUserWidgetObject_ReturnValue) == 0x000000, "Member 'BP_Creative_Billboard_C_SetTextColor::CallFunc_GetUserWidgetObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Creative_Billboard_C_SetTextColor, K2Node_DynamicCast_AsCreative_Background_Widget) == 0x000008, "Member 'BP_Creative_Billboard_C_SetTextColor::K2Node_DynamicCast_AsCreative_Background_Widget' has a wrong offset!");
static_assert(offsetof(BP_Creative_Billboard_C_SetTextColor, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'BP_Creative_Billboard_C_SetTextColor::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BP_Creative_Billboard.BP_Creative_Billboard_C.SetViewDistance
// 0x0008 (0x0008 - 0x0000)
struct BP_Creative_Billboard_C_SetViewDistance final
{
public:
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Creative_Billboard_C_SetViewDistance) == 0x000004, "Wrong alignment on BP_Creative_Billboard_C_SetViewDistance");
static_assert(sizeof(BP_Creative_Billboard_C_SetViewDistance) == 0x000008, "Wrong size on BP_Creative_Billboard_C_SetViewDistance");
static_assert(offsetof(BP_Creative_Billboard_C_SetViewDistance, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000000, "Member 'BP_Creative_Billboard_C_SetViewDistance::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Creative_Billboard_C_SetViewDistance, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000004, "Member 'BP_Creative_Billboard_C_SetViewDistance::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");

// Function BP_Creative_Billboard.BP_Creative_Billboard_C.SetTextVisibility
// 0x0020 (0x0020 - 0x0000)
struct BP_Creative_Billboard_C_SetTextVisibility final
{
public:
	bool                                          Visible;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUserWidget*                            CallFunc_GetUserWidgetObject_ReturnValue;          // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCreative_Background_Widget_C*          K2Node_DynamicCast_AsCreative_Background_Widget;   // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Creative_Billboard_C_SetTextVisibility) == 0x000008, "Wrong alignment on BP_Creative_Billboard_C_SetTextVisibility");
static_assert(sizeof(BP_Creative_Billboard_C_SetTextVisibility) == 0x000020, "Wrong size on BP_Creative_Billboard_C_SetTextVisibility");
static_assert(offsetof(BP_Creative_Billboard_C_SetTextVisibility, Visible) == 0x000000, "Member 'BP_Creative_Billboard_C_SetTextVisibility::Visible' has a wrong offset!");
static_assert(offsetof(BP_Creative_Billboard_C_SetTextVisibility, CallFunc_GetUserWidgetObject_ReturnValue) == 0x000008, "Member 'BP_Creative_Billboard_C_SetTextVisibility::CallFunc_GetUserWidgetObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Creative_Billboard_C_SetTextVisibility, K2Node_DynamicCast_AsCreative_Background_Widget) == 0x000010, "Member 'BP_Creative_Billboard_C_SetTextVisibility::K2Node_DynamicCast_AsCreative_Background_Widget' has a wrong offset!");
static_assert(offsetof(BP_Creative_Billboard_C_SetTextVisibility, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BP_Creative_Billboard_C_SetTextVisibility::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BP_Creative_Billboard.BP_Creative_Billboard_C.SetVisibilityBasedOnState
// 0x0006 (0x0006 - 0x0000)
struct BP_Creative_Billboard_C_SetVisibilityBasedOnState final
{
public:
	EFortMinigameState                            MinigameState;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EFortMinigameState                            CachedMinigameState;                               // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_1;          // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchInteger_CmpSuccess;                   // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Creative_Billboard_C_SetVisibilityBasedOnState) == 0x000001, "Wrong alignment on BP_Creative_Billboard_C_SetVisibilityBasedOnState");
static_assert(sizeof(BP_Creative_Billboard_C_SetVisibilityBasedOnState) == 0x000006, "Wrong size on BP_Creative_Billboard_C_SetVisibilityBasedOnState");
static_assert(offsetof(BP_Creative_Billboard_C_SetVisibilityBasedOnState, MinigameState) == 0x000000, "Member 'BP_Creative_Billboard_C_SetVisibilityBasedOnState::MinigameState' has a wrong offset!");
static_assert(offsetof(BP_Creative_Billboard_C_SetVisibilityBasedOnState, CachedMinigameState) == 0x000001, "Member 'BP_Creative_Billboard_C_SetVisibilityBasedOnState::CachedMinigameState' has a wrong offset!");
static_assert(offsetof(BP_Creative_Billboard_C_SetVisibilityBasedOnState, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000002, "Member 'BP_Creative_Billboard_C_SetVisibilityBasedOnState::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Creative_Billboard_C_SetVisibilityBasedOnState, CallFunc_NotEqual_ByteByte_ReturnValue_1) == 0x000003, "Member 'BP_Creative_Billboard_C_SetVisibilityBasedOnState::CallFunc_NotEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Creative_Billboard_C_SetVisibilityBasedOnState, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000004, "Member 'BP_Creative_Billboard_C_SetVisibilityBasedOnState::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Creative_Billboard_C_SetVisibilityBasedOnState, K2Node_SwitchInteger_CmpSuccess) == 0x000005, "Member 'BP_Creative_Billboard_C_SetVisibilityBasedOnState::K2Node_SwitchInteger_CmpSuccess' has a wrong offset!");

// Function BP_Creative_Billboard.BP_Creative_Billboard_C.SetTextFont
// 0x0018 (0x0018 - 0x0000)
struct BP_Creative_Billboard_C_SetTextFont final
{
public:
	class UUserWidget*                            CallFunc_GetUserWidgetObject_ReturnValue;          // 0x0000(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCreative_Background_Widget_C*          K2Node_DynamicCast_AsCreative_Background_Widget;   // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Creative_Billboard_C_SetTextFont) == 0x000008, "Wrong alignment on BP_Creative_Billboard_C_SetTextFont");
static_assert(sizeof(BP_Creative_Billboard_C_SetTextFont) == 0x000018, "Wrong size on BP_Creative_Billboard_C_SetTextFont");
static_assert(offsetof(BP_Creative_Billboard_C_SetTextFont, CallFunc_GetUserWidgetObject_ReturnValue) == 0x000000, "Member 'BP_Creative_Billboard_C_SetTextFont::CallFunc_GetUserWidgetObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Creative_Billboard_C_SetTextFont, K2Node_DynamicCast_AsCreative_Background_Widget) == 0x000008, "Member 'BP_Creative_Billboard_C_SetTextFont::K2Node_DynamicCast_AsCreative_Background_Widget' has a wrong offset!");
static_assert(offsetof(BP_Creative_Billboard_C_SetTextFont, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'BP_Creative_Billboard_C_SetTextFont::K2Node_DynamicCast_bSuccess' has a wrong offset!");

}

