#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TestMechVehicle

#include "Basic.hpp"

#include "TestMechVehicle_classes.hpp"
#include "TestMechVehicle_parameters.hpp"


namespace SDK
{

// Function TestMechVehicle.TestMechVehicle_C.ExecuteUbergraph_TestMechVehicle
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ATestMechVehicle_C::ExecuteUbergraph_TestMechVehicle(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TestMechVehicle_C", "ExecuteUbergraph_TestMechVehicle");

	Params::TestMechVehicle_C_ExecuteUbergraph_TestMechVehicle Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TestMechVehicle.TestMechVehicle_C.EventOnHealthChanged
// (BlueprintCallable, BlueprintEvent)

void ATestMechVehicle_C::EventOnHealthChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TestMechVehicle_C", "EventOnHealthChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TestMechVehicle.TestMechVehicle_C.OnLoadingRockets
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    bStarting                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ATestMechVehicle_C::OnLoadingRockets(bool bStarting)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TestMechVehicle_C", "OnLoadingRockets");

	Params::TestMechVehicle_C_OnLoadingRockets Parms{};

	Parms.bStarting = bStarting;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TestMechVehicle.TestMechVehicle_C.K2_ApplyCosmeticWrap
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UAthenaItemWrapDefinition*        LoadedWrap                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ATestMechVehicle_C::K2_ApplyCosmeticWrap(const class UAthenaItemWrapDefinition* LoadedWrap)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TestMechVehicle_C", "K2_ApplyCosmeticWrap");

	Params::TestMechVehicle_C_K2_ApplyCosmeticWrap Parms{};

	Parms.LoadedWrap = LoadedWrap;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TestMechVehicle.TestMechVehicle_C.PulseSoundIndicator
// (BlueprintCallable, BlueprintEvent)

void ATestMechVehicle_C::PulseSoundIndicator()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TestMechVehicle_C", "PulseSoundIndicator");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TestMechVehicle.TestMechVehicle_C.GunnerShieldTakeDamage
// (Event, Protected, BlueprintEvent)
// Parameters:
// float                                   Damage                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ATestMechVehicle_C::GunnerShieldTakeDamage(float Damage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TestMechVehicle_C", "GunnerShieldTakeDamage");

	Params::TestMechVehicle_C_GunnerShieldTakeDamage Parms{};

	Parms.Damage = Damage;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TestMechVehicle.TestMechVehicle_C.OnFailedShieldBoost
// (Event, Protected, BlueprintEvent)

void ATestMechVehicle_C::OnFailedShieldBoost()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TestMechVehicle_C", "OnFailedShieldBoost");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TestMechVehicle.TestMechVehicle_C.OnPressShieldBoost
// (Event, Public, BlueprintEvent)

void ATestMechVehicle_C::OnPressShieldBoost()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TestMechVehicle_C", "OnPressShieldBoost");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TestMechVehicle.TestMechVehicle_C.EventOverchargeShieldActivated
// (BlueprintCallable, BlueprintEvent)

void ATestMechVehicle_C::EventOverchargeShieldActivated()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TestMechVehicle_C", "EventOverchargeShieldActivated");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TestMechVehicle.TestMechVehicle_C.On Audio Tick
// (BlueprintCallable, BlueprintEvent)

void ATestMechVehicle_C::On_Audio_Tick()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TestMechVehicle_C", "On Audio Tick");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TestMechVehicle.TestMechVehicle_C.On Mech Footstep
// (BlueprintCallable, BlueprintEvent)

void ATestMechVehicle_C::On_Mech_Footstep()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TestMechVehicle_C", "On Mech Footstep");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TestMechVehicle.TestMechVehicle_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ATestMechVehicle_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TestMechVehicle_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TestMechVehicle.TestMechVehicle_C.LightningSpark
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             EventName                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   EmitterTime                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Velocity                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ATestMechVehicle_C::LightningSpark(class FName EventName, float EmitterTime, const struct FVector& Location, const struct FVector& Velocity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TestMechVehicle_C", "LightningSpark");

	Params::TestMechVehicle_C_LightningSpark Parms{};

	Parms.EventName = EventName;
	Parms.EmitterTime = EmitterTime;
	Parms.Location = std::move(Location);
	Parms.Velocity = std::move(Velocity);

	UObject::ProcessEvent(Func, &Parms);
}


// Function TestMechVehicle.TestMechVehicle_C.UpdateDamageState
// (Net, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Damage                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ATestMechVehicle_C::UpdateDamageState(float Damage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TestMechVehicle_C", "UpdateDamageState");

	Params::TestMechVehicle_C_UpdateDamageState Parms{};

	Parms.Damage = Damage;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TestMechVehicle.TestMechVehicle_C.ResetLandedVariables
// (BlueprintCallable, BlueprintEvent)

void ATestMechVehicle_C::ResetLandedVariables()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TestMechVehicle_C", "ResetLandedVariables");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TestMechVehicle.TestMechVehicle_C.ChargeJumpCameraShake
// (BlueprintCallable, BlueprintEvent)

void ATestMechVehicle_C::ChargeJumpCameraShake()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TestMechVehicle_C", "ChargeJumpCameraShake");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TestMechVehicle.TestMechVehicle_C.OnPressHonk
// (Event, Protected, BlueprintEvent)

void ATestMechVehicle_C::OnPressHonk()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TestMechVehicle_C", "OnPressHonk");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TestMechVehicle.TestMechVehicle_C.Stomp
// (BlueprintCallable, BlueprintEvent)

void ATestMechVehicle_C::Stomp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TestMechVehicle_C", "Stomp");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TestMechVehicle.TestMechVehicle_C.DashDamageBuilding
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ATestMechVehicle_C::DashDamageBuilding(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TestMechVehicle_C", "DashDamageBuilding");

	Params::TestMechVehicle_C_DashDamageBuilding Parms{};

	Parms.Actor = Actor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TestMechVehicle.TestMechVehicle_C.OnReleaseChargeJump
// (Event, Protected, BlueprintEvent)
// Parameters:
// float                                   ChargeAlpha                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ATestMechVehicle_C::OnReleaseChargeJump(float ChargeAlpha)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TestMechVehicle_C", "OnReleaseChargeJump");

	Params::TestMechVehicle_C_OnReleaseChargeJump Parms{};

	Parms.ChargeAlpha = ChargeAlpha;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TestMechVehicle.TestMechVehicle_C.OnStartChargeJump
// (Event, Protected, BlueprintEvent)

void ATestMechVehicle_C::OnStartChargeJump()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TestMechVehicle_C", "OnStartChargeJump");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TestMechVehicle.TestMechVehicle_C.OnHoldExitStopped
// (Event, Protected, BlueprintEvent)
// Parameters:
// class AFortPawn*                        ExitingPawn                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ATestMechVehicle_C::OnHoldExitStopped(class AFortPawn* ExitingPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TestMechVehicle_C", "OnHoldExitStopped");

	Params::TestMechVehicle_C_OnHoldExitStopped Parms{};

	Parms.ExitingPawn = ExitingPawn;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TestMechVehicle.TestMechVehicle_C.OnHoldExitStarted
// (Event, Protected, BlueprintEvent)
// Parameters:
// class AFortPawn*                        ExitingPawn                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ExitDuration                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ATestMechVehicle_C::OnHoldExitStarted(class AFortPawn* ExitingPawn, const float ExitDuration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TestMechVehicle_C", "OnHoldExitStarted");

	Params::TestMechVehicle_C_OnHoldExitStarted Parms{};

	Parms.ExitingPawn = ExitingPawn;
	Parms.ExitDuration = ExitDuration;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TestMechVehicle.TestMechVehicle_C.SetRecentlyExited
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class AFortPlayerPawn*                  Player                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             ExitSocket                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ATestMechVehicle_C::SetRecentlyExited(class AFortPlayerPawn* Player, class FName ExitSocket)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TestMechVehicle_C", "SetRecentlyExited");

	Params::TestMechVehicle_C_SetRecentlyExited Parms{};

	Parms.Player = Player;
	Parms.ExitSocket = ExitSocket;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TestMechVehicle.TestMechVehicle_C.JumpSlam
// (BlueprintCallable, BlueprintEvent)

void ATestMechVehicle_C::JumpSlam()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TestMechVehicle_C", "JumpSlam");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TestMechVehicle.TestMechVehicle_C.MovementModeChangedDelegate_Event_0
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class ACharacter*                       Character                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EMovementMode                           PrevMovementMode                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   PreviousCustomMode                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ATestMechVehicle_C::MovementModeChangedDelegate_Event_0(class ACharacter* Character, EMovementMode PrevMovementMode, uint8 PreviousCustomMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TestMechVehicle_C", "MovementModeChangedDelegate_Event_0");

	Params::TestMechVehicle_C_MovementModeChangedDelegate_Event_0 Parms{};

	Parms.Character = Character;
	Parms.PrevMovementMode = PrevMovementMode;
	Parms.PreviousCustomMode = PreviousCustomMode;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TestMechVehicle.TestMechVehicle_C.Detonate
// (BlueprintCallable, BlueprintEvent)

void ATestMechVehicle_C::Detonate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TestMechVehicle_C", "Detonate");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TestMechVehicle.TestMechVehicle_C.OnDetonateTimerStart
// (Event, Protected, BlueprintEvent)
// Parameters:
// EOstrichDetonationState                 InDetonationState                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ATestMechVehicle_C::OnDetonateTimerStart(EOstrichDetonationState InDetonationState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TestMechVehicle_C", "OnDetonateTimerStart");

	Params::TestMechVehicle_C_OnDetonateTimerStart Parms{};

	Parms.InDetonationState = InDetonationState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TestMechVehicle.TestMechVehicle_C.OnDriverSecondaryFire
// (Event, Protected, BlueprintEvent)

void ATestMechVehicle_C::OnDriverSecondaryFire()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TestMechVehicle_C", "OnDriverSecondaryFire");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TestMechVehicle.TestMechVehicle_C.EventOnPlayerStartDBNO
// (BlueprintCallable, BlueprintEvent)

void ATestMechVehicle_C::EventOnPlayerStartDBNO()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TestMechVehicle_C", "EventOnPlayerStartDBNO");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TestMechVehicle.TestMechVehicle_C.EventOnDied
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           DamagedActor                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Damage                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AController*                      InstigatedBy                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           DamageCauser                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          HitLocation                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              FHitComponent                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             BoneName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Momentum                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ATestMechVehicle_C::EventOnDied(class AActor* DamagedActor, float Damage, class AController* InstigatedBy, class AActor* DamageCauser, const struct FVector& HitLocation, class UPrimitiveComponent* FHitComponent, class FName BoneName, const struct FVector& Momentum)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TestMechVehicle_C", "EventOnDied");

	Params::TestMechVehicle_C_EventOnDied Parms{};

	Parms.DamagedActor = DamagedActor;
	Parms.Damage = Damage;
	Parms.InstigatedBy = InstigatedBy;
	Parms.DamageCauser = DamageCauser;
	Parms.HitLocation = std::move(HitLocation);
	Parms.FHitComponent = FHitComponent;
	Parms.BoneName = BoneName;
	Parms.Momentum = std::move(Momentum);

	UObject::ProcessEvent(Func, &Parms);
}


// Function TestMechVehicle.TestMechVehicle_C.HideQuickbar
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Hide                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class AFortPlayerPawn*                  Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ATestMechVehicle_C::HideQuickbar(bool Hide, class AFortPlayerPawn* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TestMechVehicle_C", "HideQuickbar");

	Params::TestMechVehicle_C_HideQuickbar Parms{};

	Parms.Hide = Hide;
	Parms.Actor = Actor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TestMechVehicle.TestMechVehicle_C.OnDriverPrimaryFire
// (Event, Protected, BlueprintEvent)

void ATestMechVehicle_C::OnDriverPrimaryFire()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TestMechVehicle_C", "OnDriverPrimaryFire");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TestMechVehicle.TestMechVehicle_C.DamageOnLanded
// (BlueprintCallable, BlueprintEvent)

void ATestMechVehicle_C::DamageOnLanded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TestMechVehicle_C", "DamageOnLanded");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TestMechVehicle.TestMechVehicle_C.ReceiveHit
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              MyComp                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Other                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bSelfMoved                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FVector                          HitLocation                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          HitNormal                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          NormalImpulse                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FHitResult                       Hit                                                    (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void ATestMechVehicle_C::ReceiveHit(class UPrimitiveComponent* MyComp, class AActor* Other, class UPrimitiveComponent* OtherComp, bool bSelfMoved, const struct FVector& HitLocation, const struct FVector& HitNormal, const struct FVector& NormalImpulse, const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TestMechVehicle_C", "ReceiveHit");

	Params::TestMechVehicle_C_ReceiveHit Parms{};

	Parms.MyComp = MyComp;
	Parms.Other = Other;
	Parms.OtherComp = OtherComp;
	Parms.bSelfMoved = bSelfMoved;
	Parms.HitLocation = std::move(HitLocation);
	Parms.HitNormal = std::move(HitNormal);
	Parms.NormalImpulse = std::move(NormalImpulse);
	Parms.Hit = std::move(Hit);

	UObject::ProcessEvent(Func, &Parms);
}


// Function TestMechVehicle.TestMechVehicle_C.OnLanded
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// struct FHitResult                       Hit                                                    (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void ATestMechVehicle_C::OnLanded(const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TestMechVehicle_C", "OnLanded");

	Params::TestMechVehicle_C_OnLanded Parms{};

	Parms.Hit = std::move(Hit);

	UObject::ProcessEvent(Func, &Parms);
}


// Function TestMechVehicle.TestMechVehicle_C.EventOnReachedJumpApex
// (BlueprintCallable, BlueprintEvent)

void ATestMechVehicle_C::EventOnReachedJumpApex()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TestMechVehicle_C", "EventOnReachedJumpApex");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TestMechVehicle.TestMechVehicle_C.OnPawnExitVehicle
// (Event, Public, BlueprintEvent)
// Parameters:
// class AFortPlayerPawn*                  PlayerPawn                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             ExitSocketName                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ATestMechVehicle_C::OnPawnExitVehicle(class AFortPlayerPawn* PlayerPawn, class FName ExitSocketName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TestMechVehicle_C", "OnPawnExitVehicle");

	Params::TestMechVehicle_C_OnPawnExitVehicle Parms{};

	Parms.PlayerPawn = PlayerPawn;
	Parms.ExitSocketName = ExitSocketName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TestMechVehicle.TestMechVehicle_C.OnPawnEnterVehicle
// (Event, Public, BlueprintEvent)
// Parameters:
// class AFortPlayerPawn*                  PlayerPawn                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   SeatIdx                                                (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ATestMechVehicle_C::OnPawnEnterVehicle(class AFortPlayerPawn* PlayerPawn, const int32 SeatIdx)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TestMechVehicle_C", "OnPawnEnterVehicle");

	Params::TestMechVehicle_C_OnPawnEnterVehicle Parms{};

	Parms.PlayerPawn = PlayerPawn;
	Parms.SeatIdx = SeatIdx;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TestMechVehicle.TestMechVehicle_C.OnCompleted_EAC6A467481883EEBB88FCB823F471BA
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             NotifyName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ATestMechVehicle_C::OnCompleted_EAC6A467481883EEBB88FCB823F471BA(class FName NotifyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TestMechVehicle_C", "OnCompleted_EAC6A467481883EEBB88FCB823F471BA");

	Params::TestMechVehicle_C_OnCompleted_EAC6A467481883EEBB88FCB823F471BA Parms{};

	Parms.NotifyName = NotifyName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TestMechVehicle.TestMechVehicle_C.OnBlendOut_EAC6A467481883EEBB88FCB823F471BA
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             NotifyName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ATestMechVehicle_C::OnBlendOut_EAC6A467481883EEBB88FCB823F471BA(class FName NotifyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TestMechVehicle_C", "OnBlendOut_EAC6A467481883EEBB88FCB823F471BA");

	Params::TestMechVehicle_C_OnBlendOut_EAC6A467481883EEBB88FCB823F471BA Parms{};

	Parms.NotifyName = NotifyName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TestMechVehicle.TestMechVehicle_C.OnInterrupted_EAC6A467481883EEBB88FCB823F471BA
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             NotifyName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ATestMechVehicle_C::OnInterrupted_EAC6A467481883EEBB88FCB823F471BA(class FName NotifyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TestMechVehicle_C", "OnInterrupted_EAC6A467481883EEBB88FCB823F471BA");

	Params::TestMechVehicle_C_OnInterrupted_EAC6A467481883EEBB88FCB823F471BA Parms{};

	Parms.NotifyName = NotifyName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TestMechVehicle.TestMechVehicle_C.OnNotifyBegin_EAC6A467481883EEBB88FCB823F471BA
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             NotifyName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ATestMechVehicle_C::OnNotifyBegin_EAC6A467481883EEBB88FCB823F471BA(class FName NotifyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TestMechVehicle_C", "OnNotifyBegin_EAC6A467481883EEBB88FCB823F471BA");

	Params::TestMechVehicle_C_OnNotifyBegin_EAC6A467481883EEBB88FCB823F471BA Parms{};

	Parms.NotifyName = NotifyName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TestMechVehicle.TestMechVehicle_C.OnNotifyEnd_EAC6A467481883EEBB88FCB823F471BA
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             NotifyName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ATestMechVehicle_C::OnNotifyEnd_EAC6A467481883EEBB88FCB823F471BA(class FName NotifyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TestMechVehicle_C", "OnNotifyEnd_EAC6A467481883EEBB88FCB823F471BA");

	Params::TestMechVehicle_C_OnNotifyEnd_EAC6A467481883EEBB88FCB823F471BA Parms{};

	Parms.NotifyName = NotifyName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TestMechVehicle.TestMechVehicle_C.Timeline_0__UpdateFunc
// (BlueprintEvent)

void ATestMechVehicle_C::Timeline_0__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TestMechVehicle_C", "Timeline_0__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TestMechVehicle.TestMechVehicle_C.Timeline_0__FinishedFunc
// (BlueprintEvent)

void ATestMechVehicle_C::Timeline_0__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TestMechVehicle_C", "Timeline_0__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TestMechVehicle.TestMechVehicle_C.UserConstructionScript
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ATestMechVehicle_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TestMechVehicle_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TestMechVehicle.TestMechVehicle_C.CanDamageBuilding
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class ABuildingActor*                   BuildingActor                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   MaxHealthThreshold                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
// class ABuildingActor*                   Building_Actor                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool ATestMechVehicle_C::CanDamageBuilding(class ABuildingActor* BuildingActor, float MaxHealthThreshold, class ABuildingActor** Building_Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TestMechVehicle_C", "CanDamageBuilding");

	Params::TestMechVehicle_C_CanDamageBuilding Parms{};

	Parms.BuildingActor = BuildingActor;
	Parms.MaxHealthThreshold = MaxHealthThreshold;

	UObject::ProcessEvent(Func, &Parms);

	if (Building_Actor != nullptr)
		*Building_Actor = Parms.Building_Actor;

	return Parms.ReturnValue;
}


// Function TestMechVehicle.TestMechVehicle_C.KnockAwayDirection
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class AActor*                           Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   LaunchMagnitude                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ZAdditive                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          LaunchVelocity                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ATestMechVehicle_C::KnockAwayDirection(class AActor* Target, float LaunchMagnitude, float ZAdditive, struct FVector* LaunchVelocity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TestMechVehicle_C", "KnockAwayDirection");

	Params::TestMechVehicle_C_KnockAwayDirection Parms{};

	Parms.Target = Target;
	Parms.LaunchMagnitude = LaunchMagnitude;
	Parms.ZAdditive = ZAdditive;

	UObject::ProcessEvent(Func, &Parms);

	if (LaunchVelocity != nullptr)
		*LaunchVelocity = std::move(Parms.LaunchVelocity);
}


// Function TestMechVehicle.TestMechVehicle_C.GC_Params
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FGameplayCueParameters           ReturnValue                                            (Parm, OutParm, ReturnParm, ContainsInstancedReference)

struct FGameplayCueParameters ATestMechVehicle_C::GC_Params()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TestMechVehicle_C", "GC_Params");

	Params::TestMechVehicle_C_GC_Params Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function TestMechVehicle.TestMechVehicle_C.GetVehicleSeatActionNames
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AFortPlayerPawn*                  PlayerPawn                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ECommonInputType                        OverrideInputType                                      (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class FName>                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm)

TArray<class FName> ATestMechVehicle_C::GetVehicleSeatActionNames(class AFortPlayerPawn* PlayerPawn, const ECommonInputType OverrideInputType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TestMechVehicle_C", "GetVehicleSeatActionNames");

	Params::TestMechVehicle_C_GetVehicleSeatActionNames Parms{};

	Parms.PlayerPawn = PlayerPawn;
	Parms.OverrideInputType = OverrideInputType;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function TestMechVehicle.TestMechVehicle_C.GetVehicleSeatActionLabels
// (Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AFortPlayerPawn*                  PlayerPawn                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ECommonInputType                        OverrideInputType                                      (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class FText>                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm)

TArray<class FText> ATestMechVehicle_C::GetVehicleSeatActionLabels(class AFortPlayerPawn* PlayerPawn, const ECommonInputType OverrideInputType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TestMechVehicle_C", "GetVehicleSeatActionLabels");

	Params::TestMechVehicle_C_GetVehicleSeatActionLabels Parms{};

	Parms.PlayerPawn = PlayerPawn;
	Parms.OverrideInputType = OverrideInputType;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function TestMechVehicle.TestMechVehicle_C.OnRep_Dashing
// (HasDefaults, BlueprintCallable, BlueprintEvent)

void ATestMechVehicle_C::OnRep_Dashing()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TestMechVehicle_C", "OnRep_Dashing");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TestMechVehicle.TestMechVehicle_C.DamageAndLaunchActors
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ATestMechVehicle_C::DamageAndLaunchActors(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TestMechVehicle_C", "DamageAndLaunchActors");

	Params::TestMechVehicle_C_DamageAndLaunchActors Parms{};

	Parms.Actor = Actor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TestMechVehicle.TestMechVehicle_C.KickDestroyAndKnockActors
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ATestMechVehicle_C::KickDestroyAndKnockActors()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TestMechVehicle_C", "KickDestroyAndKnockActors");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TestMechVehicle.TestMechVehicle_C.JumpSlamDamageAndLaunch
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ATestMechVehicle_C::JumpSlamDamageAndLaunch()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TestMechVehicle_C", "JumpSlamDamageAndLaunch");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TestMechVehicle.TestMechVehicle_C.OnRep_ChargeJumping
// (HasDefaults, BlueprintCallable, BlueprintEvent)

void ATestMechVehicle_C::OnRep_ChargeJumping()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TestMechVehicle_C", "OnRep_ChargeJumping");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TestMechVehicle.TestMechVehicle_C.SendDamageStateToMaterial
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   ParameterValue                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ATestMechVehicle_C::SendDamageStateToMaterial(float ParameterValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TestMechVehicle_C", "SendDamageStateToMaterial");

	Params::TestMechVehicle_C_SendDamageStateToMaterial Parms{};

	Parms.ParameterValue = ParameterValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TestMechVehicle.TestMechVehicle_C.OnRep_ShieldHealth
// (BlueprintCallable, BlueprintEvent)

void ATestMechVehicle_C::OnRep_ShieldHealth()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TestMechVehicle_C", "OnRep_ShieldHealth");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TestMechVehicle.TestMechVehicle_C.OnRep_ShieldActive
// (BlueprintCallable, BlueprintEvent)

void ATestMechVehicle_C::OnRep_ShieldActive()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TestMechVehicle_C", "OnRep_ShieldActive");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TestMechVehicle.TestMechVehicle_C.IsGunnerShieldActive
// (Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ATestMechVehicle_C::IsGunnerShieldActive()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TestMechVehicle_C", "IsGunnerShieldActive");

	Params::TestMechVehicle_C_IsGunnerShieldActive Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function TestMechVehicle.TestMechVehicle_C.GetGroundSlamBool
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ATestMechVehicle_C::GetGroundSlamBool()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TestMechVehicle_C", "GetGroundSlamBool");

	Params::TestMechVehicle_C_GetGroundSlamBool Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function TestMechVehicle.TestMechVehicle_C.GetChargeJumpingFloat
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

float ATestMechVehicle_C::GetChargeJumpingFloat()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TestMechVehicle_C", "GetChargeJumpingFloat");

	Params::TestMechVehicle_C_GetChargeJumpingFloat Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function TestMechVehicle.TestMechVehicle_C.OnRep_LandFX
// (BlueprintCallable, BlueprintEvent)

void ATestMechVehicle_C::OnRep_LandFX()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TestMechVehicle_C", "OnRep_LandFX");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TestMechVehicle.TestMechVehicle_C.OnRep_SetJumpApex
// (BlueprintCallable, BlueprintEvent)

void ATestMechVehicle_C::OnRep_SetJumpApex()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TestMechVehicle_C", "OnRep_SetJumpApex");

	UObject::ProcessEvent(Func, nullptr);
}

}

