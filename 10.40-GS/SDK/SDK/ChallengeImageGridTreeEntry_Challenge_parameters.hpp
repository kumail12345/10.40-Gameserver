#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ChallengeImageGridTreeEntry_Challenge

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "UMG_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function ChallengeImageGridTreeEntry_Challenge.ChallengeImageGridTreeEntry_Challenge_C.BndEvt__Button_PartyAssist_K2Node_ComponentBoundEvent_2_CommonButtonClicked__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct ChallengeImageGridTreeEntry_Challenge_C_BndEvt__Button_PartyAssist_K2Node_ComponentBoundEvent_2_CommonButtonClicked__DelegateSignature final
{
public:
	class UCommonButton*                          Button;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ChallengeImageGridTreeEntry_Challenge_C_BndEvt__Button_PartyAssist_K2Node_ComponentBoundEvent_2_CommonButtonClicked__DelegateSignature) == 0x000008, "Wrong alignment on ChallengeImageGridTreeEntry_Challenge_C_BndEvt__Button_PartyAssist_K2Node_ComponentBoundEvent_2_CommonButtonClicked__DelegateSignature");
static_assert(sizeof(ChallengeImageGridTreeEntry_Challenge_C_BndEvt__Button_PartyAssist_K2Node_ComponentBoundEvent_2_CommonButtonClicked__DelegateSignature) == 0x000008, "Wrong size on ChallengeImageGridTreeEntry_Challenge_C_BndEvt__Button_PartyAssist_K2Node_ComponentBoundEvent_2_CommonButtonClicked__DelegateSignature");
static_assert(offsetof(ChallengeImageGridTreeEntry_Challenge_C_BndEvt__Button_PartyAssist_K2Node_ComponentBoundEvent_2_CommonButtonClicked__DelegateSignature, Button) == 0x000000, "Member 'ChallengeImageGridTreeEntry_Challenge_C_BndEvt__Button_PartyAssist_K2Node_ComponentBoundEvent_2_CommonButtonClicked__DelegateSignature::Button' has a wrong offset!");

// Function ChallengeImageGridTreeEntry_Challenge.ChallengeImageGridTreeEntry_Challenge_C.OnPartyAssistEnabledChanged
// 0x0001 (0x0001 - 0x0000)
struct ChallengeImageGridTreeEntry_Challenge_C_OnPartyAssistEnabledChanged final
{
public:
	bool                                          bIsPartyAssistEnabled;                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ChallengeImageGridTreeEntry_Challenge_C_OnPartyAssistEnabledChanged) == 0x000001, "Wrong alignment on ChallengeImageGridTreeEntry_Challenge_C_OnPartyAssistEnabledChanged");
static_assert(sizeof(ChallengeImageGridTreeEntry_Challenge_C_OnPartyAssistEnabledChanged) == 0x000001, "Wrong size on ChallengeImageGridTreeEntry_Challenge_C_OnPartyAssistEnabledChanged");
static_assert(offsetof(ChallengeImageGridTreeEntry_Challenge_C_OnPartyAssistEnabledChanged, bIsPartyAssistEnabled) == 0x000000, "Member 'ChallengeImageGridTreeEntry_Challenge_C_OnPartyAssistEnabledChanged::bIsPartyAssistEnabled' has a wrong offset!");

// Function ChallengeImageGridTreeEntry_Challenge.ChallengeImageGridTreeEntry_Challenge_C.OnMouseEnter
// 0x00A8 (0x00A8 - 0x0000)
struct ChallengeImageGridTreeEntry_Challenge_C_OnMouseEnter final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          MouseEvent;                                        // 0x0038(0x0070)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(ChallengeImageGridTreeEntry_Challenge_C_OnMouseEnter) == 0x000008, "Wrong alignment on ChallengeImageGridTreeEntry_Challenge_C_OnMouseEnter");
static_assert(sizeof(ChallengeImageGridTreeEntry_Challenge_C_OnMouseEnter) == 0x0000A8, "Wrong size on ChallengeImageGridTreeEntry_Challenge_C_OnMouseEnter");
static_assert(offsetof(ChallengeImageGridTreeEntry_Challenge_C_OnMouseEnter, MyGeometry) == 0x000000, "Member 'ChallengeImageGridTreeEntry_Challenge_C_OnMouseEnter::MyGeometry' has a wrong offset!");
static_assert(offsetof(ChallengeImageGridTreeEntry_Challenge_C_OnMouseEnter, MouseEvent) == 0x000038, "Member 'ChallengeImageGridTreeEntry_Challenge_C_OnMouseEnter::MouseEvent' has a wrong offset!");

// Function ChallengeImageGridTreeEntry_Challenge.ChallengeImageGridTreeEntry_Challenge_C.OnMouseLeave
// 0x0070 (0x0070 - 0x0000)
struct ChallengeImageGridTreeEntry_Challenge_C_OnMouseLeave final
{
public:
	struct FPointerEvent                          MouseEvent;                                        // 0x0000(0x0070)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(ChallengeImageGridTreeEntry_Challenge_C_OnMouseLeave) == 0x000008, "Wrong alignment on ChallengeImageGridTreeEntry_Challenge_C_OnMouseLeave");
static_assert(sizeof(ChallengeImageGridTreeEntry_Challenge_C_OnMouseLeave) == 0x000070, "Wrong size on ChallengeImageGridTreeEntry_Challenge_C_OnMouseLeave");
static_assert(offsetof(ChallengeImageGridTreeEntry_Challenge_C_OnMouseLeave, MouseEvent) == 0x000000, "Member 'ChallengeImageGridTreeEntry_Challenge_C_OnMouseLeave::MouseEvent' has a wrong offset!");

// Function ChallengeImageGridTreeEntry_Challenge.ChallengeImageGridTreeEntry_Challenge_C.OnChallengeInfoSet
// 0x0004 (0x0004 - 0x0000)
struct ChallengeImageGridTreeEntry_Challenge_C_OnChallengeInfoSet final
{
public:
	bool                                          bIsComplete;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bIsLocked;                                         // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bCompact;                                          // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          HideRewards;                                       // 0x0003(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ChallengeImageGridTreeEntry_Challenge_C_OnChallengeInfoSet) == 0x000001, "Wrong alignment on ChallengeImageGridTreeEntry_Challenge_C_OnChallengeInfoSet");
static_assert(sizeof(ChallengeImageGridTreeEntry_Challenge_C_OnChallengeInfoSet) == 0x000004, "Wrong size on ChallengeImageGridTreeEntry_Challenge_C_OnChallengeInfoSet");
static_assert(offsetof(ChallengeImageGridTreeEntry_Challenge_C_OnChallengeInfoSet, bIsComplete) == 0x000000, "Member 'ChallengeImageGridTreeEntry_Challenge_C_OnChallengeInfoSet::bIsComplete' has a wrong offset!");
static_assert(offsetof(ChallengeImageGridTreeEntry_Challenge_C_OnChallengeInfoSet, bIsLocked) == 0x000001, "Member 'ChallengeImageGridTreeEntry_Challenge_C_OnChallengeInfoSet::bIsLocked' has a wrong offset!");
static_assert(offsetof(ChallengeImageGridTreeEntry_Challenge_C_OnChallengeInfoSet, bCompact) == 0x000002, "Member 'ChallengeImageGridTreeEntry_Challenge_C_OnChallengeInfoSet::bCompact' has a wrong offset!");
static_assert(offsetof(ChallengeImageGridTreeEntry_Challenge_C_OnChallengeInfoSet, HideRewards) == 0x000003, "Member 'ChallengeImageGridTreeEntry_Challenge_C_OnChallengeInfoSet::HideRewards' has a wrong offset!");

// Function ChallengeImageGridTreeEntry_Challenge.ChallengeImageGridTreeEntry_Challenge_C.ExecuteUbergraph_ChallengeImageGridTreeEntry_Challenge
// 0x01F8 (0x01F8 - 0x0000)
struct ChallengeImageGridTreeEntry_Challenge_C_ExecuteUbergraph_ChallengeImageGridTreeEntry_Challenge final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationForward_ReturnValue;         // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_13[0x1];                                       // 0x0013(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_1;                             // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable_2;                              // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_3;                              // 0x001E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1F[0x1];                                       // 0x001F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationForward_ReturnValue_1;       // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationReverse_ReturnValue;         // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCommonButton*                          K2Node_ComponentBoundEvent_Button;                 // 0x0030(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bIsPartyAssistEnabled;                // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x003C(0x0038)(IsPlainOldData, NoDestructor)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerEvent                          K2Node_Event_MouseEvent_1;                         // 0x0078(0x0070)(ConstParm)
	struct FPointerEvent                          K2Node_Event_MouseEvent;                           // 0x00E8(0x0070)(ConstParm)
	bool                                          K2Node_Event_bIsComplete;                          // 0x0158(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bIsLocked;                            // 0x0159(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bCompact;                             // 0x015A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_HideRewards;                          // 0x015B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x015C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_15D[0x3];                                      // 0x015D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default_1;                           // 0x0160(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsMobilePlatform_ReturnValue;             // 0x0164(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_2;                              // 0x0165(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default_2;                           // 0x0166(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_167[0x1];                                      // 0x0167(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetChallengeWeight_ReturnValue;           // 0x0168(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_16C[0x4];                                      // 0x016C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_IntToText_ReturnValue;               // 0x0170(0x0018)()
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0188(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_189[0x7];                                      // 0x0189(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0190(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x01D0(0x0010)(ZeroConstructor, ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x01E0(0x0018)()
};
static_assert(alignof(ChallengeImageGridTreeEntry_Challenge_C_ExecuteUbergraph_ChallengeImageGridTreeEntry_Challenge) == 0x000008, "Wrong alignment on ChallengeImageGridTreeEntry_Challenge_C_ExecuteUbergraph_ChallengeImageGridTreeEntry_Challenge");
static_assert(sizeof(ChallengeImageGridTreeEntry_Challenge_C_ExecuteUbergraph_ChallengeImageGridTreeEntry_Challenge) == 0x0001F8, "Wrong size on ChallengeImageGridTreeEntry_Challenge_C_ExecuteUbergraph_ChallengeImageGridTreeEntry_Challenge");
static_assert(offsetof(ChallengeImageGridTreeEntry_Challenge_C_ExecuteUbergraph_ChallengeImageGridTreeEntry_Challenge, EntryPoint) == 0x000000, "Member 'ChallengeImageGridTreeEntry_Challenge_C_ExecuteUbergraph_ChallengeImageGridTreeEntry_Challenge::EntryPoint' has a wrong offset!");
static_assert(offsetof(ChallengeImageGridTreeEntry_Challenge_C_ExecuteUbergraph_ChallengeImageGridTreeEntry_Challenge, CallFunc_PlayAnimationForward_ReturnValue) == 0x000008, "Member 'ChallengeImageGridTreeEntry_Challenge_C_ExecuteUbergraph_ChallengeImageGridTreeEntry_Challenge::CallFunc_PlayAnimationForward_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChallengeImageGridTreeEntry_Challenge_C_ExecuteUbergraph_ChallengeImageGridTreeEntry_Challenge, Temp_byte_Variable) == 0x000010, "Member 'ChallengeImageGridTreeEntry_Challenge_C_ExecuteUbergraph_ChallengeImageGridTreeEntry_Challenge::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(ChallengeImageGridTreeEntry_Challenge_C_ExecuteUbergraph_ChallengeImageGridTreeEntry_Challenge, Temp_byte_Variable_1) == 0x000011, "Member 'ChallengeImageGridTreeEntry_Challenge_C_ExecuteUbergraph_ChallengeImageGridTreeEntry_Challenge::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(ChallengeImageGridTreeEntry_Challenge_C_ExecuteUbergraph_ChallengeImageGridTreeEntry_Challenge, Temp_bool_Variable) == 0x000012, "Member 'ChallengeImageGridTreeEntry_Challenge_C_ExecuteUbergraph_ChallengeImageGridTreeEntry_Challenge::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ChallengeImageGridTreeEntry_Challenge_C_ExecuteUbergraph_ChallengeImageGridTreeEntry_Challenge, Temp_float_Variable) == 0x000014, "Member 'ChallengeImageGridTreeEntry_Challenge_C_ExecuteUbergraph_ChallengeImageGridTreeEntry_Challenge::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(ChallengeImageGridTreeEntry_Challenge_C_ExecuteUbergraph_ChallengeImageGridTreeEntry_Challenge, Temp_float_Variable_1) == 0x000018, "Member 'ChallengeImageGridTreeEntry_Challenge_C_ExecuteUbergraph_ChallengeImageGridTreeEntry_Challenge::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(ChallengeImageGridTreeEntry_Challenge_C_ExecuteUbergraph_ChallengeImageGridTreeEntry_Challenge, Temp_bool_Variable_1) == 0x00001C, "Member 'ChallengeImageGridTreeEntry_Challenge_C_ExecuteUbergraph_ChallengeImageGridTreeEntry_Challenge::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(ChallengeImageGridTreeEntry_Challenge_C_ExecuteUbergraph_ChallengeImageGridTreeEntry_Challenge, Temp_byte_Variable_2) == 0x00001D, "Member 'ChallengeImageGridTreeEntry_Challenge_C_ExecuteUbergraph_ChallengeImageGridTreeEntry_Challenge::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(ChallengeImageGridTreeEntry_Challenge_C_ExecuteUbergraph_ChallengeImageGridTreeEntry_Challenge, Temp_byte_Variable_3) == 0x00001E, "Member 'ChallengeImageGridTreeEntry_Challenge_C_ExecuteUbergraph_ChallengeImageGridTreeEntry_Challenge::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(ChallengeImageGridTreeEntry_Challenge_C_ExecuteUbergraph_ChallengeImageGridTreeEntry_Challenge, CallFunc_PlayAnimationForward_ReturnValue_1) == 0x000020, "Member 'ChallengeImageGridTreeEntry_Challenge_C_ExecuteUbergraph_ChallengeImageGridTreeEntry_Challenge::CallFunc_PlayAnimationForward_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ChallengeImageGridTreeEntry_Challenge_C_ExecuteUbergraph_ChallengeImageGridTreeEntry_Challenge, CallFunc_PlayAnimationReverse_ReturnValue) == 0x000028, "Member 'ChallengeImageGridTreeEntry_Challenge_C_ExecuteUbergraph_ChallengeImageGridTreeEntry_Challenge::CallFunc_PlayAnimationReverse_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChallengeImageGridTreeEntry_Challenge_C_ExecuteUbergraph_ChallengeImageGridTreeEntry_Challenge, K2Node_ComponentBoundEvent_Button) == 0x000030, "Member 'ChallengeImageGridTreeEntry_Challenge_C_ExecuteUbergraph_ChallengeImageGridTreeEntry_Challenge::K2Node_ComponentBoundEvent_Button' has a wrong offset!");
static_assert(offsetof(ChallengeImageGridTreeEntry_Challenge_C_ExecuteUbergraph_ChallengeImageGridTreeEntry_Challenge, K2Node_Event_bIsPartyAssistEnabled) == 0x000038, "Member 'ChallengeImageGridTreeEntry_Challenge_C_ExecuteUbergraph_ChallengeImageGridTreeEntry_Challenge::K2Node_Event_bIsPartyAssistEnabled' has a wrong offset!");
static_assert(offsetof(ChallengeImageGridTreeEntry_Challenge_C_ExecuteUbergraph_ChallengeImageGridTreeEntry_Challenge, K2Node_Event_MyGeometry) == 0x00003C, "Member 'ChallengeImageGridTreeEntry_Challenge_C_ExecuteUbergraph_ChallengeImageGridTreeEntry_Challenge::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(ChallengeImageGridTreeEntry_Challenge_C_ExecuteUbergraph_ChallengeImageGridTreeEntry_Challenge, K2Node_Event_MouseEvent_1) == 0x000078, "Member 'ChallengeImageGridTreeEntry_Challenge_C_ExecuteUbergraph_ChallengeImageGridTreeEntry_Challenge::K2Node_Event_MouseEvent_1' has a wrong offset!");
static_assert(offsetof(ChallengeImageGridTreeEntry_Challenge_C_ExecuteUbergraph_ChallengeImageGridTreeEntry_Challenge, K2Node_Event_MouseEvent) == 0x0000E8, "Member 'ChallengeImageGridTreeEntry_Challenge_C_ExecuteUbergraph_ChallengeImageGridTreeEntry_Challenge::K2Node_Event_MouseEvent' has a wrong offset!");
static_assert(offsetof(ChallengeImageGridTreeEntry_Challenge_C_ExecuteUbergraph_ChallengeImageGridTreeEntry_Challenge, K2Node_Event_bIsComplete) == 0x000158, "Member 'ChallengeImageGridTreeEntry_Challenge_C_ExecuteUbergraph_ChallengeImageGridTreeEntry_Challenge::K2Node_Event_bIsComplete' has a wrong offset!");
static_assert(offsetof(ChallengeImageGridTreeEntry_Challenge_C_ExecuteUbergraph_ChallengeImageGridTreeEntry_Challenge, K2Node_Event_bIsLocked) == 0x000159, "Member 'ChallengeImageGridTreeEntry_Challenge_C_ExecuteUbergraph_ChallengeImageGridTreeEntry_Challenge::K2Node_Event_bIsLocked' has a wrong offset!");
static_assert(offsetof(ChallengeImageGridTreeEntry_Challenge_C_ExecuteUbergraph_ChallengeImageGridTreeEntry_Challenge, K2Node_Event_bCompact) == 0x00015A, "Member 'ChallengeImageGridTreeEntry_Challenge_C_ExecuteUbergraph_ChallengeImageGridTreeEntry_Challenge::K2Node_Event_bCompact' has a wrong offset!");
static_assert(offsetof(ChallengeImageGridTreeEntry_Challenge_C_ExecuteUbergraph_ChallengeImageGridTreeEntry_Challenge, K2Node_Event_HideRewards) == 0x00015B, "Member 'ChallengeImageGridTreeEntry_Challenge_C_ExecuteUbergraph_ChallengeImageGridTreeEntry_Challenge::K2Node_Event_HideRewards' has a wrong offset!");
static_assert(offsetof(ChallengeImageGridTreeEntry_Challenge_C_ExecuteUbergraph_ChallengeImageGridTreeEntry_Challenge, K2Node_Select_Default) == 0x00015C, "Member 'ChallengeImageGridTreeEntry_Challenge_C_ExecuteUbergraph_ChallengeImageGridTreeEntry_Challenge::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(ChallengeImageGridTreeEntry_Challenge_C_ExecuteUbergraph_ChallengeImageGridTreeEntry_Challenge, K2Node_Select_Default_1) == 0x000160, "Member 'ChallengeImageGridTreeEntry_Challenge_C_ExecuteUbergraph_ChallengeImageGridTreeEntry_Challenge::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(ChallengeImageGridTreeEntry_Challenge_C_ExecuteUbergraph_ChallengeImageGridTreeEntry_Challenge, CallFunc_IsMobilePlatform_ReturnValue) == 0x000164, "Member 'ChallengeImageGridTreeEntry_Challenge_C_ExecuteUbergraph_ChallengeImageGridTreeEntry_Challenge::CallFunc_IsMobilePlatform_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChallengeImageGridTreeEntry_Challenge_C_ExecuteUbergraph_ChallengeImageGridTreeEntry_Challenge, Temp_bool_Variable_2) == 0x000165, "Member 'ChallengeImageGridTreeEntry_Challenge_C_ExecuteUbergraph_ChallengeImageGridTreeEntry_Challenge::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(ChallengeImageGridTreeEntry_Challenge_C_ExecuteUbergraph_ChallengeImageGridTreeEntry_Challenge, K2Node_Select_Default_2) == 0x000166, "Member 'ChallengeImageGridTreeEntry_Challenge_C_ExecuteUbergraph_ChallengeImageGridTreeEntry_Challenge::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(ChallengeImageGridTreeEntry_Challenge_C_ExecuteUbergraph_ChallengeImageGridTreeEntry_Challenge, CallFunc_GetChallengeWeight_ReturnValue) == 0x000168, "Member 'ChallengeImageGridTreeEntry_Challenge_C_ExecuteUbergraph_ChallengeImageGridTreeEntry_Challenge::CallFunc_GetChallengeWeight_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChallengeImageGridTreeEntry_Challenge_C_ExecuteUbergraph_ChallengeImageGridTreeEntry_Challenge, CallFunc_Conv_IntToText_ReturnValue) == 0x000170, "Member 'ChallengeImageGridTreeEntry_Challenge_C_ExecuteUbergraph_ChallengeImageGridTreeEntry_Challenge::CallFunc_Conv_IntToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChallengeImageGridTreeEntry_Challenge_C_ExecuteUbergraph_ChallengeImageGridTreeEntry_Challenge, CallFunc_Less_IntInt_ReturnValue) == 0x000188, "Member 'ChallengeImageGridTreeEntry_Challenge_C_ExecuteUbergraph_ChallengeImageGridTreeEntry_Challenge::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChallengeImageGridTreeEntry_Challenge_C_ExecuteUbergraph_ChallengeImageGridTreeEntry_Challenge, K2Node_MakeStruct_FormatArgumentData) == 0x000190, "Member 'ChallengeImageGridTreeEntry_Challenge_C_ExecuteUbergraph_ChallengeImageGridTreeEntry_Challenge::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(ChallengeImageGridTreeEntry_Challenge_C_ExecuteUbergraph_ChallengeImageGridTreeEntry_Challenge, K2Node_MakeArray_Array) == 0x0001D0, "Member 'ChallengeImageGridTreeEntry_Challenge_C_ExecuteUbergraph_ChallengeImageGridTreeEntry_Challenge::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(ChallengeImageGridTreeEntry_Challenge_C_ExecuteUbergraph_ChallengeImageGridTreeEntry_Challenge, CallFunc_Format_ReturnValue) == 0x0001E0, "Member 'ChallengeImageGridTreeEntry_Challenge_C_ExecuteUbergraph_ChallengeImageGridTreeEntry_Challenge::CallFunc_Format_ReturnValue' has a wrong offset!");

}

