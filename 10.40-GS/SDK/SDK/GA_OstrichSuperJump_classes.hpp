#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GA_OstrichSuperJump

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "Engine_structs.hpp"
#include "FortniteGame_classes.hpp"
#include "GameplayAbilities_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass GA_OstrichSuperJump.GA_OstrichSuperJump_C
// 0x00E8 (0x0A48 - 0x0960)
class UGA_OstrichSuperJump_C final : public UFortGameplayAbility
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0960(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FGameplayTag                           GC_JumpInAirLooping;                               // 0x0968(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           GC_JumpActivate;                                   // 0x0970(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ATestMechVehicle_C*                     Ostrich;                                           // 0x0978(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAbilityTask*                           MoveTask;                                          // 0x0980(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LaunchStrength;                                    // 0x0988(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DashingLaunchStrength;                             // 0x098C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CapsuleTraceZ_Multiplier;                          // 0x0990(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         JumpXYMultiplier;                                  // 0x0994(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         KnockRadius;                                       // 0x0998(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         KnockPlayerMagnitude;                              // 0x099C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         JumpChargePercent;                                 // 0x09A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DestroyPathScalar;                                 // 0x09A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<EObjectTypeQuery>                      KnockObjects;                                      // 0x09A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	struct FScalableFloat                         JumpLaunchStrength;                                // 0x09B8(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         JumpZAdditiveWhileDashing;                         // 0x09D8(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         TraceDistanceMult;                                 // 0x09F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9FC[0x4];                                      // 0x09FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         ShouldDestroyOnJump;                               // 0x0A00(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         RequiredJumpChargePercentToDestroy;                // 0x0A20(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UClass*                                 GE_DestroyBuildingDamage;                          // 0x0A40(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_GA_OstrichSuperJump(int32 EntryPoint);
	void KnockPlayers();
	void Jump();
	void K2_ActivateAbilityFromEvent(const struct FGameplayEventData& EventData);
	void CanBeDestroyed(class ABuildingActor* Building, bool* Destroy);
	void CalcLaunchVelocity(TScriptInterface<class IFortVehicleInterface> Vehicle, float LaunchStrength_0, struct FVector* LaunchVelocity);
	struct FGameplayCueParameters GC_Params();
	bool ShouldDamageBuilding(class ABuildingActor* Building, float MaxHealth);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"GA_OstrichSuperJump_C">();
	}
	static class UGA_OstrichSuperJump_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGA_OstrichSuperJump_C>();
	}
};
static_assert(alignof(UGA_OstrichSuperJump_C) == 0x000008, "Wrong alignment on UGA_OstrichSuperJump_C");
static_assert(sizeof(UGA_OstrichSuperJump_C) == 0x000A48, "Wrong size on UGA_OstrichSuperJump_C");
static_assert(offsetof(UGA_OstrichSuperJump_C, UberGraphFrame) == 0x000960, "Member 'UGA_OstrichSuperJump_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UGA_OstrichSuperJump_C, GC_JumpInAirLooping) == 0x000968, "Member 'UGA_OstrichSuperJump_C::GC_JumpInAirLooping' has a wrong offset!");
static_assert(offsetof(UGA_OstrichSuperJump_C, GC_JumpActivate) == 0x000970, "Member 'UGA_OstrichSuperJump_C::GC_JumpActivate' has a wrong offset!");
static_assert(offsetof(UGA_OstrichSuperJump_C, Ostrich) == 0x000978, "Member 'UGA_OstrichSuperJump_C::Ostrich' has a wrong offset!");
static_assert(offsetof(UGA_OstrichSuperJump_C, MoveTask) == 0x000980, "Member 'UGA_OstrichSuperJump_C::MoveTask' has a wrong offset!");
static_assert(offsetof(UGA_OstrichSuperJump_C, LaunchStrength) == 0x000988, "Member 'UGA_OstrichSuperJump_C::LaunchStrength' has a wrong offset!");
static_assert(offsetof(UGA_OstrichSuperJump_C, DashingLaunchStrength) == 0x00098C, "Member 'UGA_OstrichSuperJump_C::DashingLaunchStrength' has a wrong offset!");
static_assert(offsetof(UGA_OstrichSuperJump_C, CapsuleTraceZ_Multiplier) == 0x000990, "Member 'UGA_OstrichSuperJump_C::CapsuleTraceZ_Multiplier' has a wrong offset!");
static_assert(offsetof(UGA_OstrichSuperJump_C, JumpXYMultiplier) == 0x000994, "Member 'UGA_OstrichSuperJump_C::JumpXYMultiplier' has a wrong offset!");
static_assert(offsetof(UGA_OstrichSuperJump_C, KnockRadius) == 0x000998, "Member 'UGA_OstrichSuperJump_C::KnockRadius' has a wrong offset!");
static_assert(offsetof(UGA_OstrichSuperJump_C, KnockPlayerMagnitude) == 0x00099C, "Member 'UGA_OstrichSuperJump_C::KnockPlayerMagnitude' has a wrong offset!");
static_assert(offsetof(UGA_OstrichSuperJump_C, JumpChargePercent) == 0x0009A0, "Member 'UGA_OstrichSuperJump_C::JumpChargePercent' has a wrong offset!");
static_assert(offsetof(UGA_OstrichSuperJump_C, DestroyPathScalar) == 0x0009A4, "Member 'UGA_OstrichSuperJump_C::DestroyPathScalar' has a wrong offset!");
static_assert(offsetof(UGA_OstrichSuperJump_C, KnockObjects) == 0x0009A8, "Member 'UGA_OstrichSuperJump_C::KnockObjects' has a wrong offset!");
static_assert(offsetof(UGA_OstrichSuperJump_C, JumpLaunchStrength) == 0x0009B8, "Member 'UGA_OstrichSuperJump_C::JumpLaunchStrength' has a wrong offset!");
static_assert(offsetof(UGA_OstrichSuperJump_C, JumpZAdditiveWhileDashing) == 0x0009D8, "Member 'UGA_OstrichSuperJump_C::JumpZAdditiveWhileDashing' has a wrong offset!");
static_assert(offsetof(UGA_OstrichSuperJump_C, TraceDistanceMult) == 0x0009F8, "Member 'UGA_OstrichSuperJump_C::TraceDistanceMult' has a wrong offset!");
static_assert(offsetof(UGA_OstrichSuperJump_C, ShouldDestroyOnJump) == 0x000A00, "Member 'UGA_OstrichSuperJump_C::ShouldDestroyOnJump' has a wrong offset!");
static_assert(offsetof(UGA_OstrichSuperJump_C, RequiredJumpChargePercentToDestroy) == 0x000A20, "Member 'UGA_OstrichSuperJump_C::RequiredJumpChargePercentToDestroy' has a wrong offset!");
static_assert(offsetof(UGA_OstrichSuperJump_C, GE_DestroyBuildingDamage) == 0x000A40, "Member 'UGA_OstrichSuperJump_C::GE_DestroyBuildingDamage' has a wrong offset!");

}

