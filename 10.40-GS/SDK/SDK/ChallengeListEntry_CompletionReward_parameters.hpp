#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ChallengeListEntry_CompletionReward

#include "Basic.hpp"

#include "FortniteGame_structs.hpp"
#include "SlateCore_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK::Params
{

// Function ChallengeListEntry_CompletionReward.ChallengeListEntry_CompletionReward_C.OnRewardInfoSet
// 0x00A8 (0x00A8 - 0x0000)
struct ChallengeListEntry_CompletionReward_C_OnRewardInfoSet final
{
public:
	bool                                          bIsCompleted;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFortChallengeSetStyle                 DisplayStyle;                                      // 0x0008(0x00A0)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(ChallengeListEntry_CompletionReward_C_OnRewardInfoSet) == 0x000008, "Wrong alignment on ChallengeListEntry_CompletionReward_C_OnRewardInfoSet");
static_assert(sizeof(ChallengeListEntry_CompletionReward_C_OnRewardInfoSet) == 0x0000A8, "Wrong size on ChallengeListEntry_CompletionReward_C_OnRewardInfoSet");
static_assert(offsetof(ChallengeListEntry_CompletionReward_C_OnRewardInfoSet, bIsCompleted) == 0x000000, "Member 'ChallengeListEntry_CompletionReward_C_OnRewardInfoSet::bIsCompleted' has a wrong offset!");
static_assert(offsetof(ChallengeListEntry_CompletionReward_C_OnRewardInfoSet, DisplayStyle) == 0x000008, "Member 'ChallengeListEntry_CompletionReward_C_OnRewardInfoSet::DisplayStyle' has a wrong offset!");

// Function ChallengeListEntry_CompletionReward.ChallengeListEntry_CompletionReward_C.OnMouseEnter
// 0x00A8 (0x00A8 - 0x0000)
struct ChallengeListEntry_CompletionReward_C_OnMouseEnter final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          MouseEvent;                                        // 0x0038(0x0070)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(ChallengeListEntry_CompletionReward_C_OnMouseEnter) == 0x000008, "Wrong alignment on ChallengeListEntry_CompletionReward_C_OnMouseEnter");
static_assert(sizeof(ChallengeListEntry_CompletionReward_C_OnMouseEnter) == 0x0000A8, "Wrong size on ChallengeListEntry_CompletionReward_C_OnMouseEnter");
static_assert(offsetof(ChallengeListEntry_CompletionReward_C_OnMouseEnter, MyGeometry) == 0x000000, "Member 'ChallengeListEntry_CompletionReward_C_OnMouseEnter::MyGeometry' has a wrong offset!");
static_assert(offsetof(ChallengeListEntry_CompletionReward_C_OnMouseEnter, MouseEvent) == 0x000038, "Member 'ChallengeListEntry_CompletionReward_C_OnMouseEnter::MouseEvent' has a wrong offset!");

// Function ChallengeListEntry_CompletionReward.ChallengeListEntry_CompletionReward_C.OnMouseLeave
// 0x0070 (0x0070 - 0x0000)
struct ChallengeListEntry_CompletionReward_C_OnMouseLeave final
{
public:
	struct FPointerEvent                          MouseEvent;                                        // 0x0000(0x0070)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(ChallengeListEntry_CompletionReward_C_OnMouseLeave) == 0x000008, "Wrong alignment on ChallengeListEntry_CompletionReward_C_OnMouseLeave");
static_assert(sizeof(ChallengeListEntry_CompletionReward_C_OnMouseLeave) == 0x000070, "Wrong size on ChallengeListEntry_CompletionReward_C_OnMouseLeave");
static_assert(offsetof(ChallengeListEntry_CompletionReward_C_OnMouseLeave, MouseEvent) == 0x000000, "Member 'ChallengeListEntry_CompletionReward_C_OnMouseLeave::MouseEvent' has a wrong offset!");

// Function ChallengeListEntry_CompletionReward.ChallengeListEntry_CompletionReward_C.ExecuteUbergraph_ChallengeListEntry_CompletionReward
// 0x0220 (0x0220 - 0x0000)
struct ChallengeListEntry_CompletionReward_C_ExecuteUbergraph_ChallengeListEntry_CompletionReward final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7[0x1];                                        // 0x0007(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_1;                             // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bIsCompleted;                         // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFortChallengeSetStyle                 K2Node_Event_DisplayStyle;                         // 0x0018(0x00A0)(ConstParm)
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x00B8(0x0038)(IsPlainOldData, NoDestructor)
	struct FPointerEvent                          K2Node_Event_MouseEvent_1;                         // 0x00F0(0x0070)(ConstParm)
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x0160(0x0028)()
	float                                         K2Node_Select_Default;                             // 0x0188(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_18C[0x4];                                      // 0x018C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerEvent                          K2Node_Event_MouseEvent;                           // 0x0190(0x0070)(ConstParm)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationForward_ReturnValue;         // 0x0200(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationReverse_ReturnValue;         // 0x0208(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x0210(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0218(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default_1;                           // 0x0219(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ChallengeListEntry_CompletionReward_C_ExecuteUbergraph_ChallengeListEntry_CompletionReward) == 0x000008, "Wrong alignment on ChallengeListEntry_CompletionReward_C_ExecuteUbergraph_ChallengeListEntry_CompletionReward");
static_assert(sizeof(ChallengeListEntry_CompletionReward_C_ExecuteUbergraph_ChallengeListEntry_CompletionReward) == 0x000220, "Wrong size on ChallengeListEntry_CompletionReward_C_ExecuteUbergraph_ChallengeListEntry_CompletionReward");
static_assert(offsetof(ChallengeListEntry_CompletionReward_C_ExecuteUbergraph_ChallengeListEntry_CompletionReward, EntryPoint) == 0x000000, "Member 'ChallengeListEntry_CompletionReward_C_ExecuteUbergraph_ChallengeListEntry_CompletionReward::EntryPoint' has a wrong offset!");
static_assert(offsetof(ChallengeListEntry_CompletionReward_C_ExecuteUbergraph_ChallengeListEntry_CompletionReward, Temp_byte_Variable) == 0x000004, "Member 'ChallengeListEntry_CompletionReward_C_ExecuteUbergraph_ChallengeListEntry_CompletionReward::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(ChallengeListEntry_CompletionReward_C_ExecuteUbergraph_ChallengeListEntry_CompletionReward, Temp_byte_Variable_1) == 0x000005, "Member 'ChallengeListEntry_CompletionReward_C_ExecuteUbergraph_ChallengeListEntry_CompletionReward::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(ChallengeListEntry_CompletionReward_C_ExecuteUbergraph_ChallengeListEntry_CompletionReward, Temp_bool_Variable) == 0x000006, "Member 'ChallengeListEntry_CompletionReward_C_ExecuteUbergraph_ChallengeListEntry_CompletionReward::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ChallengeListEntry_CompletionReward_C_ExecuteUbergraph_ChallengeListEntry_CompletionReward, Temp_float_Variable) == 0x000008, "Member 'ChallengeListEntry_CompletionReward_C_ExecuteUbergraph_ChallengeListEntry_CompletionReward::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(ChallengeListEntry_CompletionReward_C_ExecuteUbergraph_ChallengeListEntry_CompletionReward, Temp_float_Variable_1) == 0x00000C, "Member 'ChallengeListEntry_CompletionReward_C_ExecuteUbergraph_ChallengeListEntry_CompletionReward::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(ChallengeListEntry_CompletionReward_C_ExecuteUbergraph_ChallengeListEntry_CompletionReward, K2Node_Event_bIsCompleted) == 0x000010, "Member 'ChallengeListEntry_CompletionReward_C_ExecuteUbergraph_ChallengeListEntry_CompletionReward::K2Node_Event_bIsCompleted' has a wrong offset!");
static_assert(offsetof(ChallengeListEntry_CompletionReward_C_ExecuteUbergraph_ChallengeListEntry_CompletionReward, K2Node_Event_DisplayStyle) == 0x000018, "Member 'ChallengeListEntry_CompletionReward_C_ExecuteUbergraph_ChallengeListEntry_CompletionReward::K2Node_Event_DisplayStyle' has a wrong offset!");
static_assert(offsetof(ChallengeListEntry_CompletionReward_C_ExecuteUbergraph_ChallengeListEntry_CompletionReward, K2Node_Event_MyGeometry) == 0x0000B8, "Member 'ChallengeListEntry_CompletionReward_C_ExecuteUbergraph_ChallengeListEntry_CompletionReward::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(ChallengeListEntry_CompletionReward_C_ExecuteUbergraph_ChallengeListEntry_CompletionReward, K2Node_Event_MouseEvent_1) == 0x0000F0, "Member 'ChallengeListEntry_CompletionReward_C_ExecuteUbergraph_ChallengeListEntry_CompletionReward::K2Node_Event_MouseEvent_1' has a wrong offset!");
static_assert(offsetof(ChallengeListEntry_CompletionReward_C_ExecuteUbergraph_ChallengeListEntry_CompletionReward, K2Node_MakeStruct_SlateColor) == 0x000160, "Member 'ChallengeListEntry_CompletionReward_C_ExecuteUbergraph_ChallengeListEntry_CompletionReward::K2Node_MakeStruct_SlateColor' has a wrong offset!");
static_assert(offsetof(ChallengeListEntry_CompletionReward_C_ExecuteUbergraph_ChallengeListEntry_CompletionReward, K2Node_Select_Default) == 0x000188, "Member 'ChallengeListEntry_CompletionReward_C_ExecuteUbergraph_ChallengeListEntry_CompletionReward::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(ChallengeListEntry_CompletionReward_C_ExecuteUbergraph_ChallengeListEntry_CompletionReward, K2Node_Event_MouseEvent) == 0x000190, "Member 'ChallengeListEntry_CompletionReward_C_ExecuteUbergraph_ChallengeListEntry_CompletionReward::K2Node_Event_MouseEvent' has a wrong offset!");
static_assert(offsetof(ChallengeListEntry_CompletionReward_C_ExecuteUbergraph_ChallengeListEntry_CompletionReward, CallFunc_PlayAnimationForward_ReturnValue) == 0x000200, "Member 'ChallengeListEntry_CompletionReward_C_ExecuteUbergraph_ChallengeListEntry_CompletionReward::CallFunc_PlayAnimationForward_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChallengeListEntry_CompletionReward_C_ExecuteUbergraph_ChallengeListEntry_CompletionReward, CallFunc_PlayAnimationReverse_ReturnValue) == 0x000208, "Member 'ChallengeListEntry_CompletionReward_C_ExecuteUbergraph_ChallengeListEntry_CompletionReward::CallFunc_PlayAnimationReverse_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChallengeListEntry_CompletionReward_C_ExecuteUbergraph_ChallengeListEntry_CompletionReward, CallFunc_GetDynamicMaterial_ReturnValue) == 0x000210, "Member 'ChallengeListEntry_CompletionReward_C_ExecuteUbergraph_ChallengeListEntry_CompletionReward::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChallengeListEntry_CompletionReward_C_ExecuteUbergraph_ChallengeListEntry_CompletionReward, Temp_bool_Variable_1) == 0x000218, "Member 'ChallengeListEntry_CompletionReward_C_ExecuteUbergraph_ChallengeListEntry_CompletionReward::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(ChallengeListEntry_CompletionReward_C_ExecuteUbergraph_ChallengeListEntry_CompletionReward, K2Node_Select_Default_1) == 0x000219, "Member 'ChallengeListEntry_CompletionReward_C_ExecuteUbergraph_ChallengeListEntry_CompletionReward::K2Node_Select_Default_1' has a wrong offset!");

}

