#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: KairosSceneCapture

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "KairosSceneCapture_structs.hpp"


namespace SDK
{

// Class KairosSceneCapture.KairosCaptureStatics
// 0x0000 (0x0028 - 0x0028)
class UKairosCaptureStatics final : public UBlueprintFunctionLibrary
{
public:
	static class AKairosSceneManagerActor* GetSceneManager(const class UObject* WorldContextObject);
	static void ToggleAutoRotate(bool bIsAutoRotateAllowed);

	void PauseOrResumeSnippet(const struct FKairosSnippetParams& Params_0, const struct FWebJSResponse& Response);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KairosCaptureStatics">();
	}
	static class UKairosCaptureStatics* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKairosCaptureStatics>();
	}
};
static_assert(alignof(UKairosCaptureStatics) == 0x000008, "Wrong alignment on UKairosCaptureStatics");
static_assert(sizeof(UKairosCaptureStatics) == 0x000028, "Wrong size on UKairosCaptureStatics");

// Class KairosSceneCapture.KairosConfig
// 0x0140 (0x0170 - 0x0030)
class UKairosConfig final : public UDataAsset
{
public:
	float                                         DefaultHeroScale;                                  // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ARSpawnStartingScale;                              // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AKairosHeroBase>            AvatarCaptureBlueprint;                            // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AFortPlayerPawnAthena>      DefaultKairosPawn;                                 // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UARSessionConfig*                       FaceARConfig;                                      // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UWorld>                  ARMap;                                             // 0x0050(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UWorld>                  CaptureMap;                                        // 0x0078(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           KairosMenuIdle_Male;                               // 0x00A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           KairosMenuIdle_Female;                             // 0x00A8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             AvatarRenderCameraLocation_CloseUp;                // 0x00B0(0x0030)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FTransform                             AvatarRenderCameraLocation_Bust;                   // 0x00E0(0x0030)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FTransform                             AvatarRenderCameraLocation_Torso;                  // 0x0110(0x0030)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FTransform                             AvatarRenderCameraLocation_FullBody;               // 0x0140(0x0030)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KairosConfig">();
	}
	static class UKairosConfig* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKairosConfig>();
	}
};
static_assert(alignof(UKairosConfig) == 0x000010, "Wrong alignment on UKairosConfig");
static_assert(sizeof(UKairosConfig) == 0x000170, "Wrong size on UKairosConfig");
static_assert(offsetof(UKairosConfig, DefaultHeroScale) == 0x000030, "Member 'UKairosConfig::DefaultHeroScale' has a wrong offset!");
static_assert(offsetof(UKairosConfig, ARSpawnStartingScale) == 0x000034, "Member 'UKairosConfig::ARSpawnStartingScale' has a wrong offset!");
static_assert(offsetof(UKairosConfig, AvatarCaptureBlueprint) == 0x000038, "Member 'UKairosConfig::AvatarCaptureBlueprint' has a wrong offset!");
static_assert(offsetof(UKairosConfig, DefaultKairosPawn) == 0x000040, "Member 'UKairosConfig::DefaultKairosPawn' has a wrong offset!");
static_assert(offsetof(UKairosConfig, FaceARConfig) == 0x000048, "Member 'UKairosConfig::FaceARConfig' has a wrong offset!");
static_assert(offsetof(UKairosConfig, ARMap) == 0x000050, "Member 'UKairosConfig::ARMap' has a wrong offset!");
static_assert(offsetof(UKairosConfig, CaptureMap) == 0x000078, "Member 'UKairosConfig::CaptureMap' has a wrong offset!");
static_assert(offsetof(UKairosConfig, KairosMenuIdle_Male) == 0x0000A0, "Member 'UKairosConfig::KairosMenuIdle_Male' has a wrong offset!");
static_assert(offsetof(UKairosConfig, KairosMenuIdle_Female) == 0x0000A8, "Member 'UKairosConfig::KairosMenuIdle_Female' has a wrong offset!");
static_assert(offsetof(UKairosConfig, AvatarRenderCameraLocation_CloseUp) == 0x0000B0, "Member 'UKairosConfig::AvatarRenderCameraLocation_CloseUp' has a wrong offset!");
static_assert(offsetof(UKairosConfig, AvatarRenderCameraLocation_Bust) == 0x0000E0, "Member 'UKairosConfig::AvatarRenderCameraLocation_Bust' has a wrong offset!");
static_assert(offsetof(UKairosConfig, AvatarRenderCameraLocation_Torso) == 0x000110, "Member 'UKairosConfig::AvatarRenderCameraLocation_Torso' has a wrong offset!");
static_assert(offsetof(UKairosConfig, AvatarRenderCameraLocation_FullBody) == 0x000140, "Member 'UKairosConfig::AvatarRenderCameraLocation_FullBody' has a wrong offset!");

// Class KairosSceneCapture.KairosGameModeBase
// 0x0008 (0x02C0 - 0x02B8)
class AKairosGameModeBase final : public AGameModeBase
{
public:
	class UKairosConfig*                          DefaultConfig;                                     // 0x02B8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	class UKairosConfig* GetDefaultConfig();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KairosGameModeBase">();
	}
	static class AKairosGameModeBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<AKairosGameModeBase>();
	}
};
static_assert(alignof(AKairosGameModeBase) == 0x000008, "Wrong alignment on AKairosGameModeBase");
static_assert(sizeof(AKairosGameModeBase) == 0x0002C0, "Wrong size on AKairosGameModeBase");
static_assert(offsetof(AKairosGameModeBase, DefaultConfig) == 0x0002B8, "Member 'AKairosGameModeBase::DefaultConfig' has a wrong offset!");

// Class KairosSceneCapture.KairosHeroBase
// 0x0030 (0x0248 - 0x0218)
class AKairosHeroBase final : public AActor
{
public:
	class FString                                 PlayerID;                                          // 0x0218(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsBeingCaptured;                                  // 0x0228(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_229[0x7];                                      // 0x0229(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneCaptureComponent2D*               SceneCaptureComponent2D;                           // 0x0230(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKairosHeroAnimationState                     CurrentAnimationState;                             // 0x0238(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKairosHeroSkeletonType                       SkeletonType;                                      // 0x0239(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23A[0x6];                                      // 0x023A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPlayerPawn*                        CapturePawn;                                       // 0x0240(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	bool BeginCapture(const struct FKairosAnimationFramingInfo& FramingInfo, const struct FKairosCaptureParams& CaptureParams);
	bool EndCapture();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KairosHeroBase">();
	}
	static class AKairosHeroBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<AKairosHeroBase>();
	}
};
static_assert(alignof(AKairosHeroBase) == 0x000008, "Wrong alignment on AKairosHeroBase");
static_assert(sizeof(AKairosHeroBase) == 0x000248, "Wrong size on AKairosHeroBase");
static_assert(offsetof(AKairosHeroBase, PlayerID) == 0x000218, "Member 'AKairosHeroBase::PlayerID' has a wrong offset!");
static_assert(offsetof(AKairosHeroBase, bIsBeingCaptured) == 0x000228, "Member 'AKairosHeroBase::bIsBeingCaptured' has a wrong offset!");
static_assert(offsetof(AKairosHeroBase, SceneCaptureComponent2D) == 0x000230, "Member 'AKairosHeroBase::SceneCaptureComponent2D' has a wrong offset!");
static_assert(offsetof(AKairosHeroBase, CurrentAnimationState) == 0x000238, "Member 'AKairosHeroBase::CurrentAnimationState' has a wrong offset!");
static_assert(offsetof(AKairosHeroBase, SkeletonType) == 0x000239, "Member 'AKairosHeroBase::SkeletonType' has a wrong offset!");
static_assert(offsetof(AKairosHeroBase, CapturePawn) == 0x000240, "Member 'AKairosHeroBase::CapturePawn' has a wrong offset!");

// Class KairosSceneCapture.KairosPawn
// 0x0000 (0x0278 - 0x0278)
class AKairosPawn final : public APawn
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KairosPawn">();
	}
	static class AKairosPawn* GetDefaultObj()
	{
		return GetDefaultObjImpl<AKairosPawn>();
	}
};
static_assert(alignof(AKairosPawn) == 0x000008, "Wrong alignment on AKairosPawn");
static_assert(sizeof(AKairosPawn) == 0x000278, "Wrong size on AKairosPawn");

// Class KairosSceneCapture.KairosPlayerController
// 0x0000 (0x0568 - 0x0568)
class AKairosPlayerController final : public APlayerController
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KairosPlayerController">();
	}
	static class AKairosPlayerController* GetDefaultObj()
	{
		return GetDefaultObjImpl<AKairosPlayerController>();
	}
};
static_assert(alignof(AKairosPlayerController) == 0x000008, "Wrong alignment on AKairosPlayerController");
static_assert(sizeof(AKairosPlayerController) == 0x000568, "Wrong size on AKairosPlayerController");

// Class KairosSceneCapture.KairosSceneManagerActor
// 0x0188 (0x03A0 - 0x0218)
class AKairosSceneManagerActor final : public AActor
{
public:
	TMap<class FString, struct FKairosAvatarDisplayInfo> DisplayAvatars;                                    // 0x0218(0x0050)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_268[0x8];                                      // 0x0268(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             SpawnedPawnHeadCaptureTransform;                   // 0x0270(0x0030)(BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class UAudioComponent*                        SnippetAudioComponent;                             // 0x02A0(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUserWidget*                            ActiveGroupWidget;                                 // 0x02A8(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSnippetPaused;                                  // 0x02B0(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B1[0x1F];                                     // 0x02B1(0x001F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKairosSceneInfo                       ActiveSceneInfo;                                   // 0x02D0(0x0020)(Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_2F0[0xB0];                                     // 0x02F0(0x00B0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BeginEmotePlaybackForPlayer(const class FString& PlayerID, const class FString& EmoteID);
	const struct FKairosSceneInfo GetSceneInfo();
	void LoadWorldARMode();
	void OLD_OnSceneSetupComplete(const struct FKairosSceneInfo& CompleteSceneInfoCopy);
	void PauseOrResumeSnippet(const class FString& PlayerID, bool bShouldPase);
	void StopAR();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KairosSceneManagerActor">();
	}
	static class AKairosSceneManagerActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AKairosSceneManagerActor>();
	}
};
static_assert(alignof(AKairosSceneManagerActor) == 0x000010, "Wrong alignment on AKairosSceneManagerActor");
static_assert(sizeof(AKairosSceneManagerActor) == 0x0003A0, "Wrong size on AKairosSceneManagerActor");
static_assert(offsetof(AKairosSceneManagerActor, DisplayAvatars) == 0x000218, "Member 'AKairosSceneManagerActor::DisplayAvatars' has a wrong offset!");
static_assert(offsetof(AKairosSceneManagerActor, SpawnedPawnHeadCaptureTransform) == 0x000270, "Member 'AKairosSceneManagerActor::SpawnedPawnHeadCaptureTransform' has a wrong offset!");
static_assert(offsetof(AKairosSceneManagerActor, SnippetAudioComponent) == 0x0002A0, "Member 'AKairosSceneManagerActor::SnippetAudioComponent' has a wrong offset!");
static_assert(offsetof(AKairosSceneManagerActor, ActiveGroupWidget) == 0x0002A8, "Member 'AKairosSceneManagerActor::ActiveGroupWidget' has a wrong offset!");
static_assert(offsetof(AKairosSceneManagerActor, bIsSnippetPaused) == 0x0002B0, "Member 'AKairosSceneManagerActor::bIsSnippetPaused' has a wrong offset!");
static_assert(offsetof(AKairosSceneManagerActor, ActiveSceneInfo) == 0x0002D0, "Member 'AKairosSceneManagerActor::ActiveSceneInfo' has a wrong offset!");

}

