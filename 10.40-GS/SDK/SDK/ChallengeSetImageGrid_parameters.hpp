#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ChallengeSetImageGrid

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "UMG_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function ChallengeSetImageGrid.ChallengeSetImageGrid_C.ChangeSortFunction
// 0x0001 (0x0001 - 0x0000)
struct ChallengeSetImageGrid_C_ChangeSortFunction final
{
public:
	bool                                          PassThrough;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ChallengeSetImageGrid_C_ChangeSortFunction) == 0x000001, "Wrong alignment on ChallengeSetImageGrid_C_ChangeSortFunction");
static_assert(sizeof(ChallengeSetImageGrid_C_ChangeSortFunction) == 0x000001, "Wrong size on ChallengeSetImageGrid_C_ChangeSortFunction");
static_assert(offsetof(ChallengeSetImageGrid_C_ChangeSortFunction, PassThrough) == 0x000000, "Member 'ChallengeSetImageGrid_C_ChangeSortFunction::PassThrough' has a wrong offset!");

// Function ChallengeSetImageGrid.ChallengeSetImageGrid_C.GetWidgetForFramingViewedItem
// 0x0008 (0x0008 - 0x0000)
struct ChallengeSetImageGrid_C_GetWidgetForFramingViewedItem final
{
public:
	class UWidget*                                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ChallengeSetImageGrid_C_GetWidgetForFramingViewedItem) == 0x000008, "Wrong alignment on ChallengeSetImageGrid_C_GetWidgetForFramingViewedItem");
static_assert(sizeof(ChallengeSetImageGrid_C_GetWidgetForFramingViewedItem) == 0x000008, "Wrong size on ChallengeSetImageGrid_C_GetWidgetForFramingViewedItem");
static_assert(offsetof(ChallengeSetImageGrid_C_GetWidgetForFramingViewedItem, ReturnValue) == 0x000000, "Member 'ChallengeSetImageGrid_C_GetWidgetForFramingViewedItem::ReturnValue' has a wrong offset!");

// Function ChallengeSetImageGrid.ChallengeSetImageGrid_C.SetDynamicColors
// 0x00B0 (0x00B0 - 0x0000)
struct ChallengeSetImageGrid_C_SetDynamicColors final
{
public:
	class UImage*                                 DetailsDynamicMaterialTarget;                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFortChallengeSetStyle                 FortChallengeSetStyle;                             // 0x0008(0x00A0)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ChallengeSetImageGrid_C_SetDynamicColors) == 0x000008, "Wrong alignment on ChallengeSetImageGrid_C_SetDynamicColors");
static_assert(sizeof(ChallengeSetImageGrid_C_SetDynamicColors) == 0x0000B0, "Wrong size on ChallengeSetImageGrid_C_SetDynamicColors");
static_assert(offsetof(ChallengeSetImageGrid_C_SetDynamicColors, DetailsDynamicMaterialTarget) == 0x000000, "Member 'ChallengeSetImageGrid_C_SetDynamicColors::DetailsDynamicMaterialTarget' has a wrong offset!");
static_assert(offsetof(ChallengeSetImageGrid_C_SetDynamicColors, FortChallengeSetStyle) == 0x000008, "Member 'ChallengeSetImageGrid_C_SetDynamicColors::FortChallengeSetStyle' has a wrong offset!");
static_assert(offsetof(ChallengeSetImageGrid_C_SetDynamicColors, CallFunc_GetDynamicMaterial_ReturnValue) == 0x0000A8, "Member 'ChallengeSetImageGrid_C_SetDynamicColors::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");

// Function ChallengeSetImageGrid.ChallengeSetImageGrid_C.HandleBack
// 0x0001 (0x0001 - 0x0000)
struct ChallengeSetImageGrid_C_HandleBack final
{
public:
	bool                                          PassThrough;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ChallengeSetImageGrid_C_HandleBack) == 0x000001, "Wrong alignment on ChallengeSetImageGrid_C_HandleBack");
static_assert(sizeof(ChallengeSetImageGrid_C_HandleBack) == 0x000001, "Wrong size on ChallengeSetImageGrid_C_HandleBack");
static_assert(offsetof(ChallengeSetImageGrid_C_HandleBack, PassThrough) == 0x000000, "Member 'ChallengeSetImageGrid_C_HandleBack::PassThrough' has a wrong offset!");

// Function ChallengeSetImageGrid.ChallengeSetImageGrid_C.OnChallengeSetEstablished
// 0x00A8 (0x00A8 - 0x0000)
struct ChallengeSetImageGrid_C_OnChallengeSetEstablished final
{
public:
	struct FFortChallengeSetStyle                 DisplayStyle;                                      // 0x0000(0x00A0)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          bIsComplete;                                       // 0x00A0(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ChallengeSetImageGrid_C_OnChallengeSetEstablished) == 0x000008, "Wrong alignment on ChallengeSetImageGrid_C_OnChallengeSetEstablished");
static_assert(sizeof(ChallengeSetImageGrid_C_OnChallengeSetEstablished) == 0x0000A8, "Wrong size on ChallengeSetImageGrid_C_OnChallengeSetEstablished");
static_assert(offsetof(ChallengeSetImageGrid_C_OnChallengeSetEstablished, DisplayStyle) == 0x000000, "Member 'ChallengeSetImageGrid_C_OnChallengeSetEstablished::DisplayStyle' has a wrong offset!");
static_assert(offsetof(ChallengeSetImageGrid_C_OnChallengeSetEstablished, bIsComplete) == 0x0000A0, "Member 'ChallengeSetImageGrid_C_OnChallengeSetEstablished::bIsComplete' has a wrong offset!");

// Function ChallengeSetImageGrid.ChallengeSetImageGrid_C.BndEvt__MobileCloseButton_K2Node_ComponentBoundEvent_1_CommonButtonClicked__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct ChallengeSetImageGrid_C_BndEvt__MobileCloseButton_K2Node_ComponentBoundEvent_1_CommonButtonClicked__DelegateSignature final
{
public:
	class UCommonButton*                          Button;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ChallengeSetImageGrid_C_BndEvt__MobileCloseButton_K2Node_ComponentBoundEvent_1_CommonButtonClicked__DelegateSignature) == 0x000008, "Wrong alignment on ChallengeSetImageGrid_C_BndEvt__MobileCloseButton_K2Node_ComponentBoundEvent_1_CommonButtonClicked__DelegateSignature");
static_assert(sizeof(ChallengeSetImageGrid_C_BndEvt__MobileCloseButton_K2Node_ComponentBoundEvent_1_CommonButtonClicked__DelegateSignature) == 0x000008, "Wrong size on ChallengeSetImageGrid_C_BndEvt__MobileCloseButton_K2Node_ComponentBoundEvent_1_CommonButtonClicked__DelegateSignature");
static_assert(offsetof(ChallengeSetImageGrid_C_BndEvt__MobileCloseButton_K2Node_ComponentBoundEvent_1_CommonButtonClicked__DelegateSignature, Button) == 0x000000, "Member 'ChallengeSetImageGrid_C_BndEvt__MobileCloseButton_K2Node_ComponentBoundEvent_1_CommonButtonClicked__DelegateSignature::Button' has a wrong offset!");

// Function ChallengeSetImageGrid.ChallengeSetImageGrid_C.ExecuteUbergraph_ChallengeSetImageGrid
// 0x0160 (0x0160 - 0x0000)
struct ChallengeSetImageGrid_C_ExecuteUbergraph_ChallengeSetImageGrid final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFortChallengeSetStyle                 K2Node_Event_DisplayStyle;                         // 0x0008(0x00A0)(ConstParm)
	bool                                          K2Node_Event_bIsComplete;                          // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A9[0x3];                                       // 0x00A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           CallFunc_GetChallengeStyleLightAccentColor_ReturnValue; // 0x00AC(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x00BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BD[0x3];                                       // 0x00BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UCircleArrowButton_C*                   K2Node_DynamicCast_AsCircle_Arrow_Button;          // 0x00C0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x00C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_CA[0x6];                                       // 0x00CA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UCircleArrowButton_C*                   K2Node_DynamicCast_AsCircle_Arrow_Button_1;        // 0x00D0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D9[0x7];                                       // 0x00D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationForward_ReturnValue;         // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortMcpContext*                        CallFunc_GetContext_ReturnValue;                   // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCircleArrowButton_C*                   K2Node_DynamicCast_AsCircle_Arrow_Button_2;        // 0x00F0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_F9[0x7];                                       // 0x00F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortMcpProfileAthena*                  CallFunc_GetAthenaProfile_ReturnValue;             // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasPurchasedSeasonBook_ReturnValue;       // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable_2;                              // 0x0109(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x010A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_3;                              // 0x010B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsMobileGame_ReturnValue;                 // 0x010C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HandleBack_Passthrough;                   // 0x010D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_10E[0x2];                                      // 0x010E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDataTableRowHandle                    K2Node_MakeStruct_DataTableRowHandle;              // 0x0110(0x0010)(NoDestructor)
	TDelegate<void(bool* bPassThrough)>           K2Node_CreateDelegate_OutputDelegate;              // 0x0120(0x0010)(ZeroConstructor, NoDestructor)
	class UCommonButton*                          K2Node_ComponentBoundEvent_Button;                 // 0x0130(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FDataTableRowHandle                    K2Node_MakeStruct_DataTableRowHandle_1;            // 0x0138(0x0010)(NoDestructor)
	TDelegate<void(bool* bPassThrough)>           K2Node_CreateDelegate_OutputDelegate_1;            // 0x0148(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_IsConsolePlatform_ReturnValue;            // 0x0158(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_1;                              // 0x0159(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default_1;                           // 0x015A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ChallengeSetImageGrid_C_ExecuteUbergraph_ChallengeSetImageGrid) == 0x000008, "Wrong alignment on ChallengeSetImageGrid_C_ExecuteUbergraph_ChallengeSetImageGrid");
static_assert(sizeof(ChallengeSetImageGrid_C_ExecuteUbergraph_ChallengeSetImageGrid) == 0x000160, "Wrong size on ChallengeSetImageGrid_C_ExecuteUbergraph_ChallengeSetImageGrid");
static_assert(offsetof(ChallengeSetImageGrid_C_ExecuteUbergraph_ChallengeSetImageGrid, EntryPoint) == 0x000000, "Member 'ChallengeSetImageGrid_C_ExecuteUbergraph_ChallengeSetImageGrid::EntryPoint' has a wrong offset!");
static_assert(offsetof(ChallengeSetImageGrid_C_ExecuteUbergraph_ChallengeSetImageGrid, Temp_byte_Variable) == 0x000004, "Member 'ChallengeSetImageGrid_C_ExecuteUbergraph_ChallengeSetImageGrid::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(ChallengeSetImageGrid_C_ExecuteUbergraph_ChallengeSetImageGrid, K2Node_Event_DisplayStyle) == 0x000008, "Member 'ChallengeSetImageGrid_C_ExecuteUbergraph_ChallengeSetImageGrid::K2Node_Event_DisplayStyle' has a wrong offset!");
static_assert(offsetof(ChallengeSetImageGrid_C_ExecuteUbergraph_ChallengeSetImageGrid, K2Node_Event_bIsComplete) == 0x0000A8, "Member 'ChallengeSetImageGrid_C_ExecuteUbergraph_ChallengeSetImageGrid::K2Node_Event_bIsComplete' has a wrong offset!");
static_assert(offsetof(ChallengeSetImageGrid_C_ExecuteUbergraph_ChallengeSetImageGrid, CallFunc_GetChallengeStyleLightAccentColor_ReturnValue) == 0x0000AC, "Member 'ChallengeSetImageGrid_C_ExecuteUbergraph_ChallengeSetImageGrid::CallFunc_GetChallengeStyleLightAccentColor_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChallengeSetImageGrid_C_ExecuteUbergraph_ChallengeSetImageGrid, Temp_byte_Variable_1) == 0x0000BC, "Member 'ChallengeSetImageGrid_C_ExecuteUbergraph_ChallengeSetImageGrid::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(ChallengeSetImageGrid_C_ExecuteUbergraph_ChallengeSetImageGrid, K2Node_DynamicCast_AsCircle_Arrow_Button) == 0x0000C0, "Member 'ChallengeSetImageGrid_C_ExecuteUbergraph_ChallengeSetImageGrid::K2Node_DynamicCast_AsCircle_Arrow_Button' has a wrong offset!");
static_assert(offsetof(ChallengeSetImageGrid_C_ExecuteUbergraph_ChallengeSetImageGrid, K2Node_DynamicCast_bSuccess) == 0x0000C8, "Member 'ChallengeSetImageGrid_C_ExecuteUbergraph_ChallengeSetImageGrid::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(ChallengeSetImageGrid_C_ExecuteUbergraph_ChallengeSetImageGrid, Temp_bool_Variable) == 0x0000C9, "Member 'ChallengeSetImageGrid_C_ExecuteUbergraph_ChallengeSetImageGrid::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ChallengeSetImageGrid_C_ExecuteUbergraph_ChallengeSetImageGrid, K2Node_DynamicCast_AsCircle_Arrow_Button_1) == 0x0000D0, "Member 'ChallengeSetImageGrid_C_ExecuteUbergraph_ChallengeSetImageGrid::K2Node_DynamicCast_AsCircle_Arrow_Button_1' has a wrong offset!");
static_assert(offsetof(ChallengeSetImageGrid_C_ExecuteUbergraph_ChallengeSetImageGrid, K2Node_DynamicCast_bSuccess_1) == 0x0000D8, "Member 'ChallengeSetImageGrid_C_ExecuteUbergraph_ChallengeSetImageGrid::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(ChallengeSetImageGrid_C_ExecuteUbergraph_ChallengeSetImageGrid, CallFunc_PlayAnimationForward_ReturnValue) == 0x0000E0, "Member 'ChallengeSetImageGrid_C_ExecuteUbergraph_ChallengeSetImageGrid::CallFunc_PlayAnimationForward_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChallengeSetImageGrid_C_ExecuteUbergraph_ChallengeSetImageGrid, CallFunc_GetContext_ReturnValue) == 0x0000E8, "Member 'ChallengeSetImageGrid_C_ExecuteUbergraph_ChallengeSetImageGrid::CallFunc_GetContext_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChallengeSetImageGrid_C_ExecuteUbergraph_ChallengeSetImageGrid, K2Node_DynamicCast_AsCircle_Arrow_Button_2) == 0x0000F0, "Member 'ChallengeSetImageGrid_C_ExecuteUbergraph_ChallengeSetImageGrid::K2Node_DynamicCast_AsCircle_Arrow_Button_2' has a wrong offset!");
static_assert(offsetof(ChallengeSetImageGrid_C_ExecuteUbergraph_ChallengeSetImageGrid, K2Node_DynamicCast_bSuccess_2) == 0x0000F8, "Member 'ChallengeSetImageGrid_C_ExecuteUbergraph_ChallengeSetImageGrid::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(ChallengeSetImageGrid_C_ExecuteUbergraph_ChallengeSetImageGrid, CallFunc_GetAthenaProfile_ReturnValue) == 0x000100, "Member 'ChallengeSetImageGrid_C_ExecuteUbergraph_ChallengeSetImageGrid::CallFunc_GetAthenaProfile_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChallengeSetImageGrid_C_ExecuteUbergraph_ChallengeSetImageGrid, CallFunc_HasPurchasedSeasonBook_ReturnValue) == 0x000108, "Member 'ChallengeSetImageGrid_C_ExecuteUbergraph_ChallengeSetImageGrid::CallFunc_HasPurchasedSeasonBook_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChallengeSetImageGrid_C_ExecuteUbergraph_ChallengeSetImageGrid, Temp_byte_Variable_2) == 0x000109, "Member 'ChallengeSetImageGrid_C_ExecuteUbergraph_ChallengeSetImageGrid::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(ChallengeSetImageGrid_C_ExecuteUbergraph_ChallengeSetImageGrid, K2Node_Select_Default) == 0x00010A, "Member 'ChallengeSetImageGrid_C_ExecuteUbergraph_ChallengeSetImageGrid::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(ChallengeSetImageGrid_C_ExecuteUbergraph_ChallengeSetImageGrid, Temp_byte_Variable_3) == 0x00010B, "Member 'ChallengeSetImageGrid_C_ExecuteUbergraph_ChallengeSetImageGrid::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(ChallengeSetImageGrid_C_ExecuteUbergraph_ChallengeSetImageGrid, CallFunc_IsMobileGame_ReturnValue) == 0x00010C, "Member 'ChallengeSetImageGrid_C_ExecuteUbergraph_ChallengeSetImageGrid::CallFunc_IsMobileGame_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChallengeSetImageGrid_C_ExecuteUbergraph_ChallengeSetImageGrid, CallFunc_HandleBack_Passthrough) == 0x00010D, "Member 'ChallengeSetImageGrid_C_ExecuteUbergraph_ChallengeSetImageGrid::CallFunc_HandleBack_Passthrough' has a wrong offset!");
static_assert(offsetof(ChallengeSetImageGrid_C_ExecuteUbergraph_ChallengeSetImageGrid, K2Node_MakeStruct_DataTableRowHandle) == 0x000110, "Member 'ChallengeSetImageGrid_C_ExecuteUbergraph_ChallengeSetImageGrid::K2Node_MakeStruct_DataTableRowHandle' has a wrong offset!");
static_assert(offsetof(ChallengeSetImageGrid_C_ExecuteUbergraph_ChallengeSetImageGrid, K2Node_CreateDelegate_OutputDelegate) == 0x000120, "Member 'ChallengeSetImageGrid_C_ExecuteUbergraph_ChallengeSetImageGrid::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(ChallengeSetImageGrid_C_ExecuteUbergraph_ChallengeSetImageGrid, K2Node_ComponentBoundEvent_Button) == 0x000130, "Member 'ChallengeSetImageGrid_C_ExecuteUbergraph_ChallengeSetImageGrid::K2Node_ComponentBoundEvent_Button' has a wrong offset!");
static_assert(offsetof(ChallengeSetImageGrid_C_ExecuteUbergraph_ChallengeSetImageGrid, K2Node_MakeStruct_DataTableRowHandle_1) == 0x000138, "Member 'ChallengeSetImageGrid_C_ExecuteUbergraph_ChallengeSetImageGrid::K2Node_MakeStruct_DataTableRowHandle_1' has a wrong offset!");
static_assert(offsetof(ChallengeSetImageGrid_C_ExecuteUbergraph_ChallengeSetImageGrid, K2Node_CreateDelegate_OutputDelegate_1) == 0x000148, "Member 'ChallengeSetImageGrid_C_ExecuteUbergraph_ChallengeSetImageGrid::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(ChallengeSetImageGrid_C_ExecuteUbergraph_ChallengeSetImageGrid, CallFunc_IsConsolePlatform_ReturnValue) == 0x000158, "Member 'ChallengeSetImageGrid_C_ExecuteUbergraph_ChallengeSetImageGrid::CallFunc_IsConsolePlatform_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChallengeSetImageGrid_C_ExecuteUbergraph_ChallengeSetImageGrid, Temp_bool_Variable_1) == 0x000159, "Member 'ChallengeSetImageGrid_C_ExecuteUbergraph_ChallengeSetImageGrid::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(ChallengeSetImageGrid_C_ExecuteUbergraph_ChallengeSetImageGrid, K2Node_Select_Default_1) == 0x00015A, "Member 'ChallengeSetImageGrid_C_ExecuteUbergraph_ChallengeSetImageGrid::K2Node_Select_Default_1' has a wrong offset!");

}

