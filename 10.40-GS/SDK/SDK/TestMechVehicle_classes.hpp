#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TestMechVehicle

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "CommonInput_structs.hpp"
#include "Engine_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "FortniteGame_classes.hpp"
#include "GameplayAbilities_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass TestMechVehicle.TestMechVehicle_C
// 0x05C0 (0x3880 - 0x32C0)
class ATestMechVehicle_C final : public AFortCharacterVehicle_Ostrich
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x32C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UForceFeedbackComponent*                FullJumpChargeForceFeedback;                       // 0x32C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFortVehicleAudioVoice*                 RotationalMovementAudio;                           // 0x32D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFortVehicleAudioVoice*                 LinearMovementAudio;                               // 0x32D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        FootstepServo;                                     // 0x32E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        AudioSpark;                                        // 0x32E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    CockpitLight;                                      // 0x32F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFortVehicleAimingWeaponComp*           FortVehicleAimingWeaponComp;                       // 0x32F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_0_RumbleIntensity_E439DCB44B903528881353AE76E913AB; // 0x3300(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_0__Direction_E439DCB44B903528881353AE76E913AB; // 0x3304(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3305[0x3];                                     // 0x3305(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_0;                                        // 0x3308(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortPlayerPawn*                        DriverPawn;                                        // 0x3310(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortPlayerPawn*                        PassengerPawn;                                     // 0x3318(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        P_JumpLanded_LowHeight;                            // 0x3320(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        P_JumpLanded;                                      // 0x3328(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             SoundJumpLanded;                                   // 0x3330(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        P_JumpCompression;                                 // 0x3338(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             SoundDriverEnter;                                  // 0x3340(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         JumpKnockMagnitude;                                // 0x3348(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DashKnockStrength;                                 // 0x334C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         JumpSlamDownForce;                                 // 0x3350(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3354[0x4];                                     // 0x3354(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           KickAttackMontage;                                 // 0x3358(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         JumpSlamForwardForce;                              // 0x3360(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3364[0x4];                                     // 0x3364(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 GE_BuildingDamageOnLanded;                         // 0x3368(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           GroundSlamMontage;                                 // 0x3370(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 GE_DestroyBuildingDamage;                          // 0x3378(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 GE_KickPlayerDamage;                               // 0x3380(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               KillBuildup;                                       // 0x3388(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 GE_BuildingDamageOnDash;                           // 0x3390(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 GE_JumpSlamDamageBuilding;                         // 0x3398(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         KickKnockMagnitude;                                // 0x33A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         KickKnockVehicleMagnitude;                         // 0x33A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         KickPlayerZLaunch;                                 // 0x33A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         KickPlayerZLaunchDBNO;                             // 0x33AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MinHeightToJumpSlam;                               // 0x33B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         VehicleKnockUpMagnitude;                           // 0x33B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           GC_Stomp;                                          // 0x33B8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           GC_GunnerEnter;                                    // 0x33C0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           GC_DriverEnter;                                    // 0x33C8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           GC_Death;                                          // 0x33D0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           GC_DeathExplode;                                   // 0x33D8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           GC_JumpCharging;                                   // 0x33E0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           GC_JumpInAirLooping;                               // 0x33E8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           GC_JumpActivate;                                   // 0x33F0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         LandedDamageRadius;                                // 0x33F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         KickTraceForwardOffset;                            // 0x33FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DashZLaunchAdditive;                               // 0x3400(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                JumpSlamBoxSize;                                   // 0x3404(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                KickBoxSize;                                       // 0x3410(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                JumpApexLocation;                                  // 0x341C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               VehiclePostProcessMID;                             // 0x3428(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          useHUDPostProcess;                                 // 0x3430(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3431[0x7];                                     // 0x3431(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABuildingActor*>                 HitBuilding;                                       // 0x3438(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<class AFortPlayerPawn*>                HitPlayers;                                        // 0x3448(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance)
	class UObject*                                RecentlyExitedGunner;                              // 0x3458(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                RecentlyExitedDriver;                              // 0x3460(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           GC_JumpSlamLanded;                                 // 0x3468(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         ChargeJumping;                                     // 0x3470(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	float                                         CameraShakeLandScale;                              // 0x3474(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Dashing;                                           // 0x3478(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           GC_Dash;                                           // 0x347C(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         FullChargeJumpTime;                                // 0x3484(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bGroundSlam;                                       // 0x3488(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Kicking;                                           // 0x3489(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_348A[0x2];                                     // 0x348A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CameraLandShakeMultiplier;                         // 0x348C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 CameraShakeSlam;                                   // 0x3490(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        P_DetonationBuildup;                               // 0x3498(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 CameraShakeJumpRelease;                            // 0x34A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dashed;                                            // 0x34A8(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_34A9[0x7];                                     // 0x34A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           FullChargeJumpTimer;                               // 0x34B0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 CameraShakeFullChargeJump;                         // 0x34B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCameraShake*                           FullChargeJumpCameraShake;                         // 0x34C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCameraAnim*                            LandCameraShake;                                   // 0x34C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 GE_VehicleDamageLanded;                            // 0x34D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FScalableFloat                         SetJumpKnockMagnitude;                             // 0x34D8(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         SetDashKnockStrength;                              // 0x34F8(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         SetJumpSlamDownForce;                              // 0x3518(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         SetJumpSlamForwardForce;                           // 0x3538(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         SetKickLaunchPlayerStrength;                       // 0x3558(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         SetKickLaunchVehicleStrength;                      // 0x3578(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         SetVehicleKnockUpStrength;                         // 0x3598(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         SetKickPlayerZ_LaunchStrength;                     // 0x35B8(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         SetDashZ_LaunchPlayerAdditive;                     // 0x35D8(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         SetMinHeightToJumpSlam;                            // 0x35F8(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         SetLandedDamageRadius;                             // 0x3618(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         SavedDamageForMID;                                 // 0x3638(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_363C[0x4];                                     // 0x363C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystemComponent*               DamagedEffect;                                     // 0x3640(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABGA_Ostrich_ShieldBubble_C*            ShieldBubbleActor;                                 // 0x3648(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FScalableFloat                         ShouldAllowShield;                                 // 0x3650(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         OverchargeMaterialCost;                            // 0x3670(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         ShouldAllowOvercharge;                             // 0x3690(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UForceFeedbackEffect*                   DetonateForceFeedbackNear;                         // 0x36B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UForceFeedbackEffect*                   DetonateForceFeedbackFar;                          // 0x36B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UForceFeedbackEffect*                   FootstepForceFeedback;                             // 0x36C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           GC_JumpSlamActivated;                              // 0x36C8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FScalableFloat                         SetOverchargeShieldCost;                           // 0x36D0(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTag                           GC_SpawnSmokeIndicator;                            // 0x36F0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FScalableFloat                         SetOverchargeDuration;                             // 0x36F8(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         SetOverchargeCooldown;                             // 0x3718(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FTimerHandle                           VisualizePulseIndicatorTimer;                      // 0x3738(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               BodyMID;                                           // 0x3740(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        TargetingLaserAudio;                               // 0x3748(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FScalableFloat                         SetEnableTargetingLaser;                           // 0x3750(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         SetEnableSimProxyFix;                              // 0x3770(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         SetSimProxyFixRange;                               // 0x3790(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         SetSelfDetonateDelay;                              // 0x37B0(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         SetDetonateDelay;                                  // 0x37D0(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UParticleSystemComponent*               KillBuildupSelfDestruct;                           // 0x37F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        P_DetonationBuildupSelfDestruct;                   // 0x37F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           GroundShakeGC;                                     // 0x3800(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           GroundShakeBigGC;                                  // 0x3808(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           GC_JumpLanded;                                     // 0x3810(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          SetJumpApex;                                       // 0x3818(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	uint8                                         Pad_3819[0x7];                                     // 0x3819(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<class AActor*>                           HitActors;                                         // 0x3820(0x0050)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<class AActor*>                         EnvironmentalActorsHit;                            // 0x3870(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance)

public:
	void ExecuteUbergraph_TestMechVehicle(int32 EntryPoint);
	void EventOnHealthChanged();
	void OnLoadingRockets(bool bStarting);
	void K2_ApplyCosmeticWrap(const class UAthenaItemWrapDefinition* LoadedWrap);
	void PulseSoundIndicator();
	void GunnerShieldTakeDamage(float Damage);
	void OnFailedShieldBoost();
	void OnPressShieldBoost();
	void EventOverchargeShieldActivated();
	void On_Audio_Tick();
	void On_Mech_Footstep();
	void ReceiveBeginPlay();
	void LightningSpark(class FName EventName, float EmitterTime, const struct FVector& Location, const struct FVector& Velocity);
	void UpdateDamageState(float Damage);
	void ResetLandedVariables();
	void ChargeJumpCameraShake();
	void OnPressHonk();
	void Stomp();
	void DashDamageBuilding(class AActor* Actor);
	void OnReleaseChargeJump(float ChargeAlpha);
	void OnStartChargeJump();
	void OnHoldExitStopped(class AFortPawn* ExitingPawn);
	void OnHoldExitStarted(class AFortPawn* ExitingPawn, const float ExitDuration);
	void SetRecentlyExited(class AFortPlayerPawn* Player, class FName ExitSocket);
	void JumpSlam();
	void MovementModeChangedDelegate_Event_0(class ACharacter* Character, EMovementMode PrevMovementMode, uint8 PreviousCustomMode);
	void Detonate();
	void OnDetonateTimerStart(EOstrichDetonationState InDetonationState);
	void OnDriverSecondaryFire();
	void EventOnPlayerStartDBNO();
	void EventOnDied(class AActor* DamagedActor, float Damage, class AController* InstigatedBy, class AActor* DamageCauser, const struct FVector& HitLocation, class UPrimitiveComponent* FHitComponent, class FName BoneName, const struct FVector& Momentum);
	void HideQuickbar(bool Hide, class AFortPlayerPawn* Actor);
	void OnDriverPrimaryFire();
	void DamageOnLanded();
	void ReceiveHit(class UPrimitiveComponent* MyComp, class AActor* Other, class UPrimitiveComponent* OtherComp, bool bSelfMoved, const struct FVector& HitLocation, const struct FVector& HitNormal, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void OnLanded(const struct FHitResult& Hit);
	void EventOnReachedJumpApex();
	void OnPawnExitVehicle(class AFortPlayerPawn* PlayerPawn, class FName ExitSocketName);
	void OnPawnEnterVehicle(class AFortPlayerPawn* PlayerPawn, const int32 SeatIdx);
	void OnCompleted_EAC6A467481883EEBB88FCB823F471BA(class FName NotifyName);
	void OnBlendOut_EAC6A467481883EEBB88FCB823F471BA(class FName NotifyName);
	void OnInterrupted_EAC6A467481883EEBB88FCB823F471BA(class FName NotifyName);
	void OnNotifyBegin_EAC6A467481883EEBB88FCB823F471BA(class FName NotifyName);
	void OnNotifyEnd_EAC6A467481883EEBB88FCB823F471BA(class FName NotifyName);
	void Timeline_0__UpdateFunc();
	void Timeline_0__FinishedFunc();
	void UserConstructionScript();
	bool CanDamageBuilding(class ABuildingActor* BuildingActor, float MaxHealthThreshold, class ABuildingActor** Building_Actor);
	void KnockAwayDirection(class AActor* Target, float LaunchMagnitude, float ZAdditive, struct FVector* LaunchVelocity);
	struct FGameplayCueParameters GC_Params();
	TArray<class FName> GetVehicleSeatActionNames(class AFortPlayerPawn* PlayerPawn, const ECommonInputType OverrideInputType);
	TArray<class FText> GetVehicleSeatActionLabels(class AFortPlayerPawn* PlayerPawn, const ECommonInputType OverrideInputType);
	void OnRep_Dashing();
	void DamageAndLaunchActors(class AActor* Actor);
	void KickDestroyAndKnockActors();
	void JumpSlamDamageAndLaunch();
	void OnRep_ChargeJumping();
	void SendDamageStateToMaterial(float ParameterValue);
	void OnRep_ShieldHealth();
	void OnRep_ShieldActive();
	bool IsGunnerShieldActive();
	bool GetGroundSlamBool();
	float GetChargeJumpingFloat();
	void OnRep_LandFX();
	void OnRep_SetJumpApex();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"TestMechVehicle_C">();
	}
	static class ATestMechVehicle_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ATestMechVehicle_C>();
	}
};
static_assert(alignof(ATestMechVehicle_C) == 0x000010, "Wrong alignment on ATestMechVehicle_C");
static_assert(sizeof(ATestMechVehicle_C) == 0x003880, "Wrong size on ATestMechVehicle_C");
static_assert(offsetof(ATestMechVehicle_C, UberGraphFrame) == 0x0032C0, "Member 'ATestMechVehicle_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ATestMechVehicle_C, FullJumpChargeForceFeedback) == 0x0032C8, "Member 'ATestMechVehicle_C::FullJumpChargeForceFeedback' has a wrong offset!");
static_assert(offsetof(ATestMechVehicle_C, RotationalMovementAudio) == 0x0032D0, "Member 'ATestMechVehicle_C::RotationalMovementAudio' has a wrong offset!");
static_assert(offsetof(ATestMechVehicle_C, LinearMovementAudio) == 0x0032D8, "Member 'ATestMechVehicle_C::LinearMovementAudio' has a wrong offset!");
static_assert(offsetof(ATestMechVehicle_C, FootstepServo) == 0x0032E0, "Member 'ATestMechVehicle_C::FootstepServo' has a wrong offset!");
static_assert(offsetof(ATestMechVehicle_C, AudioSpark) == 0x0032E8, "Member 'ATestMechVehicle_C::AudioSpark' has a wrong offset!");
static_assert(offsetof(ATestMechVehicle_C, CockpitLight) == 0x0032F0, "Member 'ATestMechVehicle_C::CockpitLight' has a wrong offset!");
static_assert(offsetof(ATestMechVehicle_C, FortVehicleAimingWeaponComp) == 0x0032F8, "Member 'ATestMechVehicle_C::FortVehicleAimingWeaponComp' has a wrong offset!");
static_assert(offsetof(ATestMechVehicle_C, Timeline_0_RumbleIntensity_E439DCB44B903528881353AE76E913AB) == 0x003300, "Member 'ATestMechVehicle_C::Timeline_0_RumbleIntensity_E439DCB44B903528881353AE76E913AB' has a wrong offset!");
static_assert(offsetof(ATestMechVehicle_C, Timeline_0__Direction_E439DCB44B903528881353AE76E913AB) == 0x003304, "Member 'ATestMechVehicle_C::Timeline_0__Direction_E439DCB44B903528881353AE76E913AB' has a wrong offset!");
static_assert(offsetof(ATestMechVehicle_C, Timeline_0) == 0x003308, "Member 'ATestMechVehicle_C::Timeline_0' has a wrong offset!");
static_assert(offsetof(ATestMechVehicle_C, DriverPawn) == 0x003310, "Member 'ATestMechVehicle_C::DriverPawn' has a wrong offset!");
static_assert(offsetof(ATestMechVehicle_C, PassengerPawn) == 0x003318, "Member 'ATestMechVehicle_C::PassengerPawn' has a wrong offset!");
static_assert(offsetof(ATestMechVehicle_C, P_JumpLanded_LowHeight) == 0x003320, "Member 'ATestMechVehicle_C::P_JumpLanded_LowHeight' has a wrong offset!");
static_assert(offsetof(ATestMechVehicle_C, P_JumpLanded) == 0x003328, "Member 'ATestMechVehicle_C::P_JumpLanded' has a wrong offset!");
static_assert(offsetof(ATestMechVehicle_C, SoundJumpLanded) == 0x003330, "Member 'ATestMechVehicle_C::SoundJumpLanded' has a wrong offset!");
static_assert(offsetof(ATestMechVehicle_C, P_JumpCompression) == 0x003338, "Member 'ATestMechVehicle_C::P_JumpCompression' has a wrong offset!");
static_assert(offsetof(ATestMechVehicle_C, SoundDriverEnter) == 0x003340, "Member 'ATestMechVehicle_C::SoundDriverEnter' has a wrong offset!");
static_assert(offsetof(ATestMechVehicle_C, JumpKnockMagnitude) == 0x003348, "Member 'ATestMechVehicle_C::JumpKnockMagnitude' has a wrong offset!");
static_assert(offsetof(ATestMechVehicle_C, DashKnockStrength) == 0x00334C, "Member 'ATestMechVehicle_C::DashKnockStrength' has a wrong offset!");
static_assert(offsetof(ATestMechVehicle_C, JumpSlamDownForce) == 0x003350, "Member 'ATestMechVehicle_C::JumpSlamDownForce' has a wrong offset!");
static_assert(offsetof(ATestMechVehicle_C, KickAttackMontage) == 0x003358, "Member 'ATestMechVehicle_C::KickAttackMontage' has a wrong offset!");
static_assert(offsetof(ATestMechVehicle_C, JumpSlamForwardForce) == 0x003360, "Member 'ATestMechVehicle_C::JumpSlamForwardForce' has a wrong offset!");
static_assert(offsetof(ATestMechVehicle_C, GE_BuildingDamageOnLanded) == 0x003368, "Member 'ATestMechVehicle_C::GE_BuildingDamageOnLanded' has a wrong offset!");
static_assert(offsetof(ATestMechVehicle_C, GroundSlamMontage) == 0x003370, "Member 'ATestMechVehicle_C::GroundSlamMontage' has a wrong offset!");
static_assert(offsetof(ATestMechVehicle_C, GE_DestroyBuildingDamage) == 0x003378, "Member 'ATestMechVehicle_C::GE_DestroyBuildingDamage' has a wrong offset!");
static_assert(offsetof(ATestMechVehicle_C, GE_KickPlayerDamage) == 0x003380, "Member 'ATestMechVehicle_C::GE_KickPlayerDamage' has a wrong offset!");
static_assert(offsetof(ATestMechVehicle_C, KillBuildup) == 0x003388, "Member 'ATestMechVehicle_C::KillBuildup' has a wrong offset!");
static_assert(offsetof(ATestMechVehicle_C, GE_BuildingDamageOnDash) == 0x003390, "Member 'ATestMechVehicle_C::GE_BuildingDamageOnDash' has a wrong offset!");
static_assert(offsetof(ATestMechVehicle_C, GE_JumpSlamDamageBuilding) == 0x003398, "Member 'ATestMechVehicle_C::GE_JumpSlamDamageBuilding' has a wrong offset!");
static_assert(offsetof(ATestMechVehicle_C, KickKnockMagnitude) == 0x0033A0, "Member 'ATestMechVehicle_C::KickKnockMagnitude' has a wrong offset!");
static_assert(offsetof(ATestMechVehicle_C, KickKnockVehicleMagnitude) == 0x0033A4, "Member 'ATestMechVehicle_C::KickKnockVehicleMagnitude' has a wrong offset!");
static_assert(offsetof(ATestMechVehicle_C, KickPlayerZLaunch) == 0x0033A8, "Member 'ATestMechVehicle_C::KickPlayerZLaunch' has a wrong offset!");
static_assert(offsetof(ATestMechVehicle_C, KickPlayerZLaunchDBNO) == 0x0033AC, "Member 'ATestMechVehicle_C::KickPlayerZLaunchDBNO' has a wrong offset!");
static_assert(offsetof(ATestMechVehicle_C, MinHeightToJumpSlam) == 0x0033B0, "Member 'ATestMechVehicle_C::MinHeightToJumpSlam' has a wrong offset!");
static_assert(offsetof(ATestMechVehicle_C, VehicleKnockUpMagnitude) == 0x0033B4, "Member 'ATestMechVehicle_C::VehicleKnockUpMagnitude' has a wrong offset!");
static_assert(offsetof(ATestMechVehicle_C, GC_Stomp) == 0x0033B8, "Member 'ATestMechVehicle_C::GC_Stomp' has a wrong offset!");
static_assert(offsetof(ATestMechVehicle_C, GC_GunnerEnter) == 0x0033C0, "Member 'ATestMechVehicle_C::GC_GunnerEnter' has a wrong offset!");
static_assert(offsetof(ATestMechVehicle_C, GC_DriverEnter) == 0x0033C8, "Member 'ATestMechVehicle_C::GC_DriverEnter' has a wrong offset!");
static_assert(offsetof(ATestMechVehicle_C, GC_Death) == 0x0033D0, "Member 'ATestMechVehicle_C::GC_Death' has a wrong offset!");
static_assert(offsetof(ATestMechVehicle_C, GC_DeathExplode) == 0x0033D8, "Member 'ATestMechVehicle_C::GC_DeathExplode' has a wrong offset!");
static_assert(offsetof(ATestMechVehicle_C, GC_JumpCharging) == 0x0033E0, "Member 'ATestMechVehicle_C::GC_JumpCharging' has a wrong offset!");
static_assert(offsetof(ATestMechVehicle_C, GC_JumpInAirLooping) == 0x0033E8, "Member 'ATestMechVehicle_C::GC_JumpInAirLooping' has a wrong offset!");
static_assert(offsetof(ATestMechVehicle_C, GC_JumpActivate) == 0x0033F0, "Member 'ATestMechVehicle_C::GC_JumpActivate' has a wrong offset!");
static_assert(offsetof(ATestMechVehicle_C, LandedDamageRadius) == 0x0033F8, "Member 'ATestMechVehicle_C::LandedDamageRadius' has a wrong offset!");
static_assert(offsetof(ATestMechVehicle_C, KickTraceForwardOffset) == 0x0033FC, "Member 'ATestMechVehicle_C::KickTraceForwardOffset' has a wrong offset!");
static_assert(offsetof(ATestMechVehicle_C, DashZLaunchAdditive) == 0x003400, "Member 'ATestMechVehicle_C::DashZLaunchAdditive' has a wrong offset!");
static_assert(offsetof(ATestMechVehicle_C, JumpSlamBoxSize) == 0x003404, "Member 'ATestMechVehicle_C::JumpSlamBoxSize' has a wrong offset!");
static_assert(offsetof(ATestMechVehicle_C, KickBoxSize) == 0x003410, "Member 'ATestMechVehicle_C::KickBoxSize' has a wrong offset!");
static_assert(offsetof(ATestMechVehicle_C, JumpApexLocation) == 0x00341C, "Member 'ATestMechVehicle_C::JumpApexLocation' has a wrong offset!");
static_assert(offsetof(ATestMechVehicle_C, VehiclePostProcessMID) == 0x003428, "Member 'ATestMechVehicle_C::VehiclePostProcessMID' has a wrong offset!");
static_assert(offsetof(ATestMechVehicle_C, useHUDPostProcess) == 0x003430, "Member 'ATestMechVehicle_C::useHUDPostProcess' has a wrong offset!");
static_assert(offsetof(ATestMechVehicle_C, HitBuilding) == 0x003438, "Member 'ATestMechVehicle_C::HitBuilding' has a wrong offset!");
static_assert(offsetof(ATestMechVehicle_C, HitPlayers) == 0x003448, "Member 'ATestMechVehicle_C::HitPlayers' has a wrong offset!");
static_assert(offsetof(ATestMechVehicle_C, RecentlyExitedGunner) == 0x003458, "Member 'ATestMechVehicle_C::RecentlyExitedGunner' has a wrong offset!");
static_assert(offsetof(ATestMechVehicle_C, RecentlyExitedDriver) == 0x003460, "Member 'ATestMechVehicle_C::RecentlyExitedDriver' has a wrong offset!");
static_assert(offsetof(ATestMechVehicle_C, GC_JumpSlamLanded) == 0x003468, "Member 'ATestMechVehicle_C::GC_JumpSlamLanded' has a wrong offset!");
static_assert(offsetof(ATestMechVehicle_C, ChargeJumping) == 0x003470, "Member 'ATestMechVehicle_C::ChargeJumping' has a wrong offset!");
static_assert(offsetof(ATestMechVehicle_C, CameraShakeLandScale) == 0x003474, "Member 'ATestMechVehicle_C::CameraShakeLandScale' has a wrong offset!");
static_assert(offsetof(ATestMechVehicle_C, Dashing) == 0x003478, "Member 'ATestMechVehicle_C::Dashing' has a wrong offset!");
static_assert(offsetof(ATestMechVehicle_C, GC_Dash) == 0x00347C, "Member 'ATestMechVehicle_C::GC_Dash' has a wrong offset!");
static_assert(offsetof(ATestMechVehicle_C, FullChargeJumpTime) == 0x003484, "Member 'ATestMechVehicle_C::FullChargeJumpTime' has a wrong offset!");
static_assert(offsetof(ATestMechVehicle_C, bGroundSlam) == 0x003488, "Member 'ATestMechVehicle_C::bGroundSlam' has a wrong offset!");
static_assert(offsetof(ATestMechVehicle_C, Kicking) == 0x003489, "Member 'ATestMechVehicle_C::Kicking' has a wrong offset!");
static_assert(offsetof(ATestMechVehicle_C, CameraLandShakeMultiplier) == 0x00348C, "Member 'ATestMechVehicle_C::CameraLandShakeMultiplier' has a wrong offset!");
static_assert(offsetof(ATestMechVehicle_C, CameraShakeSlam) == 0x003490, "Member 'ATestMechVehicle_C::CameraShakeSlam' has a wrong offset!");
static_assert(offsetof(ATestMechVehicle_C, P_DetonationBuildup) == 0x003498, "Member 'ATestMechVehicle_C::P_DetonationBuildup' has a wrong offset!");
static_assert(offsetof(ATestMechVehicle_C, CameraShakeJumpRelease) == 0x0034A0, "Member 'ATestMechVehicle_C::CameraShakeJumpRelease' has a wrong offset!");
static_assert(offsetof(ATestMechVehicle_C, Dashed) == 0x0034A8, "Member 'ATestMechVehicle_C::Dashed' has a wrong offset!");
static_assert(offsetof(ATestMechVehicle_C, FullChargeJumpTimer) == 0x0034B0, "Member 'ATestMechVehicle_C::FullChargeJumpTimer' has a wrong offset!");
static_assert(offsetof(ATestMechVehicle_C, CameraShakeFullChargeJump) == 0x0034B8, "Member 'ATestMechVehicle_C::CameraShakeFullChargeJump' has a wrong offset!");
static_assert(offsetof(ATestMechVehicle_C, FullChargeJumpCameraShake) == 0x0034C0, "Member 'ATestMechVehicle_C::FullChargeJumpCameraShake' has a wrong offset!");
static_assert(offsetof(ATestMechVehicle_C, LandCameraShake) == 0x0034C8, "Member 'ATestMechVehicle_C::LandCameraShake' has a wrong offset!");
static_assert(offsetof(ATestMechVehicle_C, GE_VehicleDamageLanded) == 0x0034D0, "Member 'ATestMechVehicle_C::GE_VehicleDamageLanded' has a wrong offset!");
static_assert(offsetof(ATestMechVehicle_C, SetJumpKnockMagnitude) == 0x0034D8, "Member 'ATestMechVehicle_C::SetJumpKnockMagnitude' has a wrong offset!");
static_assert(offsetof(ATestMechVehicle_C, SetDashKnockStrength) == 0x0034F8, "Member 'ATestMechVehicle_C::SetDashKnockStrength' has a wrong offset!");
static_assert(offsetof(ATestMechVehicle_C, SetJumpSlamDownForce) == 0x003518, "Member 'ATestMechVehicle_C::SetJumpSlamDownForce' has a wrong offset!");
static_assert(offsetof(ATestMechVehicle_C, SetJumpSlamForwardForce) == 0x003538, "Member 'ATestMechVehicle_C::SetJumpSlamForwardForce' has a wrong offset!");
static_assert(offsetof(ATestMechVehicle_C, SetKickLaunchPlayerStrength) == 0x003558, "Member 'ATestMechVehicle_C::SetKickLaunchPlayerStrength' has a wrong offset!");
static_assert(offsetof(ATestMechVehicle_C, SetKickLaunchVehicleStrength) == 0x003578, "Member 'ATestMechVehicle_C::SetKickLaunchVehicleStrength' has a wrong offset!");
static_assert(offsetof(ATestMechVehicle_C, SetVehicleKnockUpStrength) == 0x003598, "Member 'ATestMechVehicle_C::SetVehicleKnockUpStrength' has a wrong offset!");
static_assert(offsetof(ATestMechVehicle_C, SetKickPlayerZ_LaunchStrength) == 0x0035B8, "Member 'ATestMechVehicle_C::SetKickPlayerZ_LaunchStrength' has a wrong offset!");
static_assert(offsetof(ATestMechVehicle_C, SetDashZ_LaunchPlayerAdditive) == 0x0035D8, "Member 'ATestMechVehicle_C::SetDashZ_LaunchPlayerAdditive' has a wrong offset!");
static_assert(offsetof(ATestMechVehicle_C, SetMinHeightToJumpSlam) == 0x0035F8, "Member 'ATestMechVehicle_C::SetMinHeightToJumpSlam' has a wrong offset!");
static_assert(offsetof(ATestMechVehicle_C, SetLandedDamageRadius) == 0x003618, "Member 'ATestMechVehicle_C::SetLandedDamageRadius' has a wrong offset!");
static_assert(offsetof(ATestMechVehicle_C, SavedDamageForMID) == 0x003638, "Member 'ATestMechVehicle_C::SavedDamageForMID' has a wrong offset!");
static_assert(offsetof(ATestMechVehicle_C, DamagedEffect) == 0x003640, "Member 'ATestMechVehicle_C::DamagedEffect' has a wrong offset!");
static_assert(offsetof(ATestMechVehicle_C, ShieldBubbleActor) == 0x003648, "Member 'ATestMechVehicle_C::ShieldBubbleActor' has a wrong offset!");
static_assert(offsetof(ATestMechVehicle_C, ShouldAllowShield) == 0x003650, "Member 'ATestMechVehicle_C::ShouldAllowShield' has a wrong offset!");
static_assert(offsetof(ATestMechVehicle_C, OverchargeMaterialCost) == 0x003670, "Member 'ATestMechVehicle_C::OverchargeMaterialCost' has a wrong offset!");
static_assert(offsetof(ATestMechVehicle_C, ShouldAllowOvercharge) == 0x003690, "Member 'ATestMechVehicle_C::ShouldAllowOvercharge' has a wrong offset!");
static_assert(offsetof(ATestMechVehicle_C, DetonateForceFeedbackNear) == 0x0036B0, "Member 'ATestMechVehicle_C::DetonateForceFeedbackNear' has a wrong offset!");
static_assert(offsetof(ATestMechVehicle_C, DetonateForceFeedbackFar) == 0x0036B8, "Member 'ATestMechVehicle_C::DetonateForceFeedbackFar' has a wrong offset!");
static_assert(offsetof(ATestMechVehicle_C, FootstepForceFeedback) == 0x0036C0, "Member 'ATestMechVehicle_C::FootstepForceFeedback' has a wrong offset!");
static_assert(offsetof(ATestMechVehicle_C, GC_JumpSlamActivated) == 0x0036C8, "Member 'ATestMechVehicle_C::GC_JumpSlamActivated' has a wrong offset!");
static_assert(offsetof(ATestMechVehicle_C, SetOverchargeShieldCost) == 0x0036D0, "Member 'ATestMechVehicle_C::SetOverchargeShieldCost' has a wrong offset!");
static_assert(offsetof(ATestMechVehicle_C, GC_SpawnSmokeIndicator) == 0x0036F0, "Member 'ATestMechVehicle_C::GC_SpawnSmokeIndicator' has a wrong offset!");
static_assert(offsetof(ATestMechVehicle_C, SetOverchargeDuration) == 0x0036F8, "Member 'ATestMechVehicle_C::SetOverchargeDuration' has a wrong offset!");
static_assert(offsetof(ATestMechVehicle_C, SetOverchargeCooldown) == 0x003718, "Member 'ATestMechVehicle_C::SetOverchargeCooldown' has a wrong offset!");
static_assert(offsetof(ATestMechVehicle_C, VisualizePulseIndicatorTimer) == 0x003738, "Member 'ATestMechVehicle_C::VisualizePulseIndicatorTimer' has a wrong offset!");
static_assert(offsetof(ATestMechVehicle_C, BodyMID) == 0x003740, "Member 'ATestMechVehicle_C::BodyMID' has a wrong offset!");
static_assert(offsetof(ATestMechVehicle_C, TargetingLaserAudio) == 0x003748, "Member 'ATestMechVehicle_C::TargetingLaserAudio' has a wrong offset!");
static_assert(offsetof(ATestMechVehicle_C, SetEnableTargetingLaser) == 0x003750, "Member 'ATestMechVehicle_C::SetEnableTargetingLaser' has a wrong offset!");
static_assert(offsetof(ATestMechVehicle_C, SetEnableSimProxyFix) == 0x003770, "Member 'ATestMechVehicle_C::SetEnableSimProxyFix' has a wrong offset!");
static_assert(offsetof(ATestMechVehicle_C, SetSimProxyFixRange) == 0x003790, "Member 'ATestMechVehicle_C::SetSimProxyFixRange' has a wrong offset!");
static_assert(offsetof(ATestMechVehicle_C, SetSelfDetonateDelay) == 0x0037B0, "Member 'ATestMechVehicle_C::SetSelfDetonateDelay' has a wrong offset!");
static_assert(offsetof(ATestMechVehicle_C, SetDetonateDelay) == 0x0037D0, "Member 'ATestMechVehicle_C::SetDetonateDelay' has a wrong offset!");
static_assert(offsetof(ATestMechVehicle_C, KillBuildupSelfDestruct) == 0x0037F0, "Member 'ATestMechVehicle_C::KillBuildupSelfDestruct' has a wrong offset!");
static_assert(offsetof(ATestMechVehicle_C, P_DetonationBuildupSelfDestruct) == 0x0037F8, "Member 'ATestMechVehicle_C::P_DetonationBuildupSelfDestruct' has a wrong offset!");
static_assert(offsetof(ATestMechVehicle_C, GroundShakeGC) == 0x003800, "Member 'ATestMechVehicle_C::GroundShakeGC' has a wrong offset!");
static_assert(offsetof(ATestMechVehicle_C, GroundShakeBigGC) == 0x003808, "Member 'ATestMechVehicle_C::GroundShakeBigGC' has a wrong offset!");
static_assert(offsetof(ATestMechVehicle_C, GC_JumpLanded) == 0x003810, "Member 'ATestMechVehicle_C::GC_JumpLanded' has a wrong offset!");
static_assert(offsetof(ATestMechVehicle_C, SetJumpApex) == 0x003818, "Member 'ATestMechVehicle_C::SetJumpApex' has a wrong offset!");
static_assert(offsetof(ATestMechVehicle_C, HitActors) == 0x003820, "Member 'ATestMechVehicle_C::HitActors' has a wrong offset!");
static_assert(offsetof(ATestMechVehicle_C, EnvironmentalActorsHit) == 0x003870, "Member 'ATestMechVehicle_C::EnvironmentalActorsHit' has a wrong offset!");

}

