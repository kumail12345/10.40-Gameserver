#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_CreativeRadio

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "FortniteGame_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_CreativeRadio.BP_CreativeRadio_C
// 0x0038 (0x0BE0 - 0x0BA8)
class ABP_CreativeRadio_C final : public ABuildingPropPlaygroundMusicPlayer
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0BA8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UCreative_Radio_AudioToMPC_C*           Creative_Radio_AudioToMPC;                         // 0x0BB0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFortMinigameProgressComponent*         FortMinigameProgress;                              // 0x0BB8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UToyOptionsComponent_C*                 ToyOptionsComponent;                               // 0x0BC0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RadioAttenuationDistance;                          // 0x0BC8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         VolumeOverride;                                    // 0x0BCC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CachedVolumeMultiplier;                            // 0x0BD0(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	float                                         CachedAttenuationSetting;                          // 0x0BD4(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	bool                                          ShouldDriveVisualization;                          // 0x0BD8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor)
	bool                                          CachedShouldDriveVisualization;                    // 0x0BD9(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, RepNotify, NoDestructor)
	bool                                          IsMeshVisibleDuringMinigame;                       // 0x0BDA(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_CreativeRadio(int32 EntryPoint);
	void BndEvt__ToyOptionsComponent_K2Node_ComponentBoundEvent_0_AnyPropertyChangedDelegate__DelegateSignature();
	void BndEvt__FortMinigameProgress_K2Node_ComponentBoundEvent_3_OnMinigameStateChanged__DelegateSignature(EFortMinigameState NewMinigameState);
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void ReceiveBeginPlay();
	void OnPropertyChanged();
	void OnRep_CachedVolumeMultiplier();
	void OnRep_CachedAttenuationSetting();
	void OnRep_CachedShouldDriveVisualization();
	void SetAttenuationDistance();
	void UpdateCachedAttenuationSettings();
	void UpdateMinigameVisuals(EFortMinigameState MinigameState);
	void PlaybackTypeUpgradePath();
	void CheckMinigameStateOnPropertyChanged();

	class FText BlueprintGetInteractionString(const class AFortPawn* InteractingPawn) const;
	bool BlueprintCanInteract(const class AFortPawn* InteractingPawn) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_CreativeRadio_C">();
	}
	static class ABP_CreativeRadio_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_CreativeRadio_C>();
	}
};
static_assert(alignof(ABP_CreativeRadio_C) == 0x000008, "Wrong alignment on ABP_CreativeRadio_C");
static_assert(sizeof(ABP_CreativeRadio_C) == 0x000BE0, "Wrong size on ABP_CreativeRadio_C");
static_assert(offsetof(ABP_CreativeRadio_C, UberGraphFrame) == 0x000BA8, "Member 'ABP_CreativeRadio_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_CreativeRadio_C, Creative_Radio_AudioToMPC) == 0x000BB0, "Member 'ABP_CreativeRadio_C::Creative_Radio_AudioToMPC' has a wrong offset!");
static_assert(offsetof(ABP_CreativeRadio_C, FortMinigameProgress) == 0x000BB8, "Member 'ABP_CreativeRadio_C::FortMinigameProgress' has a wrong offset!");
static_assert(offsetof(ABP_CreativeRadio_C, ToyOptionsComponent) == 0x000BC0, "Member 'ABP_CreativeRadio_C::ToyOptionsComponent' has a wrong offset!");
static_assert(offsetof(ABP_CreativeRadio_C, RadioAttenuationDistance) == 0x000BC8, "Member 'ABP_CreativeRadio_C::RadioAttenuationDistance' has a wrong offset!");
static_assert(offsetof(ABP_CreativeRadio_C, VolumeOverride) == 0x000BCC, "Member 'ABP_CreativeRadio_C::VolumeOverride' has a wrong offset!");
static_assert(offsetof(ABP_CreativeRadio_C, CachedVolumeMultiplier) == 0x000BD0, "Member 'ABP_CreativeRadio_C::CachedVolumeMultiplier' has a wrong offset!");
static_assert(offsetof(ABP_CreativeRadio_C, CachedAttenuationSetting) == 0x000BD4, "Member 'ABP_CreativeRadio_C::CachedAttenuationSetting' has a wrong offset!");
static_assert(offsetof(ABP_CreativeRadio_C, ShouldDriveVisualization) == 0x000BD8, "Member 'ABP_CreativeRadio_C::ShouldDriveVisualization' has a wrong offset!");
static_assert(offsetof(ABP_CreativeRadio_C, CachedShouldDriveVisualization) == 0x000BD9, "Member 'ABP_CreativeRadio_C::CachedShouldDriveVisualization' has a wrong offset!");
static_assert(offsetof(ABP_CreativeRadio_C, IsMeshVisibleDuringMinigame) == 0x000BDA, "Member 'ABP_CreativeRadio_C::IsMeshVisibleDuringMinigame' has a wrong offset!");

}

